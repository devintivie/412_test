
413_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e44  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08009024  08009024  00019024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009448  08009448  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009448  08009448  00019448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009450  08009450  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009450  08009450  00019450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009454  08009454  00019454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008530  20000070  080094c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085a0  080094c8  000285a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e645  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f65  00000000  00000000  0003e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  00042650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c8  00000000  00000000  00044010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006e9b  00000000  00000000  000457d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018de3  00000000  00000000  0004c673  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e2fe9  00000000  00000000  00065456  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014843f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000753c  00000000  00000000  001484bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800900c 	.word	0x0800900c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800900c 	.word	0x0800900c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b972 	b.w	80005cc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	4604      	mov	r4, r0
 8000308:	4688      	mov	r8, r1
 800030a:	2b00      	cmp	r3, #0
 800030c:	d14b      	bne.n	80003a6 <__udivmoddi4+0xa6>
 800030e:	428a      	cmp	r2, r1
 8000310:	4615      	mov	r5, r2
 8000312:	d967      	bls.n	80003e4 <__udivmoddi4+0xe4>
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0720 	rsb	r7, r2, #32
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	fa20 f707 	lsr.w	r7, r0, r7
 8000326:	4095      	lsls	r5, r2
 8000328:	ea47 0803 	orr.w	r8, r7, r3
 800032c:	4094      	lsls	r4, r2
 800032e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fbb8 f7fe 	udiv	r7, r8, lr
 8000338:	fa1f fc85 	uxth.w	ip, r5
 800033c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000340:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000344:	fb07 f10c 	mul.w	r1, r7, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x60>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000352:	f080 811b 	bcs.w	800058c <__udivmoddi4+0x28c>
 8000356:	4299      	cmp	r1, r3
 8000358:	f240 8118 	bls.w	800058c <__udivmoddi4+0x28c>
 800035c:	3f02      	subs	r7, #2
 800035e:	442b      	add	r3, r5
 8000360:	1a5b      	subs	r3, r3, r1
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb3 f0fe 	udiv	r0, r3, lr
 8000368:	fb0e 3310 	mls	r3, lr, r0, r3
 800036c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000370:	fb00 fc0c 	mul.w	ip, r0, ip
 8000374:	45a4      	cmp	ip, r4
 8000376:	d909      	bls.n	800038c <__udivmoddi4+0x8c>
 8000378:	192c      	adds	r4, r5, r4
 800037a:	f100 33ff 	add.w	r3, r0, #4294967295
 800037e:	f080 8107 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000382:	45a4      	cmp	ip, r4
 8000384:	f240 8104 	bls.w	8000590 <__udivmoddi4+0x290>
 8000388:	3802      	subs	r0, #2
 800038a:	442c      	add	r4, r5
 800038c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	2700      	movs	r7, #0
 8000396:	b11e      	cbz	r6, 80003a0 <__udivmoddi4+0xa0>
 8000398:	40d4      	lsrs	r4, r2
 800039a:	2300      	movs	r3, #0
 800039c:	e9c6 4300 	strd	r4, r3, [r6]
 80003a0:	4639      	mov	r1, r7
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d909      	bls.n	80003be <__udivmoddi4+0xbe>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80eb 	beq.w	8000586 <__udivmoddi4+0x286>
 80003b0:	2700      	movs	r7, #0
 80003b2:	e9c6 0100 	strd	r0, r1, [r6]
 80003b6:	4638      	mov	r0, r7
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	fab3 f783 	clz	r7, r3
 80003c2:	2f00      	cmp	r7, #0
 80003c4:	d147      	bne.n	8000456 <__udivmoddi4+0x156>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xd0>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 80fa 	bhi.w	80005c4 <__udivmoddi4+0x2c4>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb61 0303 	sbc.w	r3, r1, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4698      	mov	r8, r3
 80003da:	2e00      	cmp	r6, #0
 80003dc:	d0e0      	beq.n	80003a0 <__udivmoddi4+0xa0>
 80003de:	e9c6 4800 	strd	r4, r8, [r6]
 80003e2:	e7dd      	b.n	80003a0 <__udivmoddi4+0xa0>
 80003e4:	b902      	cbnz	r2, 80003e8 <__udivmoddi4+0xe8>
 80003e6:	deff      	udf	#255	; 0xff
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f040 808f 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f2:	1b49      	subs	r1, r1, r5
 80003f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f8:	fa1f f885 	uxth.w	r8, r5
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000402:	0c23      	lsrs	r3, r4, #16
 8000404:	fb0e 111c 	mls	r1, lr, ip, r1
 8000408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800040c:	fb08 f10c 	mul.w	r1, r8, ip
 8000410:	4299      	cmp	r1, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x124>
 8000414:	18eb      	adds	r3, r5, r3
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4299      	cmp	r1, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2bc>
 8000422:	4684      	mov	ip, r0
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000430:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x14c>
 800043c:	192c      	adds	r4, r5, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x14a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80b6 	bhi.w	80005b6 <__udivmoddi4+0x2b6>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e79f      	b.n	8000396 <__udivmoddi4+0x96>
 8000456:	f1c7 0c20 	rsb	ip, r7, #32
 800045a:	40bb      	lsls	r3, r7
 800045c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000460:	ea4e 0e03 	orr.w	lr, lr, r3
 8000464:	fa01 f407 	lsl.w	r4, r1, r7
 8000468:	fa20 f50c 	lsr.w	r5, r0, ip
 800046c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000470:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000474:	4325      	orrs	r5, r4
 8000476:	fbb3 f9f8 	udiv	r9, r3, r8
 800047a:	0c2c      	lsrs	r4, r5, #16
 800047c:	fb08 3319 	mls	r3, r8, r9, r3
 8000480:	fa1f fa8e 	uxth.w	sl, lr
 8000484:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000488:	fb09 f40a 	mul.w	r4, r9, sl
 800048c:	429c      	cmp	r4, r3
 800048e:	fa02 f207 	lsl.w	r2, r2, r7
 8000492:	fa00 f107 	lsl.w	r1, r0, r7
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1e 0303 	adds.w	r3, lr, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	f080 8087 	bcs.w	80005b2 <__udivmoddi4+0x2b2>
 80004a4:	429c      	cmp	r4, r3
 80004a6:	f240 8084 	bls.w	80005b2 <__udivmoddi4+0x2b2>
 80004aa:	f1a9 0902 	sub.w	r9, r9, #2
 80004ae:	4473      	add	r3, lr
 80004b0:	1b1b      	subs	r3, r3, r4
 80004b2:	b2ad      	uxth	r5, r5
 80004b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b8:	fb08 3310 	mls	r3, r8, r0, r3
 80004bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004c4:	45a2      	cmp	sl, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1e 0404 	adds.w	r4, lr, r4
 80004cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d0:	d26b      	bcs.n	80005aa <__udivmoddi4+0x2aa>
 80004d2:	45a2      	cmp	sl, r4
 80004d4:	d969      	bls.n	80005aa <__udivmoddi4+0x2aa>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4474      	add	r4, lr
 80004da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	eba4 040a 	sub.w	r4, r4, sl
 80004e6:	454c      	cmp	r4, r9
 80004e8:	46c2      	mov	sl, r8
 80004ea:	464b      	mov	r3, r9
 80004ec:	d354      	bcc.n	8000598 <__udivmoddi4+0x298>
 80004ee:	d051      	beq.n	8000594 <__udivmoddi4+0x294>
 80004f0:	2e00      	cmp	r6, #0
 80004f2:	d069      	beq.n	80005c8 <__udivmoddi4+0x2c8>
 80004f4:	ebb1 050a 	subs.w	r5, r1, sl
 80004f8:	eb64 0403 	sbc.w	r4, r4, r3
 80004fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000500:	40fd      	lsrs	r5, r7
 8000502:	40fc      	lsrs	r4, r7
 8000504:	ea4c 0505 	orr.w	r5, ip, r5
 8000508:	e9c6 5400 	strd	r5, r4, [r6]
 800050c:	2700      	movs	r7, #0
 800050e:	e747      	b.n	80003a0 <__udivmoddi4+0xa0>
 8000510:	f1c2 0320 	rsb	r3, r2, #32
 8000514:	fa20 f703 	lsr.w	r7, r0, r3
 8000518:	4095      	lsls	r5, r2
 800051a:	fa01 f002 	lsl.w	r0, r1, r2
 800051e:	fa21 f303 	lsr.w	r3, r1, r3
 8000522:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000526:	4338      	orrs	r0, r7
 8000528:	0c01      	lsrs	r1, r0, #16
 800052a:	fbb3 f7fe 	udiv	r7, r3, lr
 800052e:	fa1f f885 	uxth.w	r8, r5
 8000532:	fb0e 3317 	mls	r3, lr, r7, r3
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb07 f308 	mul.w	r3, r7, r8
 800053e:	428b      	cmp	r3, r1
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d907      	bls.n	8000556 <__udivmoddi4+0x256>
 8000546:	1869      	adds	r1, r5, r1
 8000548:	f107 3cff 	add.w	ip, r7, #4294967295
 800054c:	d22f      	bcs.n	80005ae <__udivmoddi4+0x2ae>
 800054e:	428b      	cmp	r3, r1
 8000550:	d92d      	bls.n	80005ae <__udivmoddi4+0x2ae>
 8000552:	3f02      	subs	r7, #2
 8000554:	4429      	add	r1, r5
 8000556:	1acb      	subs	r3, r1, r3
 8000558:	b281      	uxth	r1, r0
 800055a:	fbb3 f0fe 	udiv	r0, r3, lr
 800055e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000562:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000566:	fb00 f308 	mul.w	r3, r0, r8
 800056a:	428b      	cmp	r3, r1
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x27e>
 800056e:	1869      	adds	r1, r5, r1
 8000570:	f100 3cff 	add.w	ip, r0, #4294967295
 8000574:	d217      	bcs.n	80005a6 <__udivmoddi4+0x2a6>
 8000576:	428b      	cmp	r3, r1
 8000578:	d915      	bls.n	80005a6 <__udivmoddi4+0x2a6>
 800057a:	3802      	subs	r0, #2
 800057c:	4429      	add	r1, r5
 800057e:	1ac9      	subs	r1, r1, r3
 8000580:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000584:	e73b      	b.n	80003fe <__udivmoddi4+0xfe>
 8000586:	4637      	mov	r7, r6
 8000588:	4630      	mov	r0, r6
 800058a:	e709      	b.n	80003a0 <__udivmoddi4+0xa0>
 800058c:	4607      	mov	r7, r0
 800058e:	e6e7      	b.n	8000360 <__udivmoddi4+0x60>
 8000590:	4618      	mov	r0, r3
 8000592:	e6fb      	b.n	800038c <__udivmoddi4+0x8c>
 8000594:	4541      	cmp	r1, r8
 8000596:	d2ab      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 8000598:	ebb8 0a02 	subs.w	sl, r8, r2
 800059c:	eb69 020e 	sbc.w	r2, r9, lr
 80005a0:	3801      	subs	r0, #1
 80005a2:	4613      	mov	r3, r2
 80005a4:	e7a4      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a6:	4660      	mov	r0, ip
 80005a8:	e7e9      	b.n	800057e <__udivmoddi4+0x27e>
 80005aa:	4618      	mov	r0, r3
 80005ac:	e795      	b.n	80004da <__udivmoddi4+0x1da>
 80005ae:	4667      	mov	r7, ip
 80005b0:	e7d1      	b.n	8000556 <__udivmoddi4+0x256>
 80005b2:	4681      	mov	r9, r0
 80005b4:	e77c      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b6:	3802      	subs	r0, #2
 80005b8:	442c      	add	r4, r5
 80005ba:	e747      	b.n	800044c <__udivmoddi4+0x14c>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	442b      	add	r3, r5
 80005c2:	e72f      	b.n	8000424 <__udivmoddi4+0x124>
 80005c4:	4638      	mov	r0, r7
 80005c6:	e708      	b.n	80003da <__udivmoddi4+0xda>
 80005c8:	4637      	mov	r7, r6
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0xa0>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <ConnectWifi>:
char body[BODY_SIZE] = "";
char contentLength[25];
char message[MESSAGE_SIZE] = "";

void ConnectWifi(SPI_HandleTypeDef *spidef)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	wifi_spi = *spidef;
 80005d8:	4a05      	ldr	r2, [pc, #20]	; (80005f0 <ConnectWifi+0x20>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4610      	mov	r0, r2
 80005de:	4619      	mov	r1, r3
 80005e0:	2358      	movs	r3, #88	; 0x58
 80005e2:	461a      	mov	r2, r3
 80005e4:	f007 fbd2 	bl	8007d8c <memcpy>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200018ac 	.word	0x200018ac

080005f4 <Wifi_ChipDeselect>:

//WiFi SPI ChipDeselect
void Wifi_ChipDeselect(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	4802      	ldr	r0, [pc, #8]	; (8000608 <Wifi_ChipDeselect+0x14>)
 8000600:	f003 fd9a 	bl	8004138 <HAL_GPIO_WritePin>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021800 	.word	0x40021800

0800060c <Wifi_ChipSelect>:

//WiFi SPI ChipSelect
void Wifi_ChipSelect(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIFI_SPI_CSN_GPIO_Port, WIFI_SPI_CSN_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <Wifi_ChipSelect+0x14>)
 8000618:	f003 fd8e 	bl	8004138 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40021800 	.word	0x40021800

08000624 <WifiStartup>:

void WifiStartup()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af02      	add	r7, sp, #8
	int length = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
	uint16_t wb[] = {0x0a0a};
 800062e:	f640 230a 	movw	r3, #2570	; 0xa0a
 8000632:	813b      	strh	r3, [r7, #8]
	uint16_t rb[1];
	Wifi_ChipSelect();
 8000634:	f7ff ffea 	bl	800060c <Wifi_ChipSelect>

	while(IsDataPhaseReady())
 8000638:	e00b      	b.n	8000652 <WifiStartup+0x2e>
	{
		HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, length, HAL_MAX_DELAY);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	b298      	uxth	r0, r3
 800063e:	1d3a      	adds	r2, r7, #4
 8000640:	f107 0108 	add.w	r1, r7, #8
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	4603      	mov	r3, r0
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <WifiStartup+0x44>)
 800064e:	f005 fce9 	bl	8006024 <HAL_SPI_TransmitReceive>
	while(IsDataPhaseReady())
 8000652:	f000 f823 	bl	800069c <IsDataPhaseReady>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ee      	bne.n	800063a <WifiStartup+0x16>
//		printf("in first data phase, rb = 0x%0x, 0x%0x\r\n", rb[1], rb[0]);
	}
	Wifi_ChipDeselect();
 800065c:	f7ff ffca 	bl	80005f4 <Wifi_ChipDeselect>
}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200018ac 	.word	0x200018ac

0800066c <GetCmdDataReady>:

uint8_t GetCmdDataReady()
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
	return (uint8_t)HAL_GPIO_ReadPin(WIFI_DRDY_GPIO_Port, WIFI_DRDY_Pin);
 8000670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <GetCmdDataReady+0x14>)
 8000676:	f003 fd47 	bl	8004108 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
}
 800067c:	4618      	mov	r0, r3
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021800 	.word	0x40021800

08000684 <IsCommandPhaseReady>:

bool IsCommandPhaseReady()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 8000688:	f7ff fff0 	bl	800066c <GetCmdDataReady>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <IsCommandPhaseReady+0x12>
	{
		return true;
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <IsCommandPhaseReady+0x14>
	}
	return false;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}

0800069c <IsDataPhaseReady>:

bool IsDataPhaseReady()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	if(GetCmdDataReady() != 0)
 80006a0:	f7ff ffe4 	bl	800066c <GetCmdDataReady>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <IsDataPhaseReady+0x12>
	{
		return true;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e000      	b.n	80006b0 <IsDataPhaseReady+0x14>
	}
	return false;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <SetNetworkStatus>:

void SetNetworkStatus(wl_status_t status)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	networkStatus = status;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <SetNetworkStatus+0x1c>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	2000008c 	.word	0x2000008c

080006d4 <GetNetworkStatus>:

wl_status_t GetNetworkStatus()
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	return networkStatus;
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <GetNetworkStatus+0x14>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	2000008c 	.word	0x2000008c

080006ec <SetSocketState>:

void SetSocketState(int socket, socket_status_t status)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	sockState[socket] = status;
 80006f8:	78fa      	ldrb	r2, [r7, #3]
 80006fa:	4905      	ldr	r1, [pc, #20]	; (8000710 <SetSocketState+0x24>)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000090 	.word	0x20000090

08000714 <GetSPIResponse>:

int GetSPIResponse(char *rbuf)
{
 8000714:	b5b0      	push	{r4, r5, r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af02      	add	r7, sp, #8
 800071a:	6078      	str	r0, [r7, #4]
//	uint8_t checkReady = GetCmdDataReady();
	while(!IsDataPhaseReady())
 800071c:	bf00      	nop
 800071e:	f7ff ffbd 	bl	800069c <IsDataPhaseReady>
 8000722:	4603      	mov	r3, r0
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f7      	bne.n	800071e <GetSPIResponse+0xa>
	{
//		checkReady = GetCmdDataReady();
	}
	int length = 1;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
	uint16_t wb2[] = { 0x0A0A };
 8000732:	f640 230a 	movw	r3, #2570	; 0xa0a
 8000736:	813b      	strh	r3, [r7, #8]
	uint16_t rb2[length];
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	466b      	mov	r3, sp
 800073c:	461d      	mov	r5, r3
 800073e:	1e43      	subs	r3, r0, #1
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4603      	mov	r3, r0
 8000744:	4619      	mov	r1, r3
 8000746:	f04f 0200 	mov.w	r2, #0
 800074a:	f04f 0300 	mov.w	r3, #0
 800074e:	f04f 0400 	mov.w	r4, #0
 8000752:	0114      	lsls	r4, r2, #4
 8000754:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000758:	010b      	lsls	r3, r1, #4
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	f04f 0400 	mov.w	r4, #0
 800076a:	0114      	lsls	r4, r2, #4
 800076c:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000770:	010b      	lsls	r3, r1, #4
 8000772:	4603      	mov	r3, r0
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	3301      	adds	r3, #1
 8000778:	3307      	adds	r3, #7
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	ebad 0d03 	sub.w	sp, sp, r3
 8000782:	ab02      	add	r3, sp, #8
 8000784:	3301      	adds	r3, #1
 8000786:	085b      	lsrs	r3, r3, #1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]

	Wifi_ChipSelect();
 800078c:	f7ff ff3e 	bl	800060c <Wifi_ChipSelect>

	int i = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
	int index = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
	while(IsDataPhaseReady())
 8000798:	e02b      	b.n	80007f2 <GetSPIResponse+0xde>
	{
		HAL_Delay(20);
 800079a:	2014      	movs	r0, #20
 800079c:	f002 f8c6 	bl	800292c <HAL_Delay>
		HAL_SPI_TransmitReceive(&wifi_spi, &wb2, &rb2, length, HAL_MAX_DELAY);
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	b298      	uxth	r0, r3
 80007a6:	f107 0108 	add.w	r1, r7, #8
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4603      	mov	r3, r0
 80007b2:	481c      	ldr	r0, [pc, #112]	; (8000824 <GetSPIResponse+0x110>)
 80007b4:	f005 fc36 	bl	8006024 <HAL_SPI_TransmitReceive>

//		printf("i = %d, value = %0x\r\n", i, rb2[0]);
		char first = rb2[0] & 0xff;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	72fb      	strb	r3, [r7, #11]
		char second = rb2[0] >> 8;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	72bb      	strb	r3, [r7, #10]

		if(first != 0x15)
 80007c8:	7afb      	ldrb	r3, [r7, #11]
 80007ca:	2b15      	cmp	r3, #21
 80007cc:	d005      	beq.n	80007da <GetSPIResponse+0xc6>
		{
			spi_response[index++] = first;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	61fa      	str	r2, [r7, #28]
 80007d4:	4914      	ldr	r1, [pc, #80]	; (8000828 <GetSPIResponse+0x114>)
 80007d6:	7afa      	ldrb	r2, [r7, #11]
 80007d8:	54ca      	strb	r2, [r1, r3]
		}
		if(second != 0x15)
 80007da:	7abb      	ldrb	r3, [r7, #10]
 80007dc:	2b15      	cmp	r3, #21
 80007de:	d005      	beq.n	80007ec <GetSPIResponse+0xd8>
		{
			spi_response[index++] = (char)second;
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	61fa      	str	r2, [r7, #28]
 80007e6:	4910      	ldr	r1, [pc, #64]	; (8000828 <GetSPIResponse+0x114>)
 80007e8:	7aba      	ldrb	r2, [r7, #10]
 80007ea:	54ca      	strb	r2, [r1, r3]
		}

		i++;
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	3301      	adds	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
	while(IsDataPhaseReady())
 80007f2:	f7ff ff53 	bl	800069c <IsDataPhaseReady>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1ce      	bne.n	800079a <GetSPIResponse+0x86>
	}

	if(!strstr((char *)spi_response, AT_OK_STRING))
 80007fc:	490b      	ldr	r1, [pc, #44]	; (800082c <GetSPIResponse+0x118>)
 80007fe:	480a      	ldr	r0, [pc, #40]	; (8000828 <GetSPIResponse+0x114>)
 8000800:	f007 fc3b 	bl	800807a <strstr>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d103      	bne.n	8000812 <GetSPIResponse+0xfe>
	{
		printf("%s\r\n", spi_response);
 800080a:	4907      	ldr	r1, [pc, #28]	; (8000828 <GetSPIResponse+0x114>)
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <GetSPIResponse+0x11c>)
 800080e:	f007 fb79 	bl	8007f04 <iprintf>
	}
	Wifi_ChipDeselect();
 8000812:	f7ff feef 	bl	80005f4 <Wifi_ChipDeselect>
	return index;
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	46ad      	mov	sp, r5
}
 800081a:	4618      	mov	r0, r3
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bdb0      	pop	{r4, r5, r7, pc}
 8000822:	bf00      	nop
 8000824:	200018ac 	.word	0x200018ac
 8000828:	200013fc 	.word	0x200013fc
 800082c:	08009028 	.word	0x08009028
 8000830:	08009034 	.word	0x08009034

08000834 <ReceiveSPICommand>:

ES_WIFI_Status_t ReceiveSPICommand(char *pdata)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	int recv_len = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
	recv_len = GetSPIResponse(pdata);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff67 	bl	8000714 <GetSPIResponse>
 8000846:	60f8      	str	r0, [r7, #12]

	if ((recv_len > 0) && (recv_len < BUFFER_SIZE))
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd21      	ble.n	8000892 <ReceiveSPICommand+0x5e>
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000854:	da1d      	bge.n	8000892 <ReceiveSPICommand+0x5e>
	{
	    *(pdata + recv_len) = 0;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	    if (strstr((char *)pdata, AT_OK_STRING))
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <ReceiveSPICommand+0x68>)
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f007 fc09 	bl	800807a <strstr>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <ReceiveSPICommand+0x3e>
	    {
	    	return ES_WIFI_STATUS_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e010      	b.n	8000894 <ReceiveSPICommand+0x60>
	    }
	    else
	    {
	    	if (strstr((char *)pdata, AT_ERROR_STRING))
 8000872:	490b      	ldr	r1, [pc, #44]	; (80008a0 <ReceiveSPICommand+0x6c>)
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f007 fc00 	bl	800807a <strstr>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <ReceiveSPICommand+0x50>
	    	{
	    		return ES_WIFI_STATUS_ERROR;
 8000880:	2302      	movs	r3, #2
 8000882:	e007      	b.n	8000894 <ReceiveSPICommand+0x60>
	    	}
	    	else
	    	{
	    		/* Some data still to get. Typically with AP list */
	    		if (recv_len == (int16_t)(BUFFER_SIZE - AT_OK_STRING_LEN - 2))
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800088a:	4293      	cmp	r3, r2
 800088c:	d101      	bne.n	8000892 <ReceiveSPICommand+0x5e>
	    		{
	    			return ES_WIFI_STATUS_REQ_DATA_STAGE;
 800088e:	2301      	movs	r3, #1
 8000890:	e000      	b.n	8000894 <ReceiveSPICommand+0x60>
	    		}
	    	}
		}
	}
	return ES_WIFI_STATUS_IO_ERROR;
 8000892:	2304      	movs	r3, #4
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	08009028 	.word	0x08009028
 80008a0:	0800903c 	.word	0x0800903c

080008a4 <SendSPICommand>:

ES_WIFI_Status_t SendSPICommand()//char *command)
{
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	b08d      	sub	sp, #52	; 0x34
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	466b      	mov	r3, sp
 80008ac:	461d      	mov	r5, r3
	uint8_t checkReady;
	printf("send spi command %s\r\n", full_command);
 80008ae:	4968      	ldr	r1, [pc, #416]	; (8000a50 <SendSPICommand+0x1ac>)
 80008b0:	4868      	ldr	r0, [pc, #416]	; (8000a54 <SendSPICommand+0x1b0>)
 80008b2:	f007 fb27 	bl	8007f04 <iprintf>
	int full_length = strlen(full_command);
 80008b6:	4866      	ldr	r0, [pc, #408]	; (8000a50 <SendSPICommand+0x1ac>)
 80008b8:	f7ff fcb2 	bl	8000220 <strlen>
 80008bc:	4603      	mov	r3, r0
 80008be:	617b      	str	r3, [r7, #20]
	int send_length = strlen(full_command)/2;
 80008c0:	4863      	ldr	r0, [pc, #396]	; (8000a50 <SendSPICommand+0x1ac>)
 80008c2:	f7ff fcad 	bl	8000220 <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
	memset(spi_response, 0, BUFFER_SIZE);
 80008cc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008d0:	2100      	movs	r1, #0
 80008d2:	4861      	ldr	r0, [pc, #388]	; (8000a58 <SendSPICommand+0x1b4>)
 80008d4:	f007 fa65 	bl	8007da2 <memset>
	bool odd = false;
 80008d8:	2300      	movs	r3, #0
 80008da:	77fb      	strb	r3, [r7, #31]
	if(full_length % 2 == 1)
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f003 0301 	and.w	r3, r3, #1
 80008e4:	bfb8      	it	lt
 80008e6:	425b      	neglt	r3, r3
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d104      	bne.n	80008f6 <SendSPICommand+0x52>
	{
		send_length++;
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	3301      	adds	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
		odd = true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	77fb      	strb	r3, [r7, #31]
	}
	uint16_t wb[send_length];
 80008f6:	69b8      	ldr	r0, [r7, #24]
 80008f8:	1e43      	subs	r3, r0, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	f04f 0400 	mov.w	r4, #0
 800090c:	0114      	lsls	r4, r2, #4
 800090e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8000912:	010b      	lsls	r3, r1, #4
 8000914:	4603      	mov	r3, r0
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 0200 	mov.w	r2, #0
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	f04f 0400 	mov.w	r4, #0
 8000924:	0114      	lsls	r4, r2, #4
 8000926:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 800092a:	010b      	lsls	r3, r1, #4
 800092c:	4603      	mov	r3, r0
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	3301      	adds	r3, #1
 8000932:	3307      	adds	r3, #7
 8000934:	08db      	lsrs	r3, r3, #3
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	ebad 0d03 	sub.w	sp, sp, r3
 800093c:	ab02      	add	r3, sp, #8
 800093e:	3301      	adds	r3, #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
	memset(wb, 0, send_length);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f007 fa28 	bl	8007da2 <memset>

	for(int i = 0; i < send_length; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
 8000956:	e025      	b.n	80009a4 <SendSPICommand+0x100>
	{
		uint16_t lo = full_command[i*2];
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4a3c      	ldr	r2, [pc, #240]	; (8000a50 <SendSPICommand+0x1ac>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	807b      	strh	r3, [r7, #2]
		uint16_t hi = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	84fb      	strh	r3, [r7, #38]	; 0x26
		if(i == send_length - 1 && odd)
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	3b01      	subs	r3, #1
 800096a:	6a3a      	ldr	r2, [r7, #32]
 800096c:	429a      	cmp	r2, r3
 800096e:	d106      	bne.n	800097e <SendSPICommand+0xda>
 8000970:	7ffb      	ldrb	r3, [r7, #31]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SendSPICommand+0xda>
		{
			hi = 0x0A << 8;
 8000976:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800097a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800097c:	e007      	b.n	800098e <SendSPICommand+0xea>
		}
		else
		{
			hi = full_command[i*2+1] << 8;
 800097e:	6a3b      	ldr	r3, [r7, #32]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	3301      	adds	r3, #1
 8000984:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <SendSPICommand+0x1ac>)
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	b29b      	uxth	r3, r3
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
		wb[i] = lo | hi;
 800098e:	887a      	ldrh	r2, [r7, #2]
 8000990:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000992:	4313      	orrs	r3, r2
 8000994:	b299      	uxth	r1, r3
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6a3a      	ldr	r2, [r7, #32]
 800099a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i = 0; i < send_length; i++)
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	3301      	adds	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
 80009a4:	6a3a      	ldr	r2, [r7, #32]
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbd5      	blt.n	8000958 <SendSPICommand+0xb4>

	}
	uint16_t rb[send_length];
 80009ac:	69b8      	ldr	r0, [r7, #24]
 80009ae:	466b      	mov	r3, sp
 80009b0:	461e      	mov	r6, r3
 80009b2:	1e43      	subs	r3, r0, #1
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4603      	mov	r3, r0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	f04f 0400 	mov.w	r4, #0
 80009c6:	0114      	lsls	r4, r2, #4
 80009c8:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80009cc:	010b      	lsls	r3, r1, #4
 80009ce:	4603      	mov	r3, r0
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 0200 	mov.w	r2, #0
 80009d6:	f04f 0300 	mov.w	r3, #0
 80009da:	f04f 0400 	mov.w	r4, #0
 80009de:	0114      	lsls	r4, r2, #4
 80009e0:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80009e4:	010b      	lsls	r3, r1, #4
 80009e6:	4603      	mov	r3, r0
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	3301      	adds	r3, #1
 80009ec:	3307      	adds	r3, #7
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	ebad 0d03 	sub.w	sp, sp, r3
 80009f6:	ab02      	add	r3, sp, #8
 80009f8:	3301      	adds	r3, #1
 80009fa:	085b      	lsrs	r3, r3, #1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	607b      	str	r3, [r7, #4]

	//Wait for chip to be ready for command
	while(!IsCommandPhaseReady())
 8000a00:	bf00      	nop
 8000a02:	f7ff fe3f 	bl	8000684 <IsCommandPhaseReady>
 8000a06:	4603      	mov	r3, r0
 8000a08:	f083 0301 	eor.w	r3, r3, #1
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f7      	bne.n	8000a02 <SendSPICommand+0x15e>
	{

	}

	Wifi_ChipSelect();
 8000a12:	f7ff fdfb 	bl	800060c <Wifi_ChipSelect>
	HAL_SPI_TransmitReceive(&wifi_spi, &wb, &rb, send_length, HAL_MAX_DELAY);
 8000a16:	68f9      	ldr	r1, [r7, #12]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	b298      	uxth	r0, r3
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4603      	mov	r3, r0
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <SendSPICommand+0x1b8>)
 8000a28:	f005 fafc 	bl	8006024 <HAL_SPI_TransmitReceive>
	Wifi_ChipDeselect();
 8000a2c:	f7ff fde2 	bl	80005f4 <Wifi_ChipDeselect>

	while(IsCommandPhaseReady())
 8000a30:	bf00      	nop
 8000a32:	f7ff fe27 	bl	8000684 <IsCommandPhaseReady>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1fa      	bne.n	8000a32 <SendSPICommand+0x18e>
	{

	}

	return ReceiveSPICommand(spi_response);
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <SendSPICommand+0x1b4>)
 8000a3e:	f7ff fef9 	bl	8000834 <ReceiveSPICommand>
 8000a42:	4603      	mov	r3, r0
 8000a44:	46b5      	mov	sp, r6
 8000a46:	46ad      	mov	sp, r5
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	372c      	adds	r7, #44	; 0x2c
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a50:	20000ffc 	.word	0x20000ffc
 8000a54:	08009044 	.word	0x08009044
 8000a58:	200013fc 	.word	0x200013fc
 8000a5c:	200018ac 	.word	0x200018ac

08000a60 <GetData>:

void GetData(int socket_id)
{
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, AT_READ_DATA);
 8000a68:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <GetData+0x1ec>)
 8000a6a:	4a79      	ldr	r2, [pc, #484]	; (8000c50 <GetData+0x1f0>)
 8000a6c:	6810      	ldr	r0, [r2, #0]
 8000a6e:	6018      	str	r0, [r3, #0]
 8000a70:	7912      	ldrb	r2, [r2, #4]
 8000a72:	711a      	strb	r2, [r3, #4]
	SendSPICommand();
 8000a74:	f7ff ff16 	bl	80008a4 <SendSPICommand>

	if(strstr(spi_response, "GET"))
 8000a78:	4976      	ldr	r1, [pc, #472]	; (8000c54 <GetData+0x1f4>)
 8000a7a:	4877      	ldr	r0, [pc, #476]	; (8000c58 <GetData+0x1f8>)
 8000a7c:	f007 fafd 	bl	800807a <strstr>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80de 	beq.w	8000c44 <GetData+0x1e4>
	{
		printf("%s\r\n", spi_response);
 8000a88:	4973      	ldr	r1, [pc, #460]	; (8000c58 <GetData+0x1f8>)
 8000a8a:	4874      	ldr	r0, [pc, #464]	; (8000c5c <GetData+0x1fc>)
 8000a8c:	f007 fa3a 	bl	8007f04 <iprintf>

		strcpy(body, "\n<!DOCTYPE html><html><head><title>Bye-bye baby bye-bye</title>");
 8000a90:	4a73      	ldr	r2, [pc, #460]	; (8000c60 <GetData+0x200>)
 8000a92:	4b74      	ldr	r3, [pc, #464]	; (8000c64 <GetData+0x204>)
 8000a94:	4614      	mov	r4, r2
 8000a96:	461d      	mov	r5, r3
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		strcat(body, "<style>body { background-color: #111 }");
 8000aac:	486c      	ldr	r0, [pc, #432]	; (8000c60 <GetData+0x200>)
 8000aae:	f7ff fbb7 	bl	8000220 <strlen>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4b6a      	ldr	r3, [pc, #424]	; (8000c60 <GetData+0x200>)
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a6b      	ldr	r2, [pc, #428]	; (8000c68 <GetData+0x208>)
 8000abc:	4614      	mov	r4, r2
 8000abe:	469c      	mov	ip, r3
 8000ac0:	f104 0e20 	add.w	lr, r4, #32
 8000ac4:	4665      	mov	r5, ip
 8000ac6:	4626      	mov	r6, r4
 8000ac8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000aca:	6028      	str	r0, [r5, #0]
 8000acc:	6069      	str	r1, [r5, #4]
 8000ace:	60aa      	str	r2, [r5, #8]
 8000ad0:	60eb      	str	r3, [r5, #12]
 8000ad2:	3410      	adds	r4, #16
 8000ad4:	f10c 0c10 	add.w	ip, ip, #16
 8000ad8:	4574      	cmp	r4, lr
 8000ada:	d1f3      	bne.n	8000ac4 <GetData+0x64>
 8000adc:	4663      	mov	r3, ip
 8000ade:	4622      	mov	r2, r4
 8000ae0:	6810      	ldr	r0, [r2, #0]
 8000ae2:	6018      	str	r0, [r3, #0]
 8000ae4:	8891      	ldrh	r1, [r2, #4]
 8000ae6:	7992      	ldrb	r2, [r2, #6]
 8000ae8:	8099      	strh	r1, [r3, #4]
 8000aea:	719a      	strb	r2, [r3, #6]
		strcat(body, "h1 { font-size:4cm; text-align: center; color: black;");
 8000aec:	485c      	ldr	r0, [pc, #368]	; (8000c60 <GetData+0x200>)
 8000aee:	f7ff fb97 	bl	8000220 <strlen>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b5a      	ldr	r3, [pc, #360]	; (8000c60 <GetData+0x200>)
 8000af8:	4413      	add	r3, r2
 8000afa:	4a5c      	ldr	r2, [pc, #368]	; (8000c6c <GetData+0x20c>)
 8000afc:	4614      	mov	r4, r2
 8000afe:	469c      	mov	ip, r3
 8000b00:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b04:	4665      	mov	r5, ip
 8000b06:	4626      	mov	r6, r4
 8000b08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b0a:	6028      	str	r0, [r5, #0]
 8000b0c:	6069      	str	r1, [r5, #4]
 8000b0e:	60aa      	str	r2, [r5, #8]
 8000b10:	60eb      	str	r3, [r5, #12]
 8000b12:	3410      	adds	r4, #16
 8000b14:	f10c 0c10 	add.w	ip, ip, #16
 8000b18:	4574      	cmp	r4, lr
 8000b1a:	d1f3      	bne.n	8000b04 <GetData+0xa4>
 8000b1c:	4663      	mov	r3, ip
 8000b1e:	4622      	mov	r2, r4
 8000b20:	6810      	ldr	r0, [r2, #0]
 8000b22:	6018      	str	r0, [r3, #0]
 8000b24:	8892      	ldrh	r2, [r2, #4]
 8000b26:	809a      	strh	r2, [r3, #4]
		strcat(body, " text-shadow: 0 0 2mm red}</style>");
 8000b28:	484d      	ldr	r0, [pc, #308]	; (8000c60 <GetData+0x200>)
 8000b2a:	f7ff fb79 	bl	8000220 <strlen>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b4b      	ldr	r3, [pc, #300]	; (8000c60 <GetData+0x200>)
 8000b34:	4413      	add	r3, r2
 8000b36:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <GetData+0x210>)
 8000b38:	4614      	mov	r4, r2
 8000b3a:	469c      	mov	ip, r3
 8000b3c:	f104 0e20 	add.w	lr, r4, #32
 8000b40:	4665      	mov	r5, ip
 8000b42:	4626      	mov	r6, r4
 8000b44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b46:	6028      	str	r0, [r5, #0]
 8000b48:	6069      	str	r1, [r5, #4]
 8000b4a:	60aa      	str	r2, [r5, #8]
 8000b4c:	60eb      	str	r3, [r5, #12]
 8000b4e:	3410      	adds	r4, #16
 8000b50:	f10c 0c10 	add.w	ip, ip, #16
 8000b54:	4574      	cmp	r4, lr
 8000b56:	d1f3      	bne.n	8000b40 <GetData+0xe0>
 8000b58:	4663      	mov	r3, ip
 8000b5a:	4622      	mov	r2, r4
 8000b5c:	8811      	ldrh	r1, [r2, #0]
 8000b5e:	7892      	ldrb	r2, [r2, #2]
 8000b60:	8019      	strh	r1, [r3, #0]
 8000b62:	709a      	strb	r2, [r3, #2]
		strcat(body, "</head><body><h1>Devin, you sexy bastard</h1></body></html>");
 8000b64:	483e      	ldr	r0, [pc, #248]	; (8000c60 <GetData+0x200>)
 8000b66:	f7ff fb5b 	bl	8000220 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <GetData+0x200>)
 8000b70:	4413      	add	r3, r2
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <GetData+0x214>)
 8000b74:	4614      	mov	r4, r2
 8000b76:	469c      	mov	ip, r3
 8000b78:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	4626      	mov	r6, r4
 8000b80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b82:	6028      	str	r0, [r5, #0]
 8000b84:	6069      	str	r1, [r5, #4]
 8000b86:	60aa      	str	r2, [r5, #8]
 8000b88:	60eb      	str	r3, [r5, #12]
 8000b8a:	3410      	adds	r4, #16
 8000b8c:	f10c 0c10 	add.w	ip, ip, #16
 8000b90:	4574      	cmp	r4, lr
 8000b92:	d1f3      	bne.n	8000b7c <GetData+0x11c>
 8000b94:	4665      	mov	r5, ip
 8000b96:	4623      	mov	r3, r4
 8000b98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b9a:	6028      	str	r0, [r5, #0]
 8000b9c:	6069      	str	r1, [r5, #4]
 8000b9e:	60aa      	str	r2, [r5, #8]

		int length = strlen(body);
 8000ba0:	482f      	ldr	r0, [pc, #188]	; (8000c60 <GetData+0x200>)
 8000ba2:	f7ff fb3d 	bl	8000220 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60fb      	str	r3, [r7, #12]

		strcpy(message, "HTTP/1.1 200 OK\n");
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <GetData+0x218>)
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <GetData+0x21c>)
 8000bae:	4614      	mov	r4, r2
 8000bb0:	461d      	mov	r5, r3
 8000bb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	7023      	strb	r3, [r4, #0]
		strcat(message, "Connection: Close\n");
 8000bba:	482f      	ldr	r0, [pc, #188]	; (8000c78 <GetData+0x218>)
 8000bbc:	f7ff fb30 	bl	8000220 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <GetData+0x218>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a2d      	ldr	r2, [pc, #180]	; (8000c80 <GetData+0x220>)
 8000bca:	461d      	mov	r5, r3
 8000bcc:	4614      	mov	r4, r2
 8000bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd0:	6028      	str	r0, [r5, #0]
 8000bd2:	6069      	str	r1, [r5, #4]
 8000bd4:	60aa      	str	r2, [r5, #8]
 8000bd6:	60eb      	str	r3, [r5, #12]
 8000bd8:	8823      	ldrh	r3, [r4, #0]
 8000bda:	78a2      	ldrb	r2, [r4, #2]
 8000bdc:	822b      	strh	r3, [r5, #16]
 8000bde:	4613      	mov	r3, r2
 8000be0:	74ab      	strb	r3, [r5, #18]
		strcat(message, "Content-type: text/html; charset=UTF-8\n");
 8000be2:	4825      	ldr	r0, [pc, #148]	; (8000c78 <GetData+0x218>)
 8000be4:	f7ff fb1c 	bl	8000220 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <GetData+0x218>)
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a24      	ldr	r2, [pc, #144]	; (8000c84 <GetData+0x224>)
 8000bf2:	4614      	mov	r4, r2
 8000bf4:	469c      	mov	ip, r3
 8000bf6:	f104 0e20 	add.w	lr, r4, #32
 8000bfa:	4665      	mov	r5, ip
 8000bfc:	4626      	mov	r6, r4
 8000bfe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c00:	6028      	str	r0, [r5, #0]
 8000c02:	6069      	str	r1, [r5, #4]
 8000c04:	60aa      	str	r2, [r5, #8]
 8000c06:	60eb      	str	r3, [r5, #12]
 8000c08:	3410      	adds	r4, #16
 8000c0a:	f10c 0c10 	add.w	ip, ip, #16
 8000c0e:	4574      	cmp	r4, lr
 8000c10:	d1f3      	bne.n	8000bfa <GetData+0x19a>
 8000c12:	4662      	mov	r2, ip
 8000c14:	4623      	mov	r3, r4
 8000c16:	cb03      	ldmia	r3!, {r0, r1}
 8000c18:	6010      	str	r0, [r2, #0]
 8000c1a:	6051      	str	r1, [r2, #4]
		sprintf(contentLength, "Content-Length: %d\n\n", strlen(body));
 8000c1c:	4810      	ldr	r0, [pc, #64]	; (8000c60 <GetData+0x200>)
 8000c1e:	f7ff faff 	bl	8000220 <strlen>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4918      	ldr	r1, [pc, #96]	; (8000c88 <GetData+0x228>)
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <GetData+0x22c>)
 8000c2a:	f007 f9f7 	bl	800801c <siprintf>
		strcat(message, contentLength);
 8000c2e:	4917      	ldr	r1, [pc, #92]	; (8000c8c <GetData+0x22c>)
 8000c30:	4811      	ldr	r0, [pc, #68]	; (8000c78 <GetData+0x218>)
 8000c32:	f007 fa13 	bl	800805c <strcat>


		strcat(message, body);
 8000c36:	490a      	ldr	r1, [pc, #40]	; (8000c60 <GetData+0x200>)
 8000c38:	480f      	ldr	r0, [pc, #60]	; (8000c78 <GetData+0x218>)
 8000c3a:	f007 fa0f 	bl	800805c <strcat>
		SendResponse(message);
 8000c3e:	480e      	ldr	r0, [pc, #56]	; (8000c78 <GetData+0x218>)
 8000c40:	f000 f97a 	bl	8000f38 <SendResponse>
//	{
//		SendResponse("yes please");
//	}


}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c4c:	20000ffc 	.word	0x20000ffc
 8000c50:	0800905c 	.word	0x0800905c
 8000c54:	08009064 	.word	0x08009064
 8000c58:	200013fc 	.word	0x200013fc
 8000c5c:	08009034 	.word	0x08009034
 8000c60:	20000098 	.word	0x20000098
 8000c64:	08009068 	.word	0x08009068
 8000c68:	080090a8 	.word	0x080090a8
 8000c6c:	080090d0 	.word	0x080090d0
 8000c70:	08009108 	.word	0x08009108
 8000c74:	0800912c 	.word	0x0800912c
 8000c78:	200007a0 	.word	0x200007a0
 8000c7c:	08009168 	.word	0x08009168
 8000c80:	0800917c 	.word	0x0800917c
 8000c84:	08009190 	.word	0x08009190
 8000c88:	080091b8 	.word	0x080091b8
 8000c8c:	20001904 	.word	0x20001904

08000c90 <GetFreeSocket>:

int GetFreeSocket()
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2; i++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	e00a      	b.n	8000cb2 <GetFreeSocket+0x22>
	{
		if (sockState[i] == SOCKET_FREE)
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <GetFreeSocket+0x38>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <GetFreeSocket+0x1c>
		{
		  return i;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	e007      	b.n	8000cbc <GetFreeSocket+0x2c>
	for(int i = 0; i < 2; i++)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	ddf1      	ble.n	8000c9c <GetFreeSocket+0xc>
		}
	}
	return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	20000090 	.word	0x20000090

08000ccc <SetProductName>:
	return ret;
}


void SetProductName(char *name)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s=%s%s", AT_SYS_SET_PRODUCT_NAME, name, CMD_SUFFIX);
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SetProductName+0x24>)
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <SetProductName+0x28>)
 8000cdc:	4906      	ldr	r1, [pc, #24]	; (8000cf8 <SetProductName+0x2c>)
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <SetProductName+0x30>)
 8000ce0:	f007 f99c 	bl	800801c <siprintf>
	SendSPICommand();
 8000ce4:	f7ff fdde 	bl	80008a4 <SendSPICommand>
}
 8000ce8:	bf00      	nop
 8000cea:	3708      	adds	r7, #8
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	080091d0 	.word	0x080091d0
 8000cf4:	080091fc 	.word	0x080091fc
 8000cf8:	08009200 	.word	0x08009200
 8000cfc:	20000ffc 	.word	0x20000ffc

08000d00 <SetAPSSID>:

void SetAPSSID(char *ssid)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af02      	add	r7, sp, #8
 8000d06:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s=%s%s", AT_NET_SET_SSID, ssid, CMD_SUFFIX);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SetAPSSID+0x24>)
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <SetAPSSID+0x28>)
 8000d10:	4906      	ldr	r1, [pc, #24]	; (8000d2c <SetAPSSID+0x2c>)
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <SetAPSSID+0x30>)
 8000d14:	f007 f982 	bl	800801c <siprintf>
	SendSPICommand();
 8000d18:	f7ff fdc4 	bl	80008a4 <SendSPICommand>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080091d0 	.word	0x080091d0
 8000d28:	08009208 	.word	0x08009208
 8000d2c:	08009200 	.word	0x08009200
 8000d30:	20000ffc 	.word	0x20000ffc

08000d34 <NetworkDisconnect>:

void NetworkDisconnect()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	sprintf((char *)full_command, "%s%s", AT_NET_DISCONNECT, CMD_SUFFIX);
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <NetworkDisconnect+0x18>)
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <NetworkDisconnect+0x1c>)
 8000d3c:	4905      	ldr	r1, [pc, #20]	; (8000d54 <NetworkDisconnect+0x20>)
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <NetworkDisconnect+0x24>)
 8000d40:	f007 f96c 	bl	800801c <siprintf>
	SendSPICommand();
 8000d44:	f7ff fdae 	bl	80008a4 <SendSPICommand>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	080091d0 	.word	0x080091d0
 8000d50:	0800920c 	.word	0x0800920c
 8000d54:	080091d8 	.word	0x080091d8
 8000d58:	20000ffc 	.word	0x20000ffc

08000d5c <SetAPPassword>:

void SetAPPassword(char *pass)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af02      	add	r7, sp, #8
 8000d62:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s=%s%s", AT_NET_SET_PASSPHRASE, pass, CMD_SUFFIX);
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <SetAPPassword+0x24>)
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <SetAPPassword+0x28>)
 8000d6c:	4906      	ldr	r1, [pc, #24]	; (8000d88 <SetAPPassword+0x2c>)
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <SetAPPassword+0x30>)
 8000d70:	f007 f954 	bl	800801c <siprintf>
	SendSPICommand();
 8000d74:	f7ff fd96 	bl	80008a4 <SendSPICommand>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	080091d0 	.word	0x080091d0
 8000d84:	08009210 	.word	0x08009210
 8000d88:	08009200 	.word	0x08009200
 8000d8c:	20000ffc 	.word	0x20000ffc

08000d90 <SetAPSecurityMode>:

void SetAPSecurityMode(ES_WIFI_SecurityType_t mode)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	sprintf((char *)full_command, "%s=%d%s", AT_NET_SET_SECURITY_TYPE, mode, CMD_SUFFIX);
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SetAPSecurityMode+0x28>)
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <SetAPSecurityMode+0x2c>)
 8000da4:	4906      	ldr	r1, [pc, #24]	; (8000dc0 <SetAPSecurityMode+0x30>)
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <SetAPSecurityMode+0x34>)
 8000da8:	f007 f938 	bl	800801c <siprintf>
	SendSPICommand();
 8000dac:	f7ff fd7a 	bl	80008a4 <SendSPICommand>
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	080091d0 	.word	0x080091d0
 8000dbc:	08009214 	.word	0x08009214
 8000dc0:	08009218 	.word	0x08009218
 8000dc4:	20000ffc 	.word	0x20000ffc

08000dc8 <SetDHCPSetting>:

void SetDHCPSetting(ES_WIFI_IPType_t dhcp)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	sprintf((char *)full_command, "%s=%d%s", AT_NET_SET_DHCP, dhcp, CMD_SUFFIX);
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SetDHCPSetting+0x28>)
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	4a06      	ldr	r2, [pc, #24]	; (8000df4 <SetDHCPSetting+0x2c>)
 8000ddc:	4906      	ldr	r1, [pc, #24]	; (8000df8 <SetDHCPSetting+0x30>)
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <SetDHCPSetting+0x34>)
 8000de0:	f007 f91c 	bl	800801c <siprintf>
	SendSPICommand();
 8000de4:	f7ff fd5e 	bl	80008a4 <SendSPICommand>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	080091d0 	.word	0x080091d0
 8000df4:	08009220 	.word	0x08009220
 8000df8:	08009218 	.word	0x08009218
 8000dfc:	20000ffc 	.word	0x20000ffc

08000e00 <JoinNetwork>:

ES_WIFI_Status_t JoinNetwork()
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	sprintf((char *)full_command, "%s%s", AT_NET_JOIN, CMD_SUFFIX);
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <JoinNetwork+0x1c>)
 8000e06:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <JoinNetwork+0x20>)
 8000e08:	4906      	ldr	r1, [pc, #24]	; (8000e24 <JoinNetwork+0x24>)
 8000e0a:	4807      	ldr	r0, [pc, #28]	; (8000e28 <JoinNetwork+0x28>)
 8000e0c:	f007 f906 	bl	800801c <siprintf>
	return SendSPICommand();
 8000e10:	f7ff fd48 	bl	80008a4 <SendSPICommand>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	080091d0 	.word	0x080091d0
 8000e20:	08009224 	.word	0x08009224
 8000e24:	080091d8 	.word	0x080091d8
 8000e28:	20000ffc 	.word	0x20000ffc

08000e2c <SetSocket>:


void SetSocket(int socket)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_SOCKET, socket, CMD_SUFFIX);
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SetSocket+0x24>)
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <SetSocket+0x28>)
 8000e3c:	4906      	ldr	r1, [pc, #24]	; (8000e58 <SetSocket+0x2c>)
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <SetSocket+0x30>)
 8000e40:	f007 f8ec 	bl	800801c <siprintf>
	SendSPICommand();
 8000e44:	f7ff fd2e 	bl	80008a4 <SendSPICommand>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	080091d0 	.word	0x080091d0
 8000e54:	08009228 	.word	0x08009228
 8000e58:	08009218 	.word	0x08009218
 8000e5c:	20000ffc 	.word	0x20000ffc

08000e60 <SetProtocol>:

void SetProtocol(ES_WIFI_ConnType_t protocol)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]

	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_PROTOCOL, protocol, CMD_SUFFIX);
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SetProtocol+0x28>)
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <SetProtocol+0x2c>)
 8000e74:	4906      	ldr	r1, [pc, #24]	; (8000e90 <SetProtocol+0x30>)
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <SetProtocol+0x34>)
 8000e78:	f007 f8d0 	bl	800801c <siprintf>
	SendSPICommand();
 8000e7c:	f7ff fd12 	bl	80008a4 <SendSPICommand>
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	080091d0 	.word	0x080091d0
 8000e8c:	0800922c 	.word	0x0800922c
 8000e90:	08009218 	.word	0x08009218
 8000e94:	20000ffc 	.word	0x20000ffc

08000e98 <SetPort>:

void SetPort(int port)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s=%d%s", AT_TR_SET_LOCAL_PORT_NUMBER, port, CMD_SUFFIX);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SetPort+0x24>)
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <SetPort+0x28>)
 8000ea8:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <SetPort+0x2c>)
 8000eaa:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <SetPort+0x30>)
 8000eac:	f007 f8b6 	bl	800801c <siprintf>
	SendSPICommand();
 8000eb0:	f7ff fcf8 	bl	80008a4 <SendSPICommand>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	080091d0 	.word	0x080091d0
 8000ec0:	08009230 	.word	0x08009230
 8000ec4:	08009218 	.word	0x08009218
 8000ec8:	20000ffc 	.word	0x20000ffc

08000ecc <StartTCPComm>:

void StartTCPComm(int socket_id)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
//	SetSocket(socket_id);
	sprintf((char *)full_command, "%s=11%s", AT_TR_SERVER, CMD_SUFFIX);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <StartTCPComm+0x20>)
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <StartTCPComm+0x24>)
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <StartTCPComm+0x28>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <StartTCPComm+0x2c>)
 8000edc:	f007 f89e 	bl	800801c <siprintf>
	SendSPICommand();
 8000ee0:	f7ff fce0 	bl	80008a4 <SendSPICommand>

//	WaitForSocketConnection(socket_id);
//	CheckSocketConnection(socket_id);
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	080091d0 	.word	0x080091d0
 8000ef0:	08009234 	.word	0x08009234
 8000ef4:	08009238 	.word	0x08009238
 8000ef8:	20000ffc 	.word	0x20000ffc

08000efc <SetKeepAlive>:

SetKeepAlive(int value1, int ms)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
	sprintf((char *)full_command, "%s=%d,%d%s", AT_TR_TCP_KEEP_ALIVE, value1, ms, CMD_SUFFIX);
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <SetKeepAlive+0x2c>)
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <SetKeepAlive+0x30>)
 8000f12:	4907      	ldr	r1, [pc, #28]	; (8000f30 <SetKeepAlive+0x34>)
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <SetKeepAlive+0x38>)
 8000f16:	f007 f881 	bl	800801c <siprintf>
	SendSPICommand();
 8000f1a:	f7ff fcc3 	bl	80008a4 <SendSPICommand>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	080091d0 	.word	0x080091d0
 8000f2c:	08009240 	.word	0x08009240
 8000f30:	08009244 	.word	0x08009244
 8000f34:	20000ffc 	.word	0x20000ffc

08000f38 <SendResponse>:
	sprintf((char *)full_command, "%s=11%s", AT_TR_SERVER, CMD_SUFFIX);
	SendSPICommand();
}

void SendResponse(char *msg)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	6078      	str	r0, [r7, #4]
	int msgLen = strlen(msg);// + 3;
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff f96d 	bl	8000220 <strlen>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
//	printf("msg sent = %d\r\n", msgLen);
	sprintf((char *)full_command, "%s=%u%s", AT_WRITE_SET_PACKET_SIZE, msgLen, CMD_SUFFIX);
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <SendResponse+0x44>)
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <SendResponse+0x48>)
 8000f52:	490c      	ldr	r1, [pc, #48]	; (8000f84 <SendResponse+0x4c>)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <SendResponse+0x50>)
 8000f56:	f007 f861 	bl	800801c <siprintf>
	SendSPICommand();
 8000f5a:	f7ff fca3 	bl	80008a4 <SendSPICommand>

	sprintf((char *)full_command, "%s%s%s", AT_WRITE_DATA, CMD_SUFFIX, msg);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SendResponse+0x44>)
 8000f64:	4a09      	ldr	r2, [pc, #36]	; (8000f8c <SendResponse+0x54>)
 8000f66:	490a      	ldr	r1, [pc, #40]	; (8000f90 <SendResponse+0x58>)
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <SendResponse+0x50>)
 8000f6a:	f007 f857 	bl	800801c <siprintf>
	SendSPICommand();
 8000f6e:	f7ff fc99 	bl	80008a4 <SendSPICommand>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	080091d0 	.word	0x080091d0
 8000f80:	08009250 	.word	0x08009250
 8000f84:	08009254 	.word	0x08009254
 8000f88:	20000ffc 	.word	0x20000ffc
 8000f8c:	0800925c 	.word	0x0800925c
 8000f90:	08009260 	.word	0x08009260

08000f94 <ShowSettings>:

void ShowSettings(int socket_id)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	sprintf((char *)full_command, "%s%s", AT_TR_SHOW_SETTINGS, CMD_SUFFIX);
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <ShowSettings+0x20>)
 8000f9e:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <ShowSettings+0x24>)
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <ShowSettings+0x28>)
 8000fa2:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <ShowSettings+0x2c>)
 8000fa4:	f007 f83a 	bl	800801c <siprintf>
	SendSPICommand();
 8000fa8:	f7ff fc7c 	bl	80008a4 <SendSPICommand>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	080091d0 	.word	0x080091d0
 8000fb8:	08009268 	.word	0x08009268
 8000fbc:	080091d8 	.word	0x080091d8
 8000fc0:	20000ffc 	.word	0x20000ffc

08000fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc8:	f001 fc3e 	bl	8002848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fcc:	f000 f830 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd0:	f000 faa4 	bl	800151c <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd4:	f000 fa82 	bl	80014dc <MX_DMA_Init>
  MX_ADC1_Init();
 8000fd8:	f000 f8ba 	bl	8001150 <MX_ADC1_Init>
  MX_DAC_Init();
 8000fdc:	f000 f90a 	bl	80011f4 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000fe0:	f000 f932 	bl	8001248 <MX_DFSDM1_Init>
  MX_FMPI2C1_Init();
 8000fe4:	f000 f996 	bl	8001314 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000fe8:	f000 fcc4 	bl	8001974 <MX_FSMC_Init>
  MX_QUADSPI_Init();
 8000fec:	f000 f9c8 	bl	8001380 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000ff0:	f000 f9f2 	bl	80013d8 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8000ff4:	f000 fa48 	bl	8001488 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000ff8:	f006 fcb2 	bl	8007960 <MX_FATFS_Init>
  MX_SPI3_Init();
 8000ffc:	f000 fa0c 	bl	8001418 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2120      	movs	r1, #32
 8001004:	4808      	ldr	r0, [pc, #32]	; (8001028 <main+0x64>)
 8001006:	f003 f897 	bl	8004138 <HAL_GPIO_WritePin>
  InitWifi();
 800100a:	f000 fd65 	bl	8001ad8 <InitWifi>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(GetNetworkStatus() == WL_CONNECTED)
 800100e:	f7ff fb61 	bl	80006d4 <GetNetworkStatus>
 8001012:	4603      	mov	r3, r0
 8001014:	2b03      	cmp	r3, #3
 8001016:	d102      	bne.n	800101e <main+0x5a>
	  {
		  TCPServer();
 8001018:	f000 fd6a 	bl	8001af0 <TCPServer>
 800101c:	e7f7      	b.n	800100e <main+0x4a>
	  }
	  else
	  {
		  printf("not connected to network\r\n");
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <main+0x68>)
 8001020:	f006 ffe4 	bl	8007fec <puts>
	  if(GetNetworkStatus() == WL_CONNECTED)
 8001024:	e7f3      	b.n	800100e <main+0x4a>
 8001026:	bf00      	nop
 8001028:	40020800 	.word	0x40020800
 800102c:	080092d4 	.word	0x080092d4

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0aa      	sub	sp, #168	; 0xa8
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800103a:	2234      	movs	r2, #52	; 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f006 feaf 	bl	8007da2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2258      	movs	r2, #88	; 0x58
 800105a:	2100      	movs	r1, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f006 fea0 	bl	8007da2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <SystemClock_Config+0x118>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <SystemClock_Config+0x118>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b35      	ldr	r3, [pc, #212]	; (8001148 <SystemClock_Config+0x118>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <SystemClock_Config+0x11c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a31      	ldr	r2, [pc, #196]	; (800114c <SystemClock_Config+0x11c>)
 8001088:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <SystemClock_Config+0x11c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109a:	2302      	movs	r3, #2
 800109c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109e:	2301      	movs	r3, #1
 80010a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a4:	2310      	movs	r3, #16
 80010a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b6:	2308      	movs	r3, #8
 80010b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 96;
 80010bc:	2360      	movs	r3, #96	; 0x60
 80010be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c8:	2304      	movs	r3, #4
 80010ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fd61 	bl	8004ba0 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80010e4:	f000 fd1a 	bl	8001b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	230f      	movs	r3, #15
 80010ea:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2302      	movs	r3, #2
 80010ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001102:	2103      	movs	r1, #3
 8001104:	4618      	mov	r0, r3
 8001106:	f003 f8f3 	bl	80042f0 <HAL_RCC_ClockConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001110:	f000 fd04 	bl	8001b1c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_SDIO
 8001114:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001118:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800111a:	2300      	movs	r3, #0
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 800111e:	2300      	movs	r3, #0
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8001126:	2300      	movs	r3, #0
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	4618      	mov	r0, r3
 8001130:	f003 faaa 	bl	8004688 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800113a:	f000 fcef 	bl	8001b1c <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	37a8      	adds	r7, #168	; 0xa8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <MX_ADC1_Init+0x9c>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC1_Init+0x98>)
 800116a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800116e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <MX_ADC1_Init+0xa0>)
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_ADC1_Init+0x98>)
 800119e:	2201      	movs	r2, #1
 80011a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011b2:	f001 fbdd 	bl	8002970 <HAL_ADC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011bc:	f000 fcae 	bl	8001b1c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011c0:	230a      	movs	r3, #10
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011c4:	2301      	movs	r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC1_Init+0x98>)
 80011d2:	f001 fc11 	bl	80029f8 <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011dc:	f000 fc9e 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20004a88 	.word	0x20004a88
 80011ec:	40012000 	.word	0x40012000
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <MX_DAC_Init+0x4c>)
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_DAC_Init+0x50>)
 8001206:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_DAC_Init+0x4c>)
 800120a:	f001 ff34 	bl	8003076 <HAL_DAC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001214:	f000 fc82 	bl	8001b1c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <MX_DAC_Init+0x4c>)
 8001228:	f001 ff47 	bl	80030ba <HAL_DAC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001232:	f000 fc73 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20004b30 	.word	0x20004b30
 8001244:	40007400 	.word	0x40007400

08001248 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800124c:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 800124e:	4a2d      	ldr	r2, [pc, #180]	; (8001304 <MX_DFSDM1_Init+0xbc>)
 8001250:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 800125a:	2201      	movs	r2, #1
 800125c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800125e:	4b28      	ldr	r3, [pc, #160]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 8001260:	2201      	movs	r2, #1
 8001262:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 8001266:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800126a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 50;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 800126e:	2232      	movs	r2, #50	; 0x32
 8001270:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 8001274:	2201      	movs	r2, #1
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8001278:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 800127a:	f002 f85b 	bl	8003334 <HAL_DFSDM_FilterInit>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8001284:	f000 fc4a 	bl	8001b1c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001288:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 800128a:	4a20      	ldr	r2, [pc, #128]	; (800130c <MX_DFSDM1_Init+0xc4>)
 800128c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 8001290:	2201      	movs	r2, #1
 8001292:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 40;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 800129c:	2228      	movs	r2, #40	; 0x28
 800129e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012ba:	2204      	movs	r2, #4
 80012bc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x0;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80012d6:	480c      	ldr	r0, [pc, #48]	; (8001308 <MX_DFSDM1_Init+0xc0>)
 80012d8:	f001 ff3c 	bl	8003154 <HAL_DFSDM_ChannelInit>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80012e2:	f000 fc1b 	bl	8001b1c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80012e6:	2201      	movs	r2, #1
 80012e8:	4909      	ldr	r1, [pc, #36]	; (8001310 <MX_DFSDM1_Init+0xc8>)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_DFSDM1_Init+0xb8>)
 80012ec:	f002 f90e 	bl	800350c <HAL_DFSDM_FilterConfigRegChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f000 fc11 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20004988 	.word	0x20004988
 8001304:	40016100 	.word	0x40016100
 8001308:	20001920 	.word	0x20001920
 800130c:	40016020 	.word	0x40016020
 8001310:	00010002 	.word	0x00010002

08001314 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <MX_FMPI2C1_Init+0x64>)
 800131c:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x20303E5D;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <MX_FMPI2C1_Init+0x68>)
 8001322:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 800132c:	2201      	movs	r2, #1
 800132e:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001350:	f002 fc6e 	bl	8003c30 <HAL_FMPI2C_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800135a:	f000 fbdf 	bl	8001b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_FMPI2C1_Init+0x60>)
 8001362:	f002 fcf4 	bl	8003d4e <HAL_FMPI2CEx_ConfigAnalogFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 800136c:	f000 fbd6 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20004b44 	.word	0x20004b44
 8001378:	40006000 	.word	0x40006000
 800137c:	20303e5d 	.word	0x20303e5d

08001380 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_QUADSPI_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 800138c:	22ff      	movs	r2, #255	; 0xff
 800138e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 8001392:	2201      	movs	r2, #1
 8001394:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 800139e:	2201      	movs	r2, #1
 80013a0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_QUADSPI_Init+0x50>)
 80013bc:	f002 fed6 	bl	800416c <HAL_QSPI_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80013c6:	f000 fba9 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200064dc 	.word	0x200064dc
 80013d4:	a0001000 	.word	0xa0001000

080013d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013de:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <MX_SDIO_SD_Init+0x3c>)
 80013e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <MX_SDIO_SD_Init+0x38>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	20004be0 	.word	0x20004be0
 8001414:	40012c00 	.word	0x40012c00

08001418 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_SPI3_Init+0x68>)
 800141e:	4a19      	ldr	r2, [pc, #100]	; (8001484 <MX_SPI3_Init+0x6c>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_SPI3_Init+0x68>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_SPI3_Init+0x68>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_SPI3_Init+0x68>)
 8001432:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001436:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_SPI3_Init+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_SPI3_Init+0x68>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001444:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <MX_SPI3_Init+0x68>)
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <MX_SPI3_Init+0x68>)
 800144e:	2220      	movs	r2, #32
 8001450:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <MX_SPI3_Init+0x68>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <MX_SPI3_Init+0x68>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <MX_SPI3_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001464:	4b06      	ldr	r3, [pc, #24]	; (8001480 <MX_SPI3_Init+0x68>)
 8001466:	220a      	movs	r2, #10
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_SPI3_Init+0x68>)
 800146c:	f004 fd76 	bl	8005f5c <HAL_SPI_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001476:	f000 fb51 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20004a30 	.word	0x20004a30
 8001484:	40003c00 	.word	0x40003c00

08001488 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART6_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART6_UART_Init+0x4c>)
 80014c0:	f005 f842 	bl	8006548 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 fb27 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20004c64 	.word	0x20004c64
 80014d8:	40011400 	.word	0x40011400

080014dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_DMA_Init+0x3c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <MX_DMA_Init+0x3c>)
 80014ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_DMA_Init+0x3c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2038      	movs	r0, #56	; 0x38
 8001504:	f001 fd81 	bl	800300a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001508:	2038      	movs	r0, #56	; 0x38
 800150a:	f001 fd9a 	bl	8003042 <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08e      	sub	sp, #56	; 0x38
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	4bb0      	ldr	r3, [pc, #704]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4aaf      	ldr	r2, [pc, #700]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 800153c:	f043 0310 	orr.w	r3, r3, #16
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4bad      	ldr	r3, [pc, #692]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	623b      	str	r3, [r7, #32]
 800154c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	4ba9      	ldr	r3, [pc, #676]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4aa8      	ldr	r2, [pc, #672]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4ba6      	ldr	r3, [pc, #664]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	4ba2      	ldr	r3, [pc, #648]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4aa1      	ldr	r2, [pc, #644]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001574:	f043 0320 	orr.w	r3, r3, #32
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b9f      	ldr	r3, [pc, #636]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0320 	and.w	r3, r3, #32
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	4b9b      	ldr	r3, [pc, #620]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a9a      	ldr	r2, [pc, #616]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b98      	ldr	r3, [pc, #608]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b94      	ldr	r3, [pc, #592]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a93      	ldr	r2, [pc, #588]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b8d      	ldr	r3, [pc, #564]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a8c      	ldr	r2, [pc, #560]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b86      	ldr	r3, [pc, #536]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a85      	ldr	r2, [pc, #532]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b83      	ldr	r3, [pc, #524]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b7f      	ldr	r3, [pc, #508]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a7e      	ldr	r2, [pc, #504]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b7c      	ldr	r3, [pc, #496]	; (80017f8 <MX_GPIO_Init+0x2dc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2138      	movs	r1, #56	; 0x38
 8001616:	4879      	ldr	r0, [pc, #484]	; (80017fc <MX_GPIO_Init+0x2e0>)
 8001618:	f002 fd8e 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2120      	movs	r1, #32
 8001620:	4877      	ldr	r0, [pc, #476]	; (8001800 <MX_GPIO_Init+0x2e4>)
 8001622:	f002 fd89 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800162c:	4875      	ldr	r0, [pc, #468]	; (8001804 <MX_GPIO_Init+0x2e8>)
 800162e:	f002 fd83 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5124 	mov.w	r1, #10496	; 0x2900
 8001638:	4873      	ldr	r0, [pc, #460]	; (8001808 <MX_GPIO_Init+0x2ec>)
 800163a:	f002 fd7d 	bl	8004138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 800163e:	2338      	movs	r3, #56	; 0x38
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4869      	ldr	r0, [pc, #420]	; (80017fc <MX_GPIO_Init+0x2e0>)
 8001656:	f002 fbc5 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800165a:	2340      	movs	r3, #64	; 0x40
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800166a:	2303      	movs	r3, #3
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800166e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001672:	4619      	mov	r1, r3
 8001674:	4861      	ldr	r0, [pc, #388]	; (80017fc <MX_GPIO_Init+0x2e0>)
 8001676:	f002 fbb5 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800167a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800168c:	2302      	movs	r3, #2
 800168e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001694:	4619      	mov	r1, r3
 8001696:	485d      	ldr	r0, [pc, #372]	; (800180c <MX_GPIO_Init+0x2f0>)
 8001698:	f002 fba4 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800169c:	2302      	movs	r3, #2
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a0:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <MX_GPIO_Init+0x2f4>)
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4854      	ldr	r0, [pc, #336]	; (8001800 <MX_GPIO_Init+0x2e4>)
 80016b0:	f002 fb98 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_ext_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80016b4:	2304      	movs	r3, #4
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80016c4:	2306      	movs	r3, #6
 80016c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	484c      	ldr	r0, [pc, #304]	; (8001800 <MX_GPIO_Init+0x2e4>)
 80016d0:	f002 fb88 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_SD_Pin */
  GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80016d4:	2308      	movs	r3, #8
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e4:	2305      	movs	r3, #5
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4844      	ldr	r0, [pc, #272]	; (8001800 <MX_GPIO_Init+0x2e4>)
 80016f0:	f002 fb78 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 80016f4:	2301      	movs	r3, #1
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b45      	ldr	r3, [pc, #276]	; (8001810 <MX_GPIO_Init+0x2f4>)
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001704:	4619      	mov	r1, r3
 8001706:	4843      	ldr	r0, [pc, #268]	; (8001814 <MX_GPIO_Init+0x2f8>)
 8001708:	f002 fb6c 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_MCK_Pin */
  GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800170c:	2308      	movs	r3, #8
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171c:	2305      	movs	r3, #5
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	483b      	ldr	r0, [pc, #236]	; (8001814 <MX_GPIO_Init+0x2f8>)
 8001728:	f002 fb5c 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800173c:	2307      	movs	r3, #7
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4833      	ldr	r0, [pc, #204]	; (8001814 <MX_GPIO_Init+0x2f8>)
 8001748:	f002 fb4c 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 800174c:	2320      	movs	r3, #32
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001750:	2301      	movs	r3, #1
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001760:	4619      	mov	r1, r3
 8001762:	4827      	ldr	r0, [pc, #156]	; (8001800 <MX_GPIO_Init+0x2e4>)
 8001764:	f002 fb3e 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001778:	2302      	movs	r3, #2
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	4820      	ldr	r0, [pc, #128]	; (8001804 <MX_GPIO_Init+0x2e8>)
 8001784:	f002 fb2e 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <MX_GPIO_Init+0x2f0>)
 800179e:	f002 fb21 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80017a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a8:	2312      	movs	r3, #18
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b4:	2304      	movs	r3, #4
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_GPIO_Init+0x2e8>)
 80017c0:	f002 fb10 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 80017c4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017da:	4619      	mov	r1, r3
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <MX_GPIO_Init+0x2e8>)
 80017de:	f002 fb01 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 80017e2:	f248 0380 	movw	r3, #32896	; 0x8080
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_GPIO_Init+0x2f4>)
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f4:	4619      	mov	r1, r3
 80017f6:	e00f      	b.n	8001818 <MX_GPIO_Init+0x2fc>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40021000 	.word	0x40021000
 8001800:	40020800 	.word	0x40020800
 8001804:	40020400 	.word	0x40020400
 8001808:	40021800 	.word	0x40021800
 800180c:	40021400 	.word	0x40021400
 8001810:	10110000 	.word	0x10110000
 8001814:	40020000 	.word	0x40020000
 8001818:	4851      	ldr	r0, [pc, #324]	; (8001960 <MX_GPIO_Init+0x444>)
 800181a:	f002 fae3 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin WIFI_SPI_CSN_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|WIFI_SPI_CSN_Pin|ARD_D2_Pin;
 800181e:	f44f 5324 	mov.w	r3, #10496	; 0x2900
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	484a      	ldr	r0, [pc, #296]	; (8001960 <MX_GPIO_Init+0x444>)
 8001838:	f002 fad4 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800183c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184a:	2303      	movs	r3, #3
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800184e:	230a      	movs	r3, #10
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001856:	4619      	mov	r1, r3
 8001858:	4842      	ldr	r0, [pc, #264]	; (8001964 <MX_GPIO_Init+0x448>)
 800185a:	f002 fac3 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 800185e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001870:	2301      	movs	r3, #1
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001878:	4619      	mov	r1, r3
 800187a:	483a      	ldr	r0, [pc, #232]	; (8001964 <MX_GPIO_Init+0x448>)
 800187c:	f002 fab2 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001880:	2304      	movs	r3, #4
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001890:	2303      	movs	r3, #3
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	4833      	ldr	r0, [pc, #204]	; (8001968 <MX_GPIO_Init+0x44c>)
 800189c:	f002 faa2 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_CK_Pin */
  GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80018a0:	2308      	movs	r3, #8
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	2305      	movs	r3, #5
 80018b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	4619      	mov	r1, r3
 80018ba:	482b      	ldr	r0, [pc, #172]	; (8001968 <MX_GPIO_Init+0x44c>)
 80018bc:	f002 fa92 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_DRDY_Pin */
  GPIO_InitStruct.Pin = WIFI_DRDY_Pin;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(WIFI_DRDY_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4822      	ldr	r0, [pc, #136]	; (8001960 <MX_GPIO_Init+0x444>)
 80018d6:	f002 fa85 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018de:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_GPIO_Init+0x450>)
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ea:	4619      	mov	r1, r3
 80018ec:	4820      	ldr	r0, [pc, #128]	; (8001970 <MX_GPIO_Init+0x454>)
 80018ee:	f002 fa79 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM2_DATIN7_Pin */
  GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001902:	2306      	movs	r3, #6
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190a:	4619      	mov	r1, r3
 800190c:	4818      	ldr	r0, [pc, #96]	; (8001970 <MX_GPIO_Init+0x454>)
 800190e:	f002 fa69 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001924:	2302      	movs	r3, #2
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192c:	4619      	mov	r1, r3
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <MX_GPIO_Init+0x454>)
 8001930:	f002 fa58 	bl	8003de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CODEC_WS_Pin */
  GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001946:	2305      	movs	r3, #5
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <MX_GPIO_Init+0x454>)
 8001952:	f002 fa47 	bl	8003de4 <HAL_GPIO_Init>

}
 8001956:	bf00      	nop
 8001958:	3738      	adds	r7, #56	; 0x38
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021800 	.word	0x40021800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020c00 	.word	0x40020c00
 800196c:	10110000 	.word	0x10110000
 8001970:	40020400 	.word	0x40020400

08001974 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]
 800198a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800198c:	4b4f      	ldr	r3, [pc, #316]	; (8001acc <MX_FSMC_Init+0x158>)
 800198e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001992:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <MX_FSMC_Init+0x158>)
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <MX_FSMC_Init+0x15c>)
 8001998:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800199a:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <MX_FSMC_Init+0x158>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <MX_FSMC_Init+0x158>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <MX_FSMC_Init+0x158>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <MX_FSMC_Init+0x158>)
 80019ae:	2210      	movs	r2, #16
 80019b0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <MX_FSMC_Init+0x158>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80019b8:	4b44      	ldr	r3, [pc, #272]	; (8001acc <MX_FSMC_Init+0x158>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80019be:	4b43      	ldr	r3, [pc, #268]	; (8001acc <MX_FSMC_Init+0x158>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 80019c4:	4b41      	ldr	r3, [pc, #260]	; (8001acc <MX_FSMC_Init+0x158>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80019ca:	4b40      	ldr	r3, [pc, #256]	; (8001acc <MX_FSMC_Init+0x158>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80019d0:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <MX_FSMC_Init+0x158>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80019d6:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <MX_FSMC_Init+0x158>)
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <MX_FSMC_Init+0x158>)
 80019de:	2200      	movs	r2, #0
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <MX_FSMC_Init+0x158>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <MX_FSMC_Init+0x158>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80019ee:	4b37      	ldr	r3, [pc, #220]	; (8001acc <MX_FSMC_Init+0x158>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80019f4:	230f      	movs	r3, #15
 80019f6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80019f8:	230f      	movs	r3, #15
 80019fa:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80019fc:	23ff      	movs	r3, #255	; 0xff
 80019fe:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001a00:	230f      	movs	r3, #15
 8001a02:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001a04:	2310      	movs	r3, #16
 8001a06:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001a08:	2311      	movs	r3, #17
 8001a0a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2200      	movs	r2, #0
 8001a14:	4619      	mov	r1, r3
 8001a16:	482d      	ldr	r0, [pc, #180]	; (8001acc <MX_FSMC_Init+0x158>)
 8001a18:	f004 fd52 	bl	80064c0 <HAL_SRAM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_FSMC_Init+0xb2>
  {
    Error_Handler( );
 8001a22:	f000 f87b 	bl	8001b1c <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001a26:	4b2b      	ldr	r3, [pc, #172]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a28:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001a2c:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <MX_FSMC_Init+0x15c>)
 8001a32:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001a34:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a36:	2204      	movs	r2, #4
 8001a38:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a48:	2210      	movs	r2, #16
 8001a4a:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001a90:	230f      	movs	r3, #15
 8001a92:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001a94:	230f      	movs	r3, #15
 8001a96:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001a98:	23ff      	movs	r3, #255	; 0xff
 8001a9a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001aa4:	2311      	movs	r3, #17
 8001aa6:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <MX_FSMC_Init+0x160>)
 8001ab4:	f004 fd04 	bl	80064c0 <HAL_SRAM_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_FSMC_Init+0x14e>
  {
    Error_Handler( );
 8001abe:	f000 f82d 	bl	8001b1c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3720      	adds	r7, #32
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200049e0 	.word	0x200049e0
 8001ad0:	a0000104 	.word	0xa0000104
 8001ad4:	20004b90 	.word	0x20004b90

08001ad8 <InitWifi>:
	pass++;

}

void InitWifi()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	ConnectWifi(&hspi3);
 8001adc:	4803      	ldr	r0, [pc, #12]	; (8001aec <InitWifi+0x14>)
 8001ade:	f7fe fd77 	bl	80005d0 <ConnectWifi>
	Wifi_Init();
 8001ae2:	f000 fe19 	bl	8002718 <Wifi_Init>


//	SetSSID();
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20004a30 	.word	0x20004a30

08001af0 <TCPServer>:

void TCPServer()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	int sockets = 2;
 8001af6:	2302      	movs	r3, #2
 8001af8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < sockets; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	e005      	b.n	8001b0c <TCPServer+0x1c>
	{
		ProcessSocket(i);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fe41 	bl	8002788 <ProcessSocket>
	for(int i = 0; i < sockets; i++)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	dbf5      	blt.n	8001b00 <TCPServer+0x10>
	}
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a31      	ldr	r2, [pc, #196]	; (8001c60 <HAL_ADC_MspInit+0xe4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d15b      	bne.n	8001c56 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6453      	str	r3, [r2, #68]	; 0x44
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <HAL_ADC_MspInit+0xe8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001c0e:	2311      	movs	r3, #17
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <HAL_ADC_MspInit+0xec>)
 8001c22:	f002 f8df 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8001c26:	2326      	movs	r3, #38	; 0x26
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <HAL_ADC_MspInit+0xf0>)
 8001c3a:	f002 f8d3 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4807      	ldr	r0, [pc, #28]	; (8001c70 <HAL_ADC_MspInit+0xf4>)
 8001c52:	f002 f8c7 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012000 	.word	0x40012000
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020000 	.word	0x40020000
 8001c70:	40020400 	.word	0x40020400

08001c74 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_DAC_MspInit+0x7c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d127      	bne.n	8001ce6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001ca0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_DAC_MspInit+0x80>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 0314 	add.w	r3, r7, #20
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <HAL_DAC_MspInit+0x84>)
 8001ce2:	f002 f87f 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40007400 	.word	0x40007400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020000 	.word	0x40020000

08001cfc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_FILTER_INSTANCE(hdfsdm_filter->Instance))&&(DFSDM1_Init == 0))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_DFSDM_FilterMspInit+0x168>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_DFSDM_FilterMspInit+0x2c>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <HAL_DFSDM_FilterMspInit+0x16c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d15c      	bne.n	8001de2 <HAL_DFSDM_FilterMspInit+0xe6>
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_DFSDM_FilterMspInit+0x170>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d158      	bne.n	8001de2 <HAL_DFSDM_FilterMspInit+0xe6>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001d30:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_DFSDM_FilterMspInit+0x174>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	4a4e      	ldr	r2, [pc, #312]	; (8001e70 <HAL_DFSDM_FilterMspInit+0x174>)
 8001d38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	; (8001e70 <HAL_DFSDM_FilterMspInit+0x174>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10d      	bne.n	8001d5e <HAL_DFSDM_FilterMspInit+0x62>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a4a      	ldr	r2, [pc, #296]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b48      	ldr	r3, [pc, #288]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a43      	ldr	r2, [pc, #268]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a3c      	ldr	r2, [pc, #240]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <HAL_DFSDM_FilterMspInit+0x178>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001da8:	2306      	movs	r3, #6
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4831      	ldr	r0, [pc, #196]	; (8001e78 <HAL_DFSDM_FilterMspInit+0x17c>)
 8001db4:	f002 f816 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001db8:	2340      	movs	r3, #64	; 0x40
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001dc8:	2306      	movs	r3, #6
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	482a      	ldr	r0, [pc, #168]	; (8001e7c <HAL_DFSDM_FilterMspInit+0x180>)
 8001dd4:	f002 f806 	bl	8003de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_DFSDM_FilterMspInit+0x170>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_DFSDM_FilterMspInit+0x170>)
 8001de0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <HAL_DFSDM_FilterMspInit+0x168>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d137      	bne.n	8001e5c <HAL_DFSDM_FilterMspInit+0x160>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_DFSDM_FilterMspInit+0x188>)
 8001df0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_7;
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001df4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001df8:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e24:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e2c:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001e34:	4812      	ldr	r0, [pc, #72]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e36:	f001 fc13 	bl	8003660 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_DFSDM_FilterMspInit+0x148>
    {
      Error_Handler();
 8001e40:	f7ff fe6c 	bl	8001b1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_DFSDM_FilterMspInit+0x184>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40016100 	.word	0x40016100
 8001e68:	40016180 	.word	0x40016180
 8001e6c:	20000fa4 	.word	0x20000fa4
 8001e70:	20000fa0 	.word	0x20000fa0
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020c00 	.word	0x40020c00
 8001e80:	20004ad0 	.word	0x20004ad0
 8001e84:	40026410 	.word	0x40026410

08001e88 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <HAL_DFSDM_ChannelMspInit+0x104>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00e      	beq.n	8001ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a38      	ldr	r2, [pc, #224]	; (8001f90 <HAL_DFSDM_ChannelMspInit+0x108>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d009      	beq.n	8001ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a36      	ldr	r2, [pc, #216]	; (8001f94 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DFSDM_ChannelMspInit+0x40>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a35      	ldr	r2, [pc, #212]	; (8001f98 <HAL_DFSDM_ChannelMspInit+0x110>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d15c      	bne.n	8001f82 <HAL_DFSDM_ChannelMspInit+0xfa>
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d158      	bne.n	8001f82 <HAL_DFSDM_ChannelMspInit+0xfa>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001ed0:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001ed8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_DFSDM_ChannelMspInit+0x118>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10d      	bne.n	8001efe <HAL_DFSDM_ChannelMspInit+0x76>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	4a2e      	ldr	r2, [pc, #184]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	4a27      	ldr	r2, [pc, #156]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	4a20      	ldr	r2, [pc, #128]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f24:	f043 0308 	orr.w	r3, r3, #8
 8001f28:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <HAL_DFSDM_ChannelMspInit+0x11c>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f48:	2306      	movs	r3, #6
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <HAL_DFSDM_ChannelMspInit+0x120>)
 8001f54:	f001 ff46 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001f58:	2340      	movs	r3, #64	; 0x40
 8001f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f68:	2306      	movs	r3, #6
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	; (8001fac <HAL_DFSDM_ChannelMspInit+0x124>)
 8001f74:	f001 ff36 	bl	8003de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <HAL_DFSDM_ChannelMspInit+0x114>)
 8001f80:	6013      	str	r3, [r2, #0]
  }

}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40016000 	.word	0x40016000
 8001f90:	40016020 	.word	0x40016020
 8001f94:	40016040 	.word	0x40016040
 8001f98:	40016060 	.word	0x40016060
 8001f9c:	20000fa4 	.word	0x20000fa4
 8001fa0:	20000fa0 	.word	0x20000fa0
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020c00 	.word	0x40020c00

08001fb0 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a19      	ldr	r2, [pc, #100]	; (8002034 <HAL_FMPI2C_MspInit+0x84>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d12b      	bne.n	800202a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001fee:	23c0      	movs	r3, #192	; 0xc0
 8001ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff2:	2312      	movs	r3, #18
 8001ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001ffe:	2304      	movs	r3, #4
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <HAL_FMPI2C_MspInit+0x8c>)
 800200a:	f001 feeb 	bl	8003de4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8002018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800201c:	6413      	str	r3, [r2, #64]	; 0x40
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_FMPI2C_MspInit+0x88>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	; 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40006000 	.word	0x40006000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800

08002040 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08e      	sub	sp, #56	; 0x38
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a56      	ldr	r2, [pc, #344]	; (80021b8 <HAL_QSPI_MspInit+0x178>)
 800205e:	4293      	cmp	r3, r2
 8002060:	f040 80a6 	bne.w	80021b0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
 8002068:	4b54      	ldr	r3, [pc, #336]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	6393      	str	r3, [r2, #56]	; 0x38
 8002074:	4b51      	ldr	r3, [pc, #324]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	623b      	str	r3, [r7, #32]
 800207e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	6313      	str	r3, [r2, #48]	; 0x30
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	61fb      	str	r3, [r7, #28]
 800209a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a45      	ldr	r2, [pc, #276]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	61bb      	str	r3, [r7, #24]
 80020b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	4b3f      	ldr	r3, [pc, #252]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4a3e      	ldr	r2, [pc, #248]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	6313      	str	r3, [r2, #48]	; 0x30
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	4a37      	ldr	r2, [pc, #220]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6313      	str	r3, [r2, #48]	; 0x30
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a30      	ldr	r2, [pc, #192]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 80020fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_QSPI_MspInit+0x17c>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800210c:	2304      	movs	r3, #4
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800211c:	2309      	movs	r3, #9
 800211e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4826      	ldr	r0, [pc, #152]	; (80021c0 <HAL_QSPI_MspInit+0x180>)
 8002128:	f001 fe5c 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800212c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213a:	2303      	movs	r3, #3
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800213e:	230a      	movs	r3, #10
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <HAL_QSPI_MspInit+0x184>)
 800214a:	f001 fe4b 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800214e:	2304      	movs	r3, #4
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215a:	2303      	movs	r3, #3
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800215e:	2309      	movs	r3, #9
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	4817      	ldr	r0, [pc, #92]	; (80021c8 <HAL_QSPI_MspInit+0x188>)
 800216a:	f001 fe3b 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800216e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8002180:	2309      	movs	r3, #9
 8002182:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	4619      	mov	r1, r3
 800218a:	4810      	ldr	r0, [pc, #64]	; (80021cc <HAL_QSPI_MspInit+0x18c>)
 800218c:	f001 fe2a 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021a0:	230a      	movs	r3, #10
 80021a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <HAL_QSPI_MspInit+0x190>)
 80021ac:	f001 fe1a 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	a0001000 	.word	0xa0001000
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40021400 	.word	0x40021400
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021800 	.word	0x40021800

080021d4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_SD_MspInit+0xe4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d15b      	bne.n	80022ae <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_SD_MspInit+0xe8>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_SD_MspInit+0xe8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a21      	ldr	r2, [pc, #132]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <HAL_SD_MspInit+0xe8>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 800224a:	2340      	movs	r3, #64	; 0x40
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002256:	2303      	movs	r3, #3
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800225a:	230c      	movs	r3, #12
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4816      	ldr	r0, [pc, #88]	; (80022c0 <HAL_SD_MspInit+0xec>)
 8002266:	f001 fdbd 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin;
 800226a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002278:	2303      	movs	r3, #3
 800227a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800227c:	230c      	movs	r3, #12
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	4619      	mov	r1, r3
 8002286:	480f      	ldr	r0, [pc, #60]	; (80022c4 <HAL_SD_MspInit+0xf0>)
 8002288:	f001 fdac 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_CLK_Pin;
 800228c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002296:	2301      	movs	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800229e:	230c      	movs	r3, #12
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CLK_GPIO_Port, &GPIO_InitStruct);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4806      	ldr	r0, [pc, #24]	; (80022c4 <HAL_SD_MspInit+0xf0>)
 80022aa:	f001 fd9b 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	; 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40012c00 	.word	0x40012c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020000 	.word	0x40020000
 80022c4:	40020800 	.word	0x40020800

080022c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_SPI_MspInit+0xa4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d13c      	bne.n	8002364 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 80022f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f8:	6413      	str	r3, [r2, #64]	; 0x40
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a18      	ldr	r2, [pc, #96]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_SPI_MspInit+0xa8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB12     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin;
 8002322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002334:	2307      	movs	r3, #7
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <HAL_SPI_MspInit+0xac>)
 8002340:	f001 fd50 	bl	8003de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002344:	2330      	movs	r3, #48	; 0x30
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002354:	2306      	movs	r3, #6
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <HAL_SPI_MspInit+0xac>)
 8002360:	f001 fd40 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	; 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40003c00 	.word	0x40003c00
 8002370:	40023800 	.word	0x40023800
 8002374:	40020400 	.word	0x40020400

08002378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_UART_MspInit+0x84>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d12c      	bne.n	80023f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023a4:	f043 0320 	orr.w	r3, r3, #32
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0320 	and.w	r3, r3, #32
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a10      	ldr	r2, [pc, #64]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_UART_MspInit+0x88>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PG9     ------> USART6_RX
    PG14     ------> USART6_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80023d2:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e0:	2303      	movs	r3, #3
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80023e4:	2308      	movs	r3, #8
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <HAL_UART_MspInit+0x8c>)
 80023f0:	f001 fcf8 	bl	8003de4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3728      	adds	r7, #40	; 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40011400 	.word	0x40011400
 8002400:	40023800 	.word	0x40023800
 8002404:	40021800 	.word	0x40021800

08002408 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800241c:	4b2c      	ldr	r3, [pc, #176]	; (80024d0 <HAL_FSMC_MspInit+0xc8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d151      	bne.n	80024c8 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002424:	4b2a      	ldr	r3, [pc, #168]	; (80024d0 <HAL_FSMC_MspInit+0xc8>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <HAL_FSMC_MspInit+0xcc>)
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_FSMC_MspInit+0xcc>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6393      	str	r3, [r2, #56]	; 0x38
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_FSMC_MspInit+0xcc>)
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8002446:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800244a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002454:	2303      	movs	r3, #3
 8002456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002458:	230c      	movs	r3, #12
 800245a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4619      	mov	r1, r3
 8002460:	481d      	ldr	r0, [pc, #116]	; (80024d8 <HAL_FSMC_MspInit+0xd0>)
 8002462:	f001 fcbf 	bl	8003de4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8002466:	f240 433f 	movw	r3, #1087	; 0x43f
 800246a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246c:	2302      	movs	r3, #2
 800246e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002478:	230c      	movs	r3, #12
 800247a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	4619      	mov	r1, r3
 8002480:	4816      	ldr	r0, [pc, #88]	; (80024dc <HAL_FSMC_MspInit+0xd4>)
 8002482:	f001 fcaf 	bl	8003de4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8002486:	f64f 7383 	movw	r3, #65411	; 0xff83
 800248a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002498:	230c      	movs	r3, #12
 800249a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <HAL_FSMC_MspInit+0xd8>)
 80024a2:	f001 fc9f 	bl	8003de4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80024a6:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80024aa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2303      	movs	r3, #3
 80024b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80024b8:	230c      	movs	r3, #12
 80024ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4808      	ldr	r0, [pc, #32]	; (80024e4 <HAL_FSMC_MspInit+0xdc>)
 80024c2:	f001 fc8f 	bl	8003de4 <HAL_GPIO_Init>
 80024c6:	e000      	b.n	80024ca <HAL_FSMC_MspInit+0xc2>
    return;
 80024c8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000fa8 	.word	0x20000fa8
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40020c00 	.word	0x40020c00

080024e8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80024f0:	f7ff ff8a 	bl	8002408 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250e:	e7fe      	b.n	800250e <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	e7fe      	b.n	8002514 <MemManage_Handler+0x4>

08002516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251a:	e7fe      	b.n	800251a <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	e7fe      	b.n	8002520 <UsageFault_Handler+0x4>

08002522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002550:	f000 f9cc 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}

08002558 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800255c:	4802      	ldr	r0, [pc, #8]	; (8002568 <DMA2_Stream0_IRQHandler+0x10>)
 800255e:	f001 f92d 	bl	80037bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20004ad0 	.word	0x20004ad0

0800256c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002578:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002584:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002588:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800258c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002594:	e000      	b.n	8002598 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002596:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002598:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f9      	beq.n	8002596 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80025a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80025ac:	687b      	ldr	r3, [r7, #4]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e00a      	b.n	80025e2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025cc:	f3af 8000 	nop.w
 80025d0:	4601      	mov	r1, r0
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	60ba      	str	r2, [r7, #8]
 80025d8:	b2ca      	uxtb	r2, r1
 80025da:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	dbf0      	blt.n	80025cc <_read+0x12>
	}

return len;
 80025ea:	687b      	ldr	r3, [r7, #4]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
		for(int i = 0; i < len; i++){
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e009      	b.n	800261a <_write+0x26>
			ITM_SendChar(*ptr++);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	60ba      	str	r2, [r7, #8]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ffac 	bl	800256c <ITM_SendChar>
		for(int i = 0; i < len; i++){
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	429a      	cmp	r2, r3
 8002620:	dbf1      	blt.n	8002606 <_write+0x12>
		}
		return len;
 8002622:	687b      	ldr	r3, [r7, #4]

	//	errno = ENOSYS;
	//	return -1;
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <_close>:

int _close(int file)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002654:	605a      	str	r2, [r3, #4]
	return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_isatty>:

int _isatty(int file)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800267a:	b480      	push	{r7}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
	return 0;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <_sbrk+0x50>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x16>
		heap_end = &end;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <_sbrk+0x50>)
 80026a6:	4a10      	ldr	r2, [pc, #64]	; (80026e8 <_sbrk+0x54>)
 80026a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <_sbrk+0x50>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <_sbrk+0x50>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4413      	add	r3, r2
 80026b8:	466a      	mov	r2, sp
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d907      	bls.n	80026ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80026be:	f005 fb3b 	bl	8007d38 <__errno>
 80026c2:	4602      	mov	r2, r0
 80026c4:	230c      	movs	r3, #12
 80026c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
 80026cc:	e006      	b.n	80026dc <_sbrk+0x48>
	}

	heap_end += incr;
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <_sbrk+0x50>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a03      	ldr	r2, [pc, #12]	; (80026e4 <_sbrk+0x50>)
 80026d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000fac 	.word	0x20000fac
 80026e8:	200085a0 	.word	0x200085a0

080026ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f0:	4b08      	ldr	r3, [pc, #32]	; (8002714 <SystemInit+0x28>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	4a07      	ldr	r2, [pc, #28]	; (8002714 <SystemInit+0x28>)
 80026f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <SystemInit+0x28>)
 8002702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002706:	609a      	str	r2, [r3, #8]
#endif
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <Wifi_Init>:
#include "main.h"
#include <stdbool.h>
#include "inventek_43362.h"

void Wifi_Init()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	WifiStartup();
 800271c:	f7fd ff82 	bl	8000624 <WifiStartup>
	if(StartJoinNetwork("DevinsHotWifi", "RickAndMorty123") == ES_WIFI_STATUS_OK)
 8002720:	4908      	ldr	r1, [pc, #32]	; (8002744 <Wifi_Init+0x2c>)
 8002722:	4809      	ldr	r0, [pc, #36]	; (8002748 <Wifi_Init+0x30>)
 8002724:	f000 f812 	bl	800274c <StartJoinNetwork>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <Wifi_Init+0x24>
	{
		SetNetworkStatus(WL_CONNECTED);
 800272e:	2003      	movs	r0, #3
 8002730:	f7fd ffc0 	bl	80006b4 <SetNetworkStatus>
		//	StartMQTT();

		StartTCP(80);
 8002734:	2050      	movs	r0, #80	; 0x50
 8002736:	f000 f838 	bl	80027aa <StartTCP>
	else
	{
		NetworkDisconnect();
	}

}
 800273a:	e001      	b.n	8002740 <Wifi_Init+0x28>
		NetworkDisconnect();
 800273c:	f7fe fafa 	bl	8000d34 <NetworkDisconnect>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	080092f0 	.word	0x080092f0
 8002748:	08009300 	.word	0x08009300

0800274c <StartJoinNetwork>:


ES_WIFI_Status_t StartJoinNetwork(char *ssid, char *pw)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	SetProductName("devin_test_simple");
 8002756:	480b      	ldr	r0, [pc, #44]	; (8002784 <StartJoinNetwork+0x38>)
 8002758:	f7fe fab8 	bl	8000ccc <SetProductName>
	SetAPSSID(ssid);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe facf 	bl	8000d00 <SetAPSSID>
	SetAPPassword(pw);
 8002762:	6838      	ldr	r0, [r7, #0]
 8002764:	f7fe fafa 	bl	8000d5c <SetAPPassword>
	SetAPSecurityMode(ES_WIFI_SEC_WPA2);
 8002768:	2003      	movs	r0, #3
 800276a:	f7fe fb11 	bl	8000d90 <SetAPSecurityMode>
	SetDHCPSetting(ES_WIFI_DHCP);
 800276e:	2001      	movs	r0, #1
 8002770:	f7fe fb2a 	bl	8000dc8 <SetDHCPSetting>
	return JoinNetwork();
 8002774:	f7fe fb44 	bl	8000e00 <JoinNetwork>
 8002778:	4603      	mov	r3, r0
 800277a:	b2db      	uxtb	r3, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	08009310 	.word	0x08009310

08002788 <ProcessSocket>:
//	}
//}


void ProcessSocket(int socket_id)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
//	if(sockState[socket_id] == SOCKET_CONNECTED)
//	{
//	printf("socket %d has state %d", socket_id, sockState[socket_id]);
//	ES_WIFI_Status_t state = CheckSocketConnection(socket_id);
	SetSocket(socket_id);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe fb4b 	bl	8000e2c <SetSocket>
	ShowSettings(socket_id);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fbfc 	bl	8000f94 <ShowSettings>
//	printf("socket %d, settings = %s", socket_id, spi_response);   //"socket %d state = %d\r\n", socket_id, state);
	GetData(socket_id);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe f95f 	bl	8000a60 <GetData>
//	}
//	else
//	{

//	}
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <StartTCP>:
	StartConnection();
}


void StartTCP(int port)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
	int sockNum = GetFreeSocket();
 80027b2:	f7fe fa6d 	bl	8000c90 <GetFreeSocket>
 80027b6:	60f8      	str	r0, [r7, #12]
	if(sockNum != -1)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027be:	d014      	beq.n	80027ea <StartTCP+0x40>
	{
		SetKeepAlive(1, 3000);
 80027c0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7fe fb99 	bl	8000efc <SetKeepAlive>
		SetSocketState(sockNum, SOCKET_BUSY);
 80027ca:	2101      	movs	r1, #1
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7fd ff8d 	bl	80006ec <SetSocketState>
		SetSocket(sockNum);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f7fe fb2a 	bl	8000e2c <SetSocket>
		SetProtocol(ES_WIFI_TCP_CONNECTION);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7fe fb41 	bl	8000e60 <SetProtocol>
		SetPort(port);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe fb5a 	bl	8000e98 <SetPort>
		StartTCPComm(sockNum);
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f7fe fb71 	bl	8000ecc <StartTCPComm>
//		PollForData();
		//	SetSocketToReopen();
	}

}
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80027f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800282c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80027f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027fa:	e003      	b.n	8002804 <LoopCopyDataInit>

080027fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002802:	3104      	adds	r1, #4

08002804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800280a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800280c:	d3f6      	bcc.n	80027fc <CopyDataInit>
  ldr  r2, =_sbss
 800280e:	4a0b      	ldr	r2, [pc, #44]	; (800283c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002810:	e002      	b.n	8002818 <LoopFillZerobss>

08002812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002812:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002814:	f842 3b04 	str.w	r3, [r2], #4

08002818 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800281a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800281c:	d3f9      	bcc.n	8002812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800281e:	f7ff ff65 	bl	80026ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002822:	f005 fa8f 	bl	8007d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002826:	f7fe fbcd 	bl	8000fc4 <main>
  bx  lr    
 800282a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800282c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002830:	08009458 	.word	0x08009458
  ldr  r0, =_sdata
 8002834:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002838:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800283c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002840:	200085a0 	.word	0x200085a0

08002844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_Init+0x40>)
 8002852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_Init+0x40>)
 800285e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_Init+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <HAL_Init+0x40>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002870:	2003      	movs	r0, #3
 8002872:	f000 fbbf 	bl	8002ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002876:	2000      	movs	r0, #0
 8002878:	f000 f808 	bl	800288c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800287c:	f7ff f956 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fbd7 	bl	800305e <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 fb9f 	bl	800300a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000000 	.word	0x20000000
 80028e4:	20000008 	.word	0x20000008
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000008 	.word	0x20000008
 8002910:	20006528 	.word	0x20006528

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	20006528 	.word	0x20006528

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_Delay+0x40>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000008 	.word	0x20000008

08002970 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e033      	b.n	80029ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff f8f4 	bl	8001b7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d118      	bne.n	80029e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029b6:	f023 0302 	bic.w	r3, r3, #2
 80029ba:	f043 0202 	orr.w	r2, r3, #2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f94a 	bl	8002c5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
 80029de:	e001      	b.n	80029e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e113      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x244>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d925      	bls.n	8002a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1e      	subs	r3, #30
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4403      	add	r3, r0
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	409a      	lsls	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e022      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	2207      	movs	r2, #7
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4403      	add	r3, r0
 8002aac:	409a      	lsls	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d824      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b05      	subs	r3, #5
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
 8002b06:	e04c      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b23      	subs	r3, #35	; 0x23
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
 8002b58:	e023      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b41      	subs	r3, #65	; 0x41
 8002b6c:	221f      	movs	r2, #31
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b41      	subs	r3, #65	; 0x41
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba2:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <HAL_ADC_ConfigChannel+0x250>)
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_ADC_ConfigChannel+0x254>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d12b      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d003      	beq.n	8002bec <HAL_ADC_ConfigChannel+0x1f4>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b11      	cmp	r3, #17
 8002bea:	d122      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a11      	ldr	r2, [pc, #68]	; (8002c50 <HAL_ADC_ConfigChannel+0x258>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d111      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_ADC_ConfigChannel+0x25c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_ADC_ConfigChannel+0x260>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0c9a      	lsrs	r2, r3, #18
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c24:	e002      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f9      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40012300 	.word	0x40012300
 8002c4c:	40012000 	.word	0x40012000
 8002c50:	10000012 	.word	0x10000012
 8002c54:	20000000 	.word	0x20000000
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c64:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <ADC_Init+0x1f0>)
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6859      	ldr	r1, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	4a58      	ldr	r2, [pc, #352]	; (8002e50 <ADC_Init+0x1f4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d022      	beq.n	8002d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6899      	ldr	r1, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	e00f      	b.n	8002d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0202 	bic.w	r2, r2, #2
 8002d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6899      	ldr	r1, [r3, #8]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7e1b      	ldrb	r3, [r3, #24]
 8002d74:	005a      	lsls	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	3b01      	subs	r3, #1
 8002db4:	035a      	lsls	r2, r3, #13
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e007      	b.n	8002dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	051a      	lsls	r2, r3, #20
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e12:	025a      	lsls	r2, r3, #9
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6899      	ldr	r1, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	029a      	lsls	r2, r3, #10
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40012300 	.word	0x40012300
 8002e50:	0f000001 	.word	0x0f000001

08002e54 <__NVIC_SetPriorityGrouping>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e70:	4013      	ands	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <__NVIC_SetPriorityGrouping+0x44>)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60d3      	str	r3, [r2, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_GetPriorityGrouping>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	0a1b      	lsrs	r3, r3, #8
 8002ea6:	f003 0307 	and.w	r3, r3, #7
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <__NVIC_EnableIRQ>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	db0b      	blt.n	8002ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	f003 021f 	and.w	r2, r3, #31
 8002ed0:	4907      	ldr	r1, [pc, #28]	; (8002ef0 <__NVIC_EnableIRQ+0x38>)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	095b      	lsrs	r3, r3, #5
 8002ed8:	2001      	movs	r0, #1
 8002eda:	fa00 f202 	lsl.w	r2, r0, r2
 8002ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000e100 	.word	0xe000e100

08002ef4 <__NVIC_SetPriority>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	6039      	str	r1, [r7, #0]
 8002efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	db0a      	blt.n	8002f1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	490c      	ldr	r1, [pc, #48]	; (8002f40 <__NVIC_SetPriority+0x4c>)
 8002f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	440b      	add	r3, r1
 8002f18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f1c:	e00a      	b.n	8002f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	4908      	ldr	r1, [pc, #32]	; (8002f44 <__NVIC_SetPriority+0x50>)
 8002f24:	79fb      	ldrb	r3, [r7, #7]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	3b04      	subs	r3, #4
 8002f2c:	0112      	lsls	r2, r2, #4
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	440b      	add	r3, r1
 8002f32:	761a      	strb	r2, [r3, #24]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000e100 	.word	0xe000e100
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <NVIC_EncodePriority>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b089      	sub	sp, #36	; 0x24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f1c3 0307 	rsb	r3, r3, #7
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	bf28      	it	cs
 8002f66:	2304      	movcs	r3, #4
 8002f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	2b06      	cmp	r3, #6
 8002f70:	d902      	bls.n	8002f78 <NVIC_EncodePriority+0x30>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3b03      	subs	r3, #3
 8002f76:	e000      	b.n	8002f7a <NVIC_EncodePriority+0x32>
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43da      	mvns	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9a:	43d9      	mvns	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa0:	4313      	orrs	r3, r2
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3724      	adds	r7, #36	; 0x24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <SysTick_Config>:
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc0:	d301      	bcc.n	8002fc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00f      	b.n	8002fe6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <SysTick_Config+0x40>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fce:	210f      	movs	r1, #15
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd4:	f7ff ff8e 	bl	8002ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <SysTick_Config+0x40>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <SysTick_Config+0x40>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	e000e010 	.word	0xe000e010

08002ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff29 	bl	8002e54 <__NVIC_SetPriorityGrouping>
}
 8003002:	bf00      	nop
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300a:	b580      	push	{r7, lr}
 800300c:	b086      	sub	sp, #24
 800300e:	af00      	add	r7, sp, #0
 8003010:	4603      	mov	r3, r0
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
 8003016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800301c:	f7ff ff3e 	bl	8002e9c <__NVIC_GetPriorityGrouping>
 8003020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	6978      	ldr	r0, [r7, #20]
 8003028:	f7ff ff8e 	bl	8002f48 <NVIC_EncodePriority>
 800302c:	4602      	mov	r2, r0
 800302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff5d 	bl	8002ef4 <__NVIC_SetPriority>
}
 800303a:	bf00      	nop
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff31 	bl	8002eb8 <__NVIC_EnableIRQ>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ffa2 	bl	8002fb0 <SysTick_Config>
 800306c:	4603      	mov	r3, r0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e014      	b.n	80030b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	791b      	ldrb	r3, [r3, #4]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fe fdeb 	bl	8001c74 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b087      	sub	sp, #28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	795b      	ldrb	r3, [r3, #5]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_DAC_ConfigChannel+0x20>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e036      	b.n	8003148 <HAL_DAC_ConfigChannel+0x8e>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2202      	movs	r2, #2
 80030e4:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80030ee:	f640 72fe 	movw	r2, #4094	; 0xffe
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4013      	ands	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	22c0      	movs	r2, #192	; 0xc0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43da      	mvns	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	400a      	ands	r2, r1
 8003138:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0cf      	b.n	8003306 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_DFSDM_ChannelInit+0x1bc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00e      	beq.n	800318e <HAL_DFSDM_ChannelInit+0x3a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a67      	ldr	r2, [pc, #412]	; (8003314 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d009      	beq.n	800318e <HAL_DFSDM_ChannelInit+0x3a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a66      	ldr	r2, [pc, #408]	; (8003318 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d004      	beq.n	800318e <HAL_DFSDM_ChannelInit+0x3a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a64      	ldr	r2, [pc, #400]	; (800331c <HAL_DFSDM_ChannelInit+0x1c8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d106      	bne.n	800319c <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800318e:	4b64      	ldr	r3, [pc, #400]	; (8003320 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003190:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003192:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003194:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003196:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e005      	b.n	80031a8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 800319c:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_DFSDM_ChannelInit+0x1d4>)
 800319e:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80031a0:	4b62      	ldr	r3, [pc, #392]	; (800332c <HAL_DFSDM_ChannelInit+0x1d8>)
 80031a2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_DFSDM_ChannelInit+0x1dc>)
 80031a6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 f9f3 	bl	8003598 <DFSDM_GetChannelFromInstance>
 80031b2:	4603      	mov	r3, r0
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0a0      	b.n	8003306 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fe fe5f 	bl	8001e88 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d125      	bne.n	8003228 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003236:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003246:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800324c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 020f 	bic.w	r2, r2, #15
 8003264:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800328c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6899      	ldr	r1, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f002 0207 	and.w	r2, r2, #7
 80032b8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e4:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f950 	bl	8003598 <DFSDM_GetChannelFromInstance>
 80032f8:	4603      	mov	r3, r0
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40016000 	.word	0x40016000
 8003314:	40016020 	.word	0x40016020
 8003318:	40016040 	.word	0x40016040
 800331c:	40016060 	.word	0x40016060
 8003320:	20000fb0 	.word	0x20000fb0
 8003324:	20000fb4 	.word	0x20000fb4
 8003328:	20000fc4 	.word	0x20000fc4
 800332c:	20000fc8 	.word	0x20000fc8
 8003330:	40016400 	.word	0x40016400

08003334 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0d9      	b.n	80034fa <HAL_DFSDM_FilterInit+0x1c6>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_DFSDM_FilterInit+0x1d0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d109      	bne.n	8003364 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8003354:	2b01      	cmp	r3, #1
 8003356:	d003      	beq.n	8003360 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0ca      	b.n	80034fa <HAL_DFSDM_FilterInit+0x1c6>
  }
#if defined (DFSDM2_Channel0)  
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a67      	ldr	r2, [pc, #412]	; (8003508 <HAL_DFSDM_FilterInit+0x1d4>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d109      	bne.n	8003382 <HAL_DFSDM_FilterInit+0x4e>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM2_Filter0) && 
 8003372:	2b01      	cmp	r3, #1
 8003374:	d003      	beq.n	800337e <HAL_DFSDM_FilterInit+0x4a>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_DFSDM_FilterInit+0x4e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0bb      	b.n	80034fa <HAL_DFSDM_FilterInit+0x1c6>
  }  
#endif /* DFSDM2_Channel0 */
       
  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fe fcae 	bl	8001cfc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80033ae:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	7a1b      	ldrb	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d108      	bne.n	80033ca <HAL_DFSDM_FilterInit+0x96>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e007      	b.n	80033da <HAL_DFSDM_FilterInit+0xa6>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80033d8:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	7a5b      	ldrb	r3, [r3, #9]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d108      	bne.n	80033f4 <HAL_DFSDM_FilterInit+0xc0>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e007      	b.n	8003404 <HAL_DFSDM_FilterInit+0xd0>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d108      	bne.n	8003432 <HAL_DFSDM_FilterInit+0xfe>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	7c1b      	ldrb	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d108      	bne.n	800344c <HAL_DFSDM_FilterInit+0x118>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0210 	orr.w	r2, r2, #16
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e007      	b.n	800345c <HAL_DFSDM_FilterInit+0x128>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0210 	bic.w	r2, r2, #16
 800345a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7c5b      	ldrb	r3, [r3, #17]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d108      	bne.n	8003476 <HAL_DFSDM_FilterInit+0x142>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0220 	orr.w	r2, r2, #32
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e007      	b.n	8003486 <HAL_DFSDM_FilterInit+0x152>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0220 	bic.w	r2, r2, #32
 8003484:	601a      	str	r2, [r3, #0]
  }
  
  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003494:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003498:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6959      	ldr	r1, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80034ac:	431a      	orrs	r2, r3
                                     (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80034b4:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7c1a      	ldrb	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40016100 	.word	0x40016100
 8003508:	40016500 	.word	0x40016500

0800350c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));
  
  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02e      	beq.n	8003584 <HAL_DFSDM_FilterConfigRegChannel+0x78>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 800352c:	2bff      	cmp	r3, #255	; 0xff
 800352e:	d029      	beq.n	8003584 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800353e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d10d      	bne.n	8003566 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e00a      	b.n	800357c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6819      	ldr	r1, [r3, #0]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	021b      	lsls	r3, r3, #8
 8003570:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	631a      	str	r2, [r3, #48]	; 0x30
 8003582:	e001      	b.n	8003588 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }  
  else
  {
    status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a24      	ldr	r2, [pc, #144]	; (8003634 <DFSDM_GetChannelFromInstance+0x9c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <DFSDM_GetChannelFromInstance+0x18>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <DFSDM_GetChannelFromInstance+0xa0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d102      	bne.n	80035b6 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	e037      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a20      	ldr	r2, [pc, #128]	; (800363c <DFSDM_GetChannelFromInstance+0xa4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <DFSDM_GetChannelFromInstance+0x2e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <DFSDM_GetChannelFromInstance+0xa8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d102      	bne.n	80035cc <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 80035c6:	2301      	movs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	e02c      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <DFSDM_GetChannelFromInstance+0xac>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <DFSDM_GetChannelFromInstance+0x44>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <DFSDM_GetChannelFromInstance+0xb0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d102      	bne.n	80035e2 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80035dc:	2302      	movs	r3, #2
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e021      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a19      	ldr	r2, [pc, #100]	; (800364c <DFSDM_GetChannelFromInstance+0xb4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d003      	beq.n	80035f2 <DFSDM_GetChannelFromInstance+0x5a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a18      	ldr	r2, [pc, #96]	; (8003650 <DFSDM_GetChannelFromInstance+0xb8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d102      	bne.n	80035f8 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80035f2:	2303      	movs	r3, #3
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e016      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a16      	ldr	r2, [pc, #88]	; (8003654 <DFSDM_GetChannelFromInstance+0xbc>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d102      	bne.n	8003606 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003600:	2304      	movs	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e00f      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <DFSDM_GetChannelFromInstance+0xc0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d102      	bne.n	8003614 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800360e:	2305      	movs	r3, #5
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e008      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a11      	ldr	r2, [pc, #68]	; (800365c <DFSDM_GetChannelFromInstance+0xc4>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d102      	bne.n	8003622 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 800361c:	2306      	movs	r3, #6
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e001      	b.n	8003626 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003622:	2307      	movs	r3, #7
 8003624:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40016000 	.word	0x40016000
 8003638:	40016400 	.word	0x40016400
 800363c:	40016020 	.word	0x40016020
 8003640:	40016420 	.word	0x40016420
 8003644:	40016040 	.word	0x40016040
 8003648:	40016440 	.word	0x40016440
 800364c:	40016060 	.word	0x40016060
 8003650:	40016460 	.word	0x40016460
 8003654:	40016480 	.word	0x40016480
 8003658:	400164a0 	.word	0x400164a0
 800365c:	400164c0 	.word	0x400164c0

08003660 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800366c:	f7ff f952 	bl	8002914 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e099      	b.n	80037b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369c:	e00f      	b.n	80036be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800369e:	f7ff f939 	bl	8002914 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d908      	bls.n	80036be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2203      	movs	r2, #3
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e078      	b.n	80037b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e8      	bne.n	800369e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4b38      	ldr	r3, [pc, #224]	; (80037b8 <HAL_DMA_Init+0x158>)
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	2b04      	cmp	r3, #4
 8003716:	d107      	bne.n	8003728 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	4313      	orrs	r3, r2
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0307 	bic.w	r3, r3, #7
 800373e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	2b04      	cmp	r3, #4
 8003750:	d117      	bne.n	8003782 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9e9 	bl	8003b3c <DMA_CheckFifoParam>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800377e:	2301      	movs	r3, #1
 8003780:	e016      	b.n	80037b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f9a0 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 8003790:	4603      	mov	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	223f      	movs	r2, #63	; 0x3f
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	e010803f 	.word	0xe010803f

080037bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <HAL_DMA_IRQHandler+0x258>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a92      	ldr	r2, [pc, #584]	; (8003a18 <HAL_DMA_IRQHandler+0x25c>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a9b      	lsrs	r3, r3, #10
 80037d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	2208      	movs	r2, #8
 80037e8:	409a      	lsls	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01a      	beq.n	8003828 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2208      	movs	r2, #8
 8003816:	409a      	lsls	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382c:	2201      	movs	r2, #1
 800382e:	409a      	lsls	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d012      	beq.n	800385e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2201      	movs	r2, #1
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003862:	2204      	movs	r2, #4
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4013      	ands	r3, r2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d012      	beq.n	8003894 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00b      	beq.n	8003894 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2204      	movs	r2, #4
 8003882:	409a      	lsls	r2, r3
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f043 0204 	orr.w	r2, r3, #4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003898:	2210      	movs	r2, #16
 800389a:	409a      	lsls	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d043      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03c      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b6:	2210      	movs	r2, #16
 80038b8:	409a      	lsls	r2, r3
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d108      	bne.n	80038ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d024      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	4798      	blx	r3
 80038ea:	e01f      	b.n	800392c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d01b      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
 80038fc:	e016      	b.n	800392c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003908:	2b00      	cmp	r3, #0
 800390a:	d107      	bne.n	800391c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0208 	bic.w	r2, r2, #8
 800391a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2220      	movs	r2, #32
 8003932:	409a      	lsls	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 808e 	beq.w	8003a5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8086 	beq.w	8003a5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2220      	movs	r2, #32
 8003954:	409a      	lsls	r2, r3
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b05      	cmp	r3, #5
 8003964:	d136      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0216 	bic.w	r2, r2, #22
 8003974:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003984:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_DMA_IRQHandler+0x1da>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	2b00      	cmp	r3, #0
 8003994:	d007      	beq.n	80039a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0208 	bic.w	r2, r2, #8
 80039a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	223f      	movs	r2, #63	; 0x3f
 80039ac:	409a      	lsls	r2, r3
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d07d      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
        }
        return;
 80039d2:	e078      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01c      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d030      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e02b      	b.n	8003a5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d027      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
 8003a12:	e022      	b.n	8003a5a <HAL_DMA_IRQHandler+0x29e>
 8003a14:	20000000 	.word	0x20000000
 8003a18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d032      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d022      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2205      	movs	r2, #5
 8003a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0201 	bic.w	r2, r2, #1
 8003a84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d307      	bcc.n	8003aa2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f2      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x2ca>
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003aa2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
 8003ac4:	e000      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ac6:	bf00      	nop
    }
  }
}
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b10      	subs	r3, #16
 8003ae0:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <DMA_CalcBaseAndBitshift+0x64>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d909      	bls.n	8003b12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b10:	e007      	b.n	8003b22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	aaaaaaab 	.word	0xaaaaaaab
 8003b38:	08009394 	.word	0x08009394

08003b3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d855      	bhi.n	8003c08 <DMA_CheckFifoParam+0xcc>
 8003b5c:	a201      	add	r2, pc, #4	; (adr r2, 8003b64 <DMA_CheckFifoParam+0x28>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b87 	.word	0x08003b87
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003c09 	.word	0x08003c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d045      	beq.n	8003c0c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e042      	b.n	8003c0c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b8e:	d13f      	bne.n	8003c10 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e03c      	b.n	8003c10 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	d121      	bne.n	8003be4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d836      	bhi.n	8003c14 <DMA_CheckFifoParam+0xd8>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <DMA_CheckFifoParam+0x70>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc3 	.word	0x08003bc3
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003bd5 	.word	0x08003bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e02f      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d024      	beq.n	8003c18 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e021      	b.n	8003c18 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bdc:	d11e      	bne.n	8003c1c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003be2:	e01b      	b.n	8003c1c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d902      	bls.n	8003bf0 <DMA_CheckFifoParam+0xb4>
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d003      	beq.n	8003bf6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bee:	e018      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf4:	e015      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      break;
 8003c06:	e00b      	b.n	8003c20 <DMA_CheckFifoParam+0xe4>
      break;
 8003c08:	bf00      	nop
 8003c0a:	e00a      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c0c:	bf00      	nop
 8003c0e:	e008      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c10:	bf00      	nop
 8003c12:	e006      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;   
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c20:	bf00      	nop
    }
  } 
  
  return status; 
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e081      	b.n	8003d46 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe f9aa 	bl	8001fb0 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2224      	movs	r2, #36	; 0x24
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0201 	bic.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c80:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c90:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	e006      	b.n	8003cb8 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d104      	bne.n	8003cca <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cec:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	ea42 0103 	orr.w	r1, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1a      	ldr	r2, [r3, #32]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f042 0201 	orr.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d138      	bne.n	8003dd6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e032      	b.n	8003dd8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2224      	movs	r2, #36	; 0x24
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003da0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b089      	sub	sp, #36	; 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e165      	b.n	80040cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e00:	2201      	movs	r2, #1
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f040 8154 	bne.w	80040c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d00b      	beq.n	8003e3e <HAL_GPIO_Init+0x5a>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e32:	2b11      	cmp	r3, #17
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b12      	cmp	r3, #18
 8003e3c:	d130      	bne.n	8003ea0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	2203      	movs	r2, #3
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4013      	ands	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e74:	2201      	movs	r2, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	091b      	lsrs	r3, r3, #4
 8003e8a:	f003 0201 	and.w	r2, r3, #1
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d003      	beq.n	8003ee0 <HAL_GPIO_Init+0xfc>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b12      	cmp	r3, #18
 8003ede:	d123      	bne.n	8003f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	08da      	lsrs	r2, r3, #3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3208      	adds	r2, #8
 8003ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	08da      	lsrs	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3208      	adds	r2, #8
 8003f22:	69b9      	ldr	r1, [r7, #24]
 8003f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0203 	and.w	r2, r3, #3
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80ae 	beq.w	80040c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	4b5c      	ldr	r3, [pc, #368]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f72:	4a5b      	ldr	r2, [pc, #364]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f78:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_GPIO_Init+0x2fc>)
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <HAL_GPIO_Init+0x300>)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	089b      	lsrs	r3, r3, #2
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4e      	ldr	r2, [pc, #312]	; (80040e8 <HAL_GPIO_Init+0x304>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d025      	beq.n	8003ffe <HAL_GPIO_Init+0x21a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a4d      	ldr	r2, [pc, #308]	; (80040ec <HAL_GPIO_Init+0x308>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01f      	beq.n	8003ffa <HAL_GPIO_Init+0x216>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a4c      	ldr	r2, [pc, #304]	; (80040f0 <HAL_GPIO_Init+0x30c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d019      	beq.n	8003ff6 <HAL_GPIO_Init+0x212>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4b      	ldr	r2, [pc, #300]	; (80040f4 <HAL_GPIO_Init+0x310>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_GPIO_Init+0x20e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_GPIO_Init+0x314>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00d      	beq.n	8003fee <HAL_GPIO_Init+0x20a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_GPIO_Init+0x318>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d007      	beq.n	8003fea <HAL_GPIO_Init+0x206>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_GPIO_Init+0x31c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <HAL_GPIO_Init+0x202>
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	e00c      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003fe6:	2307      	movs	r3, #7
 8003fe8:	e00a      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003fea:	2305      	movs	r3, #5
 8003fec:	e008      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	e006      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e004      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e002      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_GPIO_Init+0x21c>
 8003ffe:	2300      	movs	r3, #0
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	f002 0203 	and.w	r2, r2, #3
 8004006:	0092      	lsls	r2, r2, #2
 8004008:	4093      	lsls	r3, r2
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004010:	4934      	ldr	r1, [pc, #208]	; (80040e4 <HAL_GPIO_Init+0x300>)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	3302      	adds	r3, #2
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800401e:	4b39      	ldr	r3, [pc, #228]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004042:	4a30      	ldr	r2, [pc, #192]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004048:	4b2e      	ldr	r3, [pc, #184]	; (8004104 <HAL_GPIO_Init+0x320>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_GPIO_Init+0x320>)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	43db      	mvns	r3, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4013      	ands	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_GPIO_Init+0x320>)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_GPIO_Init+0x320>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040c0:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_GPIO_Init+0x320>)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3301      	adds	r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	2b0f      	cmp	r3, #15
 80040d0:	f67f ae96 	bls.w	8003e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3724      	adds	r7, #36	; 0x24
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40013800 	.word	0x40013800
 80040e8:	40020000 	.word	0x40020000
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40020800 	.word	0x40020800
 80040f4:	40020c00 	.word	0x40020c00
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40021400 	.word	0x40021400
 8004100:	40021800 	.word	0x40021800
 8004104:	40013c00 	.word	0x40013c00

08004108 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	e001      	b.n	800412a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004148:	787b      	ldrb	r3, [r7, #1]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004154:	e003      	b.n	800415e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004156:	887b      	ldrh	r3, [r7, #2]
 8004158:	041a      	lsls	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	619a      	str	r2, [r3, #24]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004174:	f7fe fbce 	bl	8002914 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e069      	b.n	8004258 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fd ff51 	bl	8002040 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800419e:	f241 3188 	movw	r1, #5000	; 0x1388
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f85e 	bl	8004264 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	021a      	lsls	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2120      	movs	r1, #32
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f856 	bl	8004280 <QSPI_WaitFlagStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80041d8:	7afb      	ldrb	r3, [r7, #11]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d137      	bne.n	800424e <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80041e8:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6852      	ldr	r2, [r2, #4]
 80041f0:	0611      	lsls	r1, r2, #24
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68d2      	ldr	r2, [r2, #12]
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	69d2      	ldr	r2, [r2, #28]
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6a12      	ldr	r2, [r2, #32]
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	430b      	orrs	r3, r1
 800420a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_QSPI_Init+0xf4>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6912      	ldr	r2, [r2, #16]
 800421a:	0411      	lsls	r1, r2, #16
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6952      	ldr	r2, [r2, #20]
 8004220:	4311      	orrs	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6992      	ldr	r2, [r2, #24]
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	430b      	orrs	r3, r1
 800422e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004256:	7afb      	ldrb	r3, [r7, #11]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	ffe0f8fe 	.word	0xffe0f8fe

08004264 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004290:	e01a      	b.n	80042c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d016      	beq.n	80042c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fe fb3b 	bl	8002914 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2204      	movs	r2, #4
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	f043 0201 	orr.w	r2, r3, #1
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00e      	b.n	80042e6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1d6      	bne.n	8004292 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0cc      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d90c      	bls.n	800432c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b63      	ldr	r3, [pc, #396]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0b8      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d020      	beq.n	800437a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a58      	ldr	r2, [pc, #352]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800434e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	4a52      	ldr	r2, [pc, #328]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004366:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	494d      	ldr	r1, [pc, #308]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d044      	beq.n	8004410 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d107      	bne.n	800439e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d119      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e07f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d003      	beq.n	80043ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d109      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e06f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e067      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f023 0203 	bic.w	r2, r3, #3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	4934      	ldr	r1, [pc, #208]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fe fa98 	bl	8002914 <HAL_GetTick>
 80043e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	e00a      	b.n	80043fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e8:	f7fe fa94 	bl	8002914 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e04f      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 020c 	and.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1eb      	bne.n	80043e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b25      	ldr	r3, [pc, #148]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d20c      	bcs.n	8004438 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e032      	b.n	800449e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4916      	ldr	r1, [pc, #88]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	490e      	ldr	r1, [pc, #56]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004476:	f000 f821 	bl	80044bc <HAL_RCC_GetSysClockFreq>
 800447a:	4601      	mov	r1, r0
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	fa21 f303 	lsr.w	r3, r1, r3
 800448e:	4a09      	ldr	r2, [pc, #36]	; (80044b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fe f9f8 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800937c 	.word	0x0800937c
 80044b4:	20000000 	.word	0x20000000
 80044b8:	20000004 	.word	0x20000004

080044bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044d2:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d007      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x32>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d008      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x38>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 808d 	bne.w	8004602 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <HAL_RCC_GetSysClockFreq+0x15c>)
 80044ea:	60bb      	str	r3, [r7, #8]
       break;
 80044ec:	e08c      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ee:	4b4b      	ldr	r3, [pc, #300]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 80044f0:	60bb      	str	r3, [r7, #8]
      break;
 80044f2:	e089      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044f4:	4b47      	ldr	r3, [pc, #284]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044fe:	4b45      	ldr	r3, [pc, #276]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d023      	beq.n	8004552 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800450a:	4b42      	ldr	r3, [pc, #264]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	f04f 0400 	mov.w	r4, #0
 8004514:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	ea03 0501 	and.w	r5, r3, r1
 8004520:	ea04 0602 	and.w	r6, r4, r2
 8004524:	4a3d      	ldr	r2, [pc, #244]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 8004526:	fb02 f106 	mul.w	r1, r2, r6
 800452a:	2200      	movs	r2, #0
 800452c:	fb02 f205 	mul.w	r2, r2, r5
 8004530:	440a      	add	r2, r1
 8004532:	493a      	ldr	r1, [pc, #232]	; (800461c <HAL_RCC_GetSysClockFreq+0x160>)
 8004534:	fba5 0101 	umull	r0, r1, r5, r1
 8004538:	1853      	adds	r3, r2, r1
 800453a:	4619      	mov	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f04f 0400 	mov.w	r4, #0
 8004542:	461a      	mov	r2, r3
 8004544:	4623      	mov	r3, r4
 8004546:	f7fb fec3 	bl	80002d0 <__aeabi_uldivmod>
 800454a:	4603      	mov	r3, r0
 800454c:	460c      	mov	r4, r1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e049      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004552:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	099b      	lsrs	r3, r3, #6
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	ea03 0501 	and.w	r5, r3, r1
 8004568:	ea04 0602 	and.w	r6, r4, r2
 800456c:	4629      	mov	r1, r5
 800456e:	4632      	mov	r2, r6
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	f04f 0400 	mov.w	r4, #0
 8004578:	0154      	lsls	r4, r2, #5
 800457a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800457e:	014b      	lsls	r3, r1, #5
 8004580:	4619      	mov	r1, r3
 8004582:	4622      	mov	r2, r4
 8004584:	1b49      	subs	r1, r1, r5
 8004586:	eb62 0206 	sbc.w	r2, r2, r6
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	f04f 0400 	mov.w	r4, #0
 8004592:	0194      	lsls	r4, r2, #6
 8004594:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004598:	018b      	lsls	r3, r1, #6
 800459a:	1a5b      	subs	r3, r3, r1
 800459c:	eb64 0402 	sbc.w	r4, r4, r2
 80045a0:	f04f 0100 	mov.w	r1, #0
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	00e2      	lsls	r2, r4, #3
 80045aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045ae:	00d9      	lsls	r1, r3, #3
 80045b0:	460b      	mov	r3, r1
 80045b2:	4614      	mov	r4, r2
 80045b4:	195b      	adds	r3, r3, r5
 80045b6:	eb44 0406 	adc.w	r4, r4, r6
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	02a2      	lsls	r2, r4, #10
 80045c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045c8:	0299      	lsls	r1, r3, #10
 80045ca:	460b      	mov	r3, r1
 80045cc:	4614      	mov	r4, r2
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	f7fb fe78 	bl	80002d0 <__aeabi_uldivmod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	460c      	mov	r4, r1
 80045e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCC_GetSysClockFreq+0x158>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0303 	and.w	r3, r3, #3
 80045f0:	3301      	adds	r3, #1
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	60bb      	str	r3, [r7, #8]
      break;
 8004600:	e002      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004604:	60bb      	str	r3, [r7, #8]
      break;
 8004606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004608:	68bb      	ldr	r3, [r7, #8]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800
 8004618:	00f42400 	.word	0x00f42400
 800461c:	017d7840 	.word	0x017d7840

08004620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004624:	4b03      	ldr	r3, [pc, #12]	; (8004634 <HAL_RCC_GetHCLKFreq+0x14>)
 8004626:	681b      	ldr	r3, [r3, #0]
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000000 	.word	0x20000000

08004638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800463c:	f7ff fff0 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004640:	4601      	mov	r1, r0
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	0a9b      	lsrs	r3, r3, #10
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	4a03      	ldr	r2, [pc, #12]	; (800465c <HAL_RCC_GetPCLK1Freq+0x24>)
 800464e:	5cd3      	ldrb	r3, [r2, r3]
 8004650:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004654:	4618      	mov	r0, r3
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40023800 	.word	0x40023800
 800465c:	0800938c 	.word	0x0800938c

08004660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004664:	f7ff ffdc 	bl	8004620 <HAL_RCC_GetHCLKFreq>
 8004668:	4601      	mov	r1, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	0b5b      	lsrs	r3, r3, #13
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4a03      	ldr	r2, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004676:	5cd3      	ldrb	r3, [r2, r3]
 8004678:	fa21 f303 	lsr.w	r3, r1, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40023800 	.word	0x40023800
 8004684:	0800938c 	.word	0x0800938c

08004688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d010      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80046ac:	4b7a      	ldr	r3, [pc, #488]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4977      	ldr	r1, [pc, #476]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80046ca:	2301      	movs	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80046da:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	496b      	ldr	r1, [pc, #428]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80046f8:	2301      	movs	r3, #1
 80046fa:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d022      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8004708:	4b63      	ldr	r3, [pc, #396]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800470a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	4960      	ldr	r1, [pc, #384]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8004726:	2301      	movs	r3, #1
 8004728:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004732:	d10c      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004734:	4b58      	ldr	r3, [pc, #352]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4954      	ldr	r1, [pc, #336]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d022      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800475a:	4b4f      	ldr	r3, [pc, #316]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004760:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004768:	494b      	ldr	r1, [pc, #300]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004778:	2301      	movs	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004780:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8004786:	4b44      	ldr	r3, [pc, #272]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800478c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	3b01      	subs	r3, #1
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	493f      	ldr	r1, [pc, #252]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 808a 	beq.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a38      	ldr	r2, [pc, #224]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047ca:	4b34      	ldr	r3, [pc, #208]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a33      	ldr	r2, [pc, #204]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047d6:	f7fe f89d 	bl	8002914 <HAL_GetTick>
 80047da:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fe f899 	bl	8002914 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e1d1      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047f0:	4b2a      	ldr	r3, [pc, #168]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047fc:	4b26      	ldr	r3, [pc, #152]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004804:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02f      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	429a      	cmp	r2, r3
 8004818:	d028      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004822:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004830:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004836:	4b18      	ldr	r3, [pc, #96]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d114      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004842:	f7fe f867 	bl	8002914 <HAL_GetTick>
 8004846:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fe f863 	bl	8002914 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e199      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d114      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800488a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800488e:	4902      	ldr	r1, [pc, #8]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004890:	4313      	orrs	r3, r2
 8004892:	608b      	str	r3, [r1, #8]
 8004894:	e00c      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004896:	bf00      	nop
 8004898:	40023800 	.word	0x40023800
 800489c:	40007000 	.word	0x40007000
 80048a0:	42470e40 	.word	0x42470e40
 80048a4:	4b89      	ldr	r3, [pc, #548]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	4a88      	ldr	r2, [pc, #544]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048ae:	6093      	str	r3, [r2, #8]
 80048b0:	4b86      	ldr	r3, [pc, #536]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048bc:	4983      	ldr	r1, [pc, #524]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80048d4:	4b7e      	ldr	r3, [pc, #504]	; (8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80048d6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80048e4:	4b79      	ldr	r3, [pc, #484]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	4976      	ldr	r1, [pc, #472]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004906:	4b71      	ldr	r3, [pc, #452]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004908:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800490c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	496d      	ldr	r1, [pc, #436]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004924:	d101      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8004926:	2301      	movs	r3, #1
 8004928:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004936:	4b65      	ldr	r3, [pc, #404]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800493c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	4961      	ldr	r1, [pc, #388]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d004      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	f040 80c6 	bne.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800495c:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004962:	f7fd ffd7 	bl	8002914 <HAL_GetTick>
 8004966:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800496a:	f7fd ffd3 	bl	8002914 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e10b      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f0      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8004988:	4a53      	ldr	r2, [pc, #332]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d023      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d019      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049cc:	d00e      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d019      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d115      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x386>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ea:	d110      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	019b      	lsls	r3, r3, #6
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	061b      	lsls	r3, r3, #24
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	071b      	lsls	r3, r3, #28
 8004a06:	4931      	ldr	r1, [pc, #196]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d009      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d026      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d122      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a36:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	0e1b      	lsrs	r3, r3, #24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	019b      	lsls	r3, r3, #6
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	061b      	lsls	r3, r3, #24
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	071b      	lsls	r3, r3, #28
 8004a5c:	491b      	ldr	r1, [pc, #108]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8004a64:	4b19      	ldr	r3, [pc, #100]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6a:	f023 021f 	bic.w	r2, r3, #31
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	4915      	ldr	r1, [pc, #84]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d010      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	071b      	lsls	r3, r3, #28
 8004aa2:	490a      	ldr	r1, [pc, #40]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aaa:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ab0:	f7fd ff30 	bl	8002914 <HAL_GetTick>
 8004ab4:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ab6:	e011      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ab8:	f7fd ff2c 	bl	8002914 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d90a      	bls.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e064      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	424711e0 	.word	0x424711e0
 8004ad4:	42470068 	.word	0x42470068
 8004ad8:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004adc:	4b2f      	ldr	r3, [pc, #188]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0e7      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	4926      	ldr	r1, [pc, #152]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b16:	4b21      	ldr	r3, [pc, #132]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	491d      	ldr	r1, [pc, #116]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	4915      	ldr	r1, [pc, #84]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8004b5a:	4b10      	ldr	r3, [pc, #64]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b60:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	490c      	ldr	r1, [pc, #48]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b82:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	4904      	ldr	r1, [pc, #16]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800

08004ba0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d075      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bb8:	4ba2      	ldr	r3, [pc, #648]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 030c 	and.w	r3, r3, #12
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d00c      	beq.n	8004bde <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bc4:	4b9f      	ldr	r3, [pc, #636]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d112      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd0:	4b9c      	ldr	r3, [pc, #624]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bde:	4b99      	ldr	r3, [pc, #612]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d05b      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x102>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d157      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e20b      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCC_OscConfig+0x6e>
 8004c00:	4b90      	ldr	r3, [pc, #576]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a8f      	ldr	r2, [pc, #572]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	e01d      	b.n	8004c4a <HAL_RCC_OscConfig+0xaa>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c16:	d10c      	bne.n	8004c32 <HAL_RCC_OscConfig+0x92>
 8004c18:	4b8a      	ldr	r3, [pc, #552]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a89      	ldr	r2, [pc, #548]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c22:	6013      	str	r3, [r2, #0]
 8004c24:	4b87      	ldr	r3, [pc, #540]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a86      	ldr	r2, [pc, #536]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	e00b      	b.n	8004c4a <HAL_RCC_OscConfig+0xaa>
 8004c32:	4b84      	ldr	r3, [pc, #528]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a83      	ldr	r2, [pc, #524]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	4b81      	ldr	r3, [pc, #516]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a80      	ldr	r2, [pc, #512]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d013      	beq.n	8004c7a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c52:	f7fd fe5f 	bl	8002914 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c5a:	f7fd fe5b 	bl	8002914 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	; 0x64
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e1d0      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6c:	4b75      	ldr	r3, [pc, #468]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0xba>
 8004c78:	e014      	b.n	8004ca4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fd fe4b 	bl	8002914 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c82:	f7fd fe47 	bl	8002914 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e1bc      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c94:	4b6b      	ldr	r3, [pc, #428]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <HAL_RCC_OscConfig+0xe2>
 8004ca0:	e000      	b.n	8004ca4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d063      	beq.n	8004d78 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cb0:	4b64      	ldr	r3, [pc, #400]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbc:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d11c      	bne.n	8004d02 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc8:	4b5e      	ldr	r3, [pc, #376]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d116      	bne.n	8004d02 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd4:	4b5b      	ldr	r3, [pc, #364]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_OscConfig+0x14c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e190      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4952      	ldr	r1, [pc, #328]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d00:	e03a      	b.n	8004d78 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d020      	beq.n	8004d4c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0a:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <HAL_RCC_OscConfig+0x2a8>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fd fe00 	bl	8002914 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fd fdfc 	bl	8002914 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e171      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2a:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	493f      	ldr	r1, [pc, #252]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	600b      	str	r3, [r1, #0]
 8004d4a:	e015      	b.n	8004d78 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4c:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_RCC_OscConfig+0x2a8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fd fddf 	bl	8002914 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fd fddb 	bl	8002914 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e150      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6c:	4b35      	ldr	r3, [pc, #212]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d030      	beq.n	8004de6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d016      	beq.n	8004dba <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8c:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fd fdbf 	bl	8002914 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fd fdbb 	bl	8002914 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e130      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dac:	4b25      	ldr	r3, [pc, #148]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1fa>
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fda8 	bl	8002914 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc8:	f7fd fda4 	bl	8002914 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e119      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1f0      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 809f 	beq.w	8004f32 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004df4:	2300      	movs	r3, #0
 8004df6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df8:	4b12      	ldr	r3, [pc, #72]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	4b0e      	ldr	r3, [pc, #56]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	4a0d      	ldr	r2, [pc, #52]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e12:	6413      	str	r3, [r2, #64]	; 0x40
 8004e14:	4b0b      	ldr	r3, [pc, #44]	; (8004e44 <HAL_RCC_OscConfig+0x2a4>)
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e20:	2301      	movs	r3, #1
 8004e22:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d120      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a06      	ldr	r2, [pc, #24]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3c:	f7fd fd6a 	bl	8002914 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e42:	e010      	b.n	8004e66 <HAL_RCC_OscConfig+0x2c6>
 8004e44:	40023800 	.word	0x40023800
 8004e48:	42470000 	.word	0x42470000
 8004e4c:	42470e80 	.word	0x42470e80
 8004e50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e54:	f7fd fd5e 	bl	8002914 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e0d3      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <HAL_RCC_OscConfig+0x478>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0f0      	beq.n	8004e54 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d106      	bne.n	8004e88 <HAL_RCC_OscConfig+0x2e8>
 8004e7a:	4b68      	ldr	r3, [pc, #416]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a67      	ldr	r2, [pc, #412]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
 8004e86:	e01c      	b.n	8004ec2 <HAL_RCC_OscConfig+0x322>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b05      	cmp	r3, #5
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCC_OscConfig+0x30a>
 8004e90:	4b62      	ldr	r3, [pc, #392]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	4a61      	ldr	r2, [pc, #388]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004e96:	f043 0304 	orr.w	r3, r3, #4
 8004e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9c:	4b5f      	ldr	r3, [pc, #380]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	4a5e      	ldr	r2, [pc, #376]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea8:	e00b      	b.n	8004ec2 <HAL_RCC_OscConfig+0x322>
 8004eaa:	4b5c      	ldr	r3, [pc, #368]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	4a5b      	ldr	r2, [pc, #364]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb6:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004ebc:	f023 0304 	bic.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d015      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eca:	f7fd fd23 	bl	8002914 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fd fd1f 	bl	8002914 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e092      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	4b4c      	ldr	r3, [pc, #304]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0ee      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x332>
 8004ef4:	e014      	b.n	8004f20 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef6:	f7fd fd0d 	bl	8002914 <HAL_GetTick>
 8004efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efc:	e00a      	b.n	8004f14 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f7fd fd09 	bl	8002914 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e07c      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f14:	4b41      	ldr	r3, [pc, #260]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1ee      	bne.n	8004efe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d105      	bne.n	8004f32 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	4a3c      	ldr	r2, [pc, #240]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d068      	beq.n	800500c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d060      	beq.n	8005008 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d145      	bne.n	8004fda <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCC_OscConfig+0x480>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fcde 	bl	8002914 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd fcda 	bl	8002914 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e04f      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b2b      	ldr	r3, [pc, #172]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	071b      	lsls	r3, r3, #28
 8004fa6:	491d      	ldr	r1, [pc, #116]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_RCC_OscConfig+0x480>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fd fcaf 	bl	8002914 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fd fcab 	bl	8002914 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e020      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fcc:	4b13      	ldr	r3, [pc, #76]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x41a>
 8004fd8:	e018      	b.n	800500c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b11      	ldr	r3, [pc, #68]	; (8005020 <HAL_RCC_OscConfig+0x480>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fc98 	bl	8002914 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fd fc94 	bl	8002914 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e009      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <HAL_RCC_OscConfig+0x47c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x448>
 8005006:	e001      	b.n	800500c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40007000 	.word	0x40007000
 800501c:	40023800 	.word	0x40023800
 8005020:	42470060 	.word	0x42470060

08005024 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e022      	b.n	800507c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d105      	bne.n	800504e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7fd f8c3 	bl	80021d4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2203      	movs	r2, #3
 8005052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f814 	bl	8005084 <HAL_SD_InitCard>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e00a      	b.n	800507c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005084:	b5b0      	push	{r4, r5, r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af04      	add	r7, sp, #16
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800508c:	2300      	movs	r3, #0
 800508e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005094:	2300      	movs	r3, #0
 8005096:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80050a0:	2376      	movs	r3, #118	; 0x76
 80050a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681d      	ldr	r5, [r3, #0]
 80050a8:	466c      	mov	r4, sp
 80050aa:	f107 0314 	add.w	r3, r7, #20
 80050ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050b6:	f107 0308 	add.w	r3, r7, #8
 80050ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050bc:	4628      	mov	r0, r5
 80050be:	f001 ff2d 	bl	8006f1c <SDIO_Init>
 80050c2:	4603      	mov	r3, r0
 80050c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80050c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e031      	b.n	8005138 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80050d4:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_SD_InitCard+0xbc>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 ff65 	bl	8006fae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80050e4:	4b16      	ldr	r3, [pc, #88]	; (8005140 <HAL_SD_InitCard+0xbc>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fe80 	bl	8005df0 <SD_PowerON>
 80050f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e013      	b.n	8005138 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fd9f 	bl	8005c54 <SD_InitCard>
 8005116:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00b      	beq.n	8005136 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3728      	adds	r7, #40	; 0x28
 800513c:	46bd      	mov	sp, r7
 800513e:	bdb0      	pop	{r4, r5, r7, pc}
 8005140:	422580a0 	.word	0x422580a0

08005144 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b092      	sub	sp, #72	; 0x48
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
 8005150:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005152:	f7fd fbdf 	bl	8002914 <HAL_GetTick>
 8005156:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d107      	bne.n	8005176 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1d7      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	f040 81ca 	bne.w	8005518 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800518a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	441a      	add	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	429a      	cmp	r2, r3
 8005196:	d907      	bls.n	80051a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e1be      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2203      	movs	r2, #3
 80051ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2200      	movs	r2, #0
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d002      	beq.n	80051c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	025b      	lsls	r3, r3, #9
 80051c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 ff80 	bl	80070d4 <SDMMC_CmdBlockLength>
 80051d4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80051d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00f      	beq.n	80051fc <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a9a      	ldr	r2, [pc, #616]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 80051e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e194      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80051fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005200:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005208:	2390      	movs	r3, #144	; 0x90
 800520a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005214:	2301      	movs	r3, #1
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f107 0214 	add.w	r2, r7, #20
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f001 ff2a 	bl	800707c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d90a      	bls.n	8005244 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2202      	movs	r2, #2
 8005232:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800523a:	4618      	mov	r0, r3
 800523c:	f001 ff8e 	bl	800715c <SDMMC_CmdReadMultiBlock>
 8005240:	6478      	str	r0, [r7, #68]	; 0x44
 8005242:	e009      	b.n	8005258 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2201      	movs	r2, #1
 8005248:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005250:	4618      	mov	r0, r3
 8005252:	f001 ff61 	bl	8007118 <SDMMC_CmdReadSingleBlock>
 8005256:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525a:	2b00      	cmp	r3, #0
 800525c:	d012      	beq.n	8005284 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7a      	ldr	r2, [pc, #488]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e150      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005288:	e061      	b.n	800534e <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d03c      	beq.n	8005312 <HAL_SD_ReadBlocks+0x1ce>
 8005298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d039      	beq.n	8005312 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800529e:	2300      	movs	r3, #0
 80052a0:	643b      	str	r3, [r7, #64]	; 0x40
 80052a2:	e033      	b.n	800530c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f001 fe62 	bl	8006f72 <SDIO_ReadFIFO>
 80052ae:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	3301      	adds	r3, #1
 80052bc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	3b01      	subs	r3, #1
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	0a1b      	lsrs	r3, r3, #8
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	3301      	adds	r3, #1
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d6:	3b01      	subs	r3, #1
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	3301      	adds	r3, #1
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	3b01      	subs	r3, #1
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	0e1b      	lsrs	r3, r3, #24
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	3301      	adds	r3, #1
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005302:	3b01      	subs	r3, #1
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	3301      	adds	r3, #1
 800530a:	643b      	str	r3, [r7, #64]	; 0x40
 800530c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800530e:	2b07      	cmp	r3, #7
 8005310:	d9c8      	bls.n	80052a4 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005312:	f7fd faff 	bl	8002914 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800531e:	429a      	cmp	r2, r3
 8005320:	d902      	bls.n	8005328 <HAL_SD_ReadBlocks+0x1e4>
 8005322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005324:	2b00      	cmp	r3, #0
 8005326:	d112      	bne.n	800534e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a47      	ldr	r2, [pc, #284]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 800532e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e0eb      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005358:	2b00      	cmp	r3, #0
 800535a:	d096      	beq.n	800528a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <HAL_SD_ReadBlocks+0x26c>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d91f      	bls.n	80053b0 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	2b03      	cmp	r3, #3
 8005376:	d01b      	beq.n	80053b0 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f001 ff53 	bl	8007228 <SDMMC_CmdStopTransfer>
 8005382:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005386:	2b00      	cmp	r3, #0
 8005388:	d012      	beq.n	80053b0 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a2f      	ldr	r2, [pc, #188]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0ba      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d012      	beq.n	80053e4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a22      	ldr	r2, [pc, #136]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ca:	f043 0208 	orr.w	r2, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0a0      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d012      	beq.n	8005418 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a15      	ldr	r2, [pc, #84]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fe:	f043 0202 	orr.w	r2, r3, #2
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e086      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d063      	beq.n	80054ee <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <HAL_SD_ReadBlocks+0x308>)
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e06c      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
 800544c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fd8c 	bl	8006f72 <SDIO_ReadFIFO>
 800545a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545e:	b2da      	uxtb	r2, r3
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005466:	3301      	adds	r3, #1
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546c:	3b01      	subs	r3, #1
 800546e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	0a1b      	lsrs	r3, r3, #8
 8005474:	b2da      	uxtb	r2, r3
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	3301      	adds	r3, #1
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005482:	3b01      	subs	r3, #1
 8005484:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	b2da      	uxtb	r2, r3
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005492:	3301      	adds	r3, #1
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	3b01      	subs	r3, #1
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549e:	0e1b      	lsrs	r3, r3, #24
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	3301      	adds	r3, #1
 80054aa:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	3b01      	subs	r3, #1
 80054b0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80054b2:	f7fd fa2f 	bl	8002914 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054be:	429a      	cmp	r2, r3
 80054c0:	d902      	bls.n	80054c8 <HAL_SD_ReadBlocks+0x384>
 80054c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d112      	bne.n	80054ee <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_SD_ReadBlocks+0x3ec>)
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e01b      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SD_ReadBlocks+0x3be>
 80054fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1a6      	bne.n	8005450 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f240 523a 	movw	r2, #1338	; 0x53a
 800550a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e006      	b.n	8005526 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3748      	adds	r7, #72	; 0x48
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	004005ff 	.word	0x004005ff

08005534 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b092      	sub	sp, #72	; 0x48
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005542:	f7fd f9e7 	bl	8002914 <HAL_GetTick>
 8005546:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e182      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b01      	cmp	r3, #1
 8005570:	f040 8175 	bne.w	800585e <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800557a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	441a      	add	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005584:	429a      	cmp	r2, r3
 8005586:	d907      	bls.n	8005598 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e169      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2203      	movs	r2, #3
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2200      	movs	r2, #0
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d002      	beq.n	80055b6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	025b      	lsls	r3, r3, #9
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 fd88 	bl	80070d4 <SDMMC_CmdBlockLength>
 80055c4:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00f      	beq.n	80055ec <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a9c      	ldr	r2, [pc, #624]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055da:	431a      	orrs	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e13f      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295
 80055f0:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80055f8:	2390      	movs	r3, #144	; 0x90
 80055fa:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80055fc:	2300      	movs	r3, #0
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005600:	2300      	movs	r3, #0
 8005602:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005604:	2301      	movs	r3, #1
 8005606:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f107 0218 	add.w	r2, r7, #24
 8005610:	4611      	mov	r1, r2
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fd32 	bl	800707c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d90a      	bls.n	8005634 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fdda 	bl	80071e4 <SDMMC_CmdWriteMultiBlock>
 8005630:	6478      	str	r0, [r7, #68]	; 0x44
 8005632:	e009      	b.n	8005648 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2210      	movs	r2, #16
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fdad 	bl	80071a0 <SDMMC_CmdWriteSingleBlock>
 8005646:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564a:	2b00      	cmp	r3, #0
 800564c:	d012      	beq.n	8005674 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a7c      	ldr	r2, [pc, #496]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 8005654:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0fb      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005678:	e065      	b.n	8005746 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d040      	beq.n	800570a <HAL_SD_WriteBlocks+0x1d6>
 8005688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03d      	beq.n	800570a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800568e:	2300      	movs	r3, #0
 8005690:	643b      	str	r3, [r7, #64]	; 0x40
 8005692:	e037      	b.n	8005704 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800569a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569c:	3301      	adds	r3, #1
 800569e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a2:	3b01      	subs	r3, #1
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	021a      	lsls	r2, r3, #8
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	3301      	adds	r3, #1
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ba:	3b01      	subs	r3, #1
 80056bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	041a      	lsls	r2, r3, #16
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	3301      	adds	r3, #1
 80056ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d2:	3b01      	subs	r3, #1
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	061a      	lsls	r2, r3, #24
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	3301      	adds	r3, #1
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	3b01      	subs	r3, #1
 80056ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f107 0214 	add.w	r2, r7, #20
 80056f6:	4611      	mov	r1, r2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fc47 	bl	8006f8c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80056fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005700:	3301      	adds	r3, #1
 8005702:	643b      	str	r3, [r7, #64]	; 0x40
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	2b07      	cmp	r3, #7
 8005708:	d9c4      	bls.n	8005694 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800570a:	f7fd f903 	bl	8002914 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005716:	429a      	cmp	r2, r3
 8005718:	d902      	bls.n	8005720 <HAL_SD_WriteBlocks+0x1ec>
 800571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571c:	2b00      	cmp	r3, #0
 800571e:	d112      	bne.n	8005746 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a47      	ldr	r2, [pc, #284]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800572c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572e:	431a      	orrs	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e092      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8005750:	2b00      	cmp	r3, #0
 8005752:	d092      	beq.n	800567a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575e:	2b00      	cmp	r3, #0
 8005760:	d022      	beq.n	80057a8 <HAL_SD_WriteBlocks+0x274>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d91f      	bls.n	80057a8 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576c:	2b03      	cmp	r3, #3
 800576e:	d01b      	beq.n	80057a8 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fd57 	bl	8007228 <SDMMC_CmdStopTransfer>
 800577a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800577c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e061      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d012      	beq.n	80057dc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a22      	ldr	r2, [pc, #136]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	f043 0208 	orr.w	r2, r3, #8
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e047      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a15      	ldr	r2, [pc, #84]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f043 0202 	orr.w	r2, r3, #2
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e02d      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b00      	cmp	r3, #0
 800581c:	d014      	beq.n	8005848 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <HAL_SD_WriteBlocks+0x310>)
 8005824:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f043 0210 	orr.w	r2, r3, #16
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e013      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
 8005844:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005850:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	e006      	b.n	800586c <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005862:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
  }
}
 800586c:	4618      	mov	r0, r3
 800586e:	3748      	adds	r7, #72	; 0x48
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005882:	0f9b      	lsrs	r3, r3, #30
 8005884:	b2da      	uxtb	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588e:	0e9b      	lsrs	r3, r3, #26
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	b2da      	uxtb	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a0:	0e1b      	lsrs	r3, r3, #24
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d4:	0d1b      	lsrs	r3, r3, #20
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f2:	0bdb      	lsrs	r3, r3, #15
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005904:	0b9b      	lsrs	r3, r3, #14
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005916:	0b5b      	lsrs	r3, r3, #13
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005928:	0b1b      	lsrs	r3, r3, #12
 800592a:	b2db      	uxtb	r3, r3
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	b2da      	uxtb	r2, r3
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2200      	movs	r2, #0
 800593a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	2b00      	cmp	r3, #0
 8005942:	d163      	bne.n	8005a0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005948:	009a      	lsls	r2, r3, #2
 800594a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800594e:	4013      	ands	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005954:	0f92      	lsrs	r2, r2, #30
 8005956:	431a      	orrs	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005960:	0edb      	lsrs	r3, r3, #27
 8005962:	b2db      	uxtb	r3, r3
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	b2da      	uxtb	r2, r3
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005972:	0e1b      	lsrs	r3, r3, #24
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	b2da      	uxtb	r2, r3
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005984:	0d5b      	lsrs	r3, r3, #21
 8005986:	b2db      	uxtb	r3, r3
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	b2da      	uxtb	r2, r3
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005996:	0c9b      	lsrs	r3, r3, #18
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059a8:	0bdb      	lsrs	r3, r3, #15
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	1c5a      	adds	r2, r3, #1
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	7e1b      	ldrb	r3, [r3, #24]
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	3302      	adds	r3, #2
 80059cc:	2201      	movs	r2, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80059d6:	fb02 f203 	mul.w	r2, r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	7a1b      	ldrb	r3, [r3, #8]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	2201      	movs	r2, #1
 80059ea:	409a      	lsls	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80059f8:	0a52      	lsrs	r2, r2, #9
 80059fa:	fb02 f203 	mul.w	r2, r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a08:	661a      	str	r2, [r3, #96]	; 0x60
 8005a0a:	e031      	b.n	8005a70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d11d      	bne.n	8005a50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	431a      	orrs	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	029a      	lsls	r2, r3, #10
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a44:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	661a      	str	r2, [r3, #96]	; 0x60
 8005a4e:	e00f      	b.n	8005a70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a58      	ldr	r2, [pc, #352]	; (8005bb8 <HAL_SD_GetCardCSD+0x344>)
 8005a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e09d      	b.n	8005bac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a74:	0b9b      	lsrs	r3, r3, #14
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a86:	09db      	lsrs	r3, r3, #7
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa8:	0fdb      	lsrs	r3, r3, #31
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	0f5b      	lsrs	r3, r3, #29
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f003 0303 	and.w	r3, r3, #3
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac6:	0e9b      	lsrs	r3, r3, #26
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad8:	0d9b      	lsrs	r3, r3, #22
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aea:	0d5b      	lsrs	r3, r3, #21
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	0c1b      	lsrs	r3, r3, #16
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	0bdb      	lsrs	r3, r3, #15
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2e:	0b9b      	lsrs	r3, r3, #14
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b42:	0b5b      	lsrs	r3, r3, #13
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	0b1b      	lsrs	r3, r3, #12
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	0a9b      	lsrs	r3, r3, #10
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0303 	and.w	r3, r3, #3
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b92:	085b      	lsrs	r3, r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9a:	b2da      	uxtb	r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	004005ff 	.word	0x004005ff

08005bbc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005c20:	f107 030c 	add.w	r3, r7, #12
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f970 	bl	8005f0c <SD_SendStatus>
 8005c2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	0a5b      	lsrs	r3, r3, #9
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005c4a:	693b      	ldr	r3, [r7, #16]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c54:	b5b0      	push	{r4, r5, r7, lr}
 8005c56:	b094      	sub	sp, #80	; 0x50
 8005c58:	af04      	add	r7, sp, #16
 8005c5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 f9b1 	bl	8006fcc <SDIO_GetPowerState>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d102      	bne.n	8005c76 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c70:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c74:	e0b7      	b.n	8005de6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d02f      	beq.n	8005cde <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 fb97 	bl	80073b6 <SDMMC_CmdSendCID>
 8005c88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <SD_InitCard+0x40>
    {
      return errorstate;
 8005c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c92:	e0a8      	b.n	8005de6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 f9db 	bl	8007056 <SDIO_GetResponse>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2104      	movs	r1, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f9d2 	bl	8007056 <SDIO_GetResponse>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2108      	movs	r1, #8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f9c9 	bl	8007056 <SDIO_GetResponse>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	210c      	movs	r1, #12
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f9c0 	bl	8007056 <SDIO_GetResponse>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d00d      	beq.n	8005d02 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f107 020e 	add.w	r2, r7, #14
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fb9d 	bl	8007430 <SDMMC_CmdSetRelAdd>
 8005cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <SD_InitCard+0xae>
    {
      return errorstate;
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	e071      	b.n	8005de6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d036      	beq.n	8005d78 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d0a:	89fb      	ldrh	r3, [r7, #14]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f001 fb67 	bl	80073f2 <SDMMC_CmdSendCSD>
 8005d24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	e05a      	b.n	8005de6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 f98d 	bl	8007056 <SDIO_GetResponse>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2104      	movs	r1, #4
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f984 	bl	8007056 <SDIO_GetResponse>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2108      	movs	r1, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 f97b 	bl	8007056 <SDIO_GetResponse>
 8005d60:	4602      	mov	r2, r0
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	210c      	movs	r1, #12
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f001 f972 	bl	8007056 <SDIO_GetResponse>
 8005d72:	4602      	mov	r2, r0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f969 	bl	8007056 <SDIO_GetResponse>
 8005d84:	4603      	mov	r3, r0
 8005d86:	0d1a      	lsrs	r2, r3, #20
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fd6e 	bl	8005874 <HAL_SD_GetCardCSD>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005da2:	e020      	b.n	8005de6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6819      	ldr	r1, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	f04f 0400 	mov.w	r4, #0
 8005db2:	461a      	mov	r2, r3
 8005db4:	4623      	mov	r3, r4
 8005db6:	4608      	mov	r0, r1
 8005db8:	f001 fa58 	bl	800726c <SDMMC_CmdSelDesel>
 8005dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <SD_InitCard+0x174>
  {
    return errorstate;
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc6:	e00e      	b.n	8005de6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681d      	ldr	r5, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	466c      	mov	r4, sp
 8005dd0:	f103 0210 	add.w	r2, r3, #16
 8005dd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005dda:	3304      	adds	r3, #4
 8005ddc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005dde:	4628      	mov	r0, r5
 8005de0:	f001 f89c 	bl	8006f1c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3740      	adds	r7, #64	; 0x40
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005df0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fa52 	bl	80072b2 <SDMMC_CmdGoIdleState>
 8005e0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	e072      	b.n	8005f00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 fa65 	bl	80072ee <SDMMC_CmdOperCond>
 8005e24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00d      	beq.n	8005e48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fa3b 	bl	80072b2 <SDMMC_CmdGoIdleState>
 8005e3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d004      	beq.n	8005e4e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	e05b      	b.n	8005f00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d137      	bne.n	8005ec6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 fa65 	bl	800732c <SDMMC_CmdAppCommand>
 8005e62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02d      	beq.n	8005ec6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005e6e:	e047      	b.n	8005f00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 fa58 	bl	800732c <SDMMC_CmdAppCommand>
 8005e7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <SD_PowerON+0x98>
    {
      return errorstate;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	e03b      	b.n	8005f00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	491e      	ldr	r1, [pc, #120]	; (8005f08 <SD_PowerON+0x118>)
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fa6e 	bl	8007370 <SDMMC_CmdAppOperCommand>
 8005e94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ea0:	e02e      	b.n	8005f00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f001 f8d4 	bl	8007056 <SDIO_GetResponse>
 8005eae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	0fdb      	lsrs	r3, r3, #31
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <SD_PowerON+0xcc>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <SD_PowerON+0xce>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	613b      	str	r3, [r7, #16]

    count++;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d802      	bhi.n	8005ed6 <SD_PowerON+0xe6>
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0cc      	beq.n	8005e70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d902      	bls.n	8005ee6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ee4:	e00c      	b.n	8005f00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	645a      	str	r2, [r3, #68]	; 0x44
 8005ef6:	e002      	b.n	8005efe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	c1100000 	.word	0xc1100000

08005f0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d102      	bne.n	8005f22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005f1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f20:	e018      	b.n	8005f54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2a:	041b      	lsls	r3, r3, #16
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4610      	mov	r0, r2
 8005f30:	f001 fa9f 	bl	8007472 <SDMMC_CmdSendStatus>
 8005f34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	e009      	b.n	8005f54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f001 f885 	bl	8007056 <SDIO_GetResponse>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e056      	b.n	800601c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fc f99d 	bl	80022c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fa4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	ea42 0103 	orr.w	r1, r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	f003 0104 	and.w	r1, r3, #4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69da      	ldr	r2, [r3, #28]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800600a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006032:	2301      	movs	r3, #1
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_SPI_TransmitReceive+0x26>
 8006046:	2302      	movs	r3, #2
 8006048:	e18a      	b.n	8006360 <HAL_SPI_TransmitReceive+0x33c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006052:	f7fc fc5f 	bl	8002914 <HAL_GetTick>
 8006056:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006068:	887b      	ldrh	r3, [r7, #2]
 800606a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800606c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006070:	2b01      	cmp	r3, #1
 8006072:	d00f      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x70>
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800607a:	d107      	bne.n	800608c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d103      	bne.n	800608c <HAL_SPI_TransmitReceive+0x68>
 8006084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006088:	2b04      	cmp	r3, #4
 800608a:	d003      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800608c:	2302      	movs	r3, #2
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006092:	e15b      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x82>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_SPI_TransmitReceive+0x82>
 80060a0:	887b      	ldrh	r3, [r7, #2]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d103      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060ac:	e14e      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d003      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2205      	movs	r2, #5
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	887a      	ldrh	r2, [r7, #2]
 80060d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	887a      	ldrh	r2, [r7, #2]
 80060d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	887a      	ldrh	r2, [r7, #2]
 80060ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d007      	beq.n	8006116 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006114:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611e:	d178      	bne.n	8006212 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <HAL_SPI_TransmitReceive+0x10a>
 8006128:	8b7b      	ldrh	r3, [r7, #26]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d166      	bne.n	80061fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	881a      	ldrh	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006152:	e053      	b.n	80061fc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b02      	cmp	r3, #2
 8006160:	d11b      	bne.n	800619a <HAL_SPI_TransmitReceive+0x176>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d016      	beq.n	800619a <HAL_SPI_TransmitReceive+0x176>
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	2b01      	cmp	r3, #1
 8006170:	d113      	bne.n	800619a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	881a      	ldrh	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	1c9a      	adds	r2, r3, #2
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d119      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x1b8>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d014      	beq.n	80061dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061bc:	b292      	uxth	r2, r2
 80061be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061d8:	2301      	movs	r3, #1
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061dc:	f7fc fb9a 	bl	8002914 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d807      	bhi.n	80061fc <HAL_SPI_TransmitReceive+0x1d8>
 80061ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d003      	beq.n	80061fc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80061fa:	e0a7      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1a6      	bne.n	8006154 <HAL_SPI_TransmitReceive+0x130>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1a1      	bne.n	8006154 <HAL_SPI_TransmitReceive+0x130>
 8006210:	e07c      	b.n	800630c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x1fc>
 800621a:	8b7b      	ldrh	r3, [r7, #26]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d16b      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	330c      	adds	r3, #12
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800623c:	b29b      	uxth	r3, r3
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006246:	e057      	b.n	80062f8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d11c      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x26c>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d017      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x26c>
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d114      	bne.n	8006290 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	7812      	ldrb	r2, [r2, #0]
 8006272:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b01      	cmp	r3, #1
 800629c:	d119      	bne.n	80062d2 <HAL_SPI_TransmitReceive+0x2ae>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d014      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062ce:	2301      	movs	r3, #1
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062d2:	f7fc fb1f 	bl	8002914 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062de:	429a      	cmp	r2, r3
 80062e0:	d803      	bhi.n	80062ea <HAL_SPI_TransmitReceive+0x2c6>
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d102      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x2cc>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062f0:	2303      	movs	r3, #3
 80062f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062f6:	e029      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1a2      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x224>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d19d      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800630c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f893 	bl	800643c <SPI_EndRxTxTransaction>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d006      	beq.n	800632a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006328:	e010      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10b      	bne.n	800634a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	e000      	b.n	800634c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800634a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800635c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006360:	4618      	mov	r0, r3
 8006362:	3730      	adds	r7, #48	; 0x30
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006378:	e04c      	b.n	8006414 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d048      	beq.n	8006414 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006382:	f7fc fac7 	bl	8002914 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d902      	bls.n	8006398 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d13d      	bne.n	8006414 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063b0:	d111      	bne.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ba:	d004      	beq.n	80063c6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063c4:	d107      	bne.n	80063d6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063de:	d10f      	bne.n	8006400 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e00f      	b.n	8006434 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	4013      	ands	r3, r2
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	bf0c      	ite	eq
 8006424:	2301      	moveq	r3, #1
 8006426:	2300      	movne	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	79fb      	ldrb	r3, [r7, #7]
 800642e:	429a      	cmp	r2, r3
 8006430:	d1a3      	bne.n	800637a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006448:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <SPI_EndRxTxTransaction+0x7c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	; (80064bc <SPI_EndRxTxTransaction+0x80>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	0d5b      	lsrs	r3, r3, #21
 8006454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006466:	d112      	bne.n	800648e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2200      	movs	r2, #0
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff ff78 	bl	8006368 <SPI_WaitFlagStateUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f043 0220 	orr.w	r2, r3, #32
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00f      	b.n	80064ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3b01      	subs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d0f2      	beq.n	800648e <SPI_EndRxTxTransaction+0x52>
 80064a8:	e000      	b.n	80064ac <SPI_EndRxTxTransaction+0x70>
        break;
 80064aa:	bf00      	nop
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000000 	.word	0x20000000
 80064bc:	165e9f81 	.word	0x165e9f81

080064c0 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e034      	b.n	8006540 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7fb fffc 	bl	80024e8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3308      	adds	r3, #8
 80064f8:	4619      	mov	r1, r3
 80064fa:	4610      	mov	r0, r2
 80064fc:	f000 fc0a 	bl	8006d14 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	461a      	mov	r2, r3
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	f000 fc72 	bl	8006df4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6858      	ldr	r0, [r3, #4]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	f000 fcbd 	bl	8006e9c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6892      	ldr	r2, [r2, #8]
 800652a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	6892      	ldr	r2, [r2, #8]
 8006536:	f041 0101 	orr.w	r1, r1, #1
 800653a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e03f      	b.n	80065da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7fb ff02 	bl	8002378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2224      	movs	r2, #36	; 0x24
 8006578:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800658a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f829 	bl	80065e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68da      	ldr	r2, [r3, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006626:	f023 030c 	bic.w	r3, r3, #12
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6812      	ldr	r2, [r2, #0]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	430b      	orrs	r3, r1
 8006632:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006652:	f040 8199 	bne.w	8006988 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4ac6      	ldr	r2, [pc, #792]	; (8006974 <UART_SetConfig+0x390>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <UART_SetConfig+0x9c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4ac4      	ldr	r2, [pc, #784]	; (8006978 <UART_SetConfig+0x394>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00a      	beq.n	8006680 <UART_SetConfig+0x9c>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4ac3      	ldr	r2, [pc, #780]	; (800697c <UART_SetConfig+0x398>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d005      	beq.n	8006680 <UART_SetConfig+0x9c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4ac1      	ldr	r2, [pc, #772]	; (8006980 <UART_SetConfig+0x39c>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f040 80bd 	bne.w	80067fa <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006680:	f7fd ffee 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 8006684:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	461d      	mov	r5, r3
 800668a:	f04f 0600 	mov.w	r6, #0
 800668e:	46a8      	mov	r8, r5
 8006690:	46b1      	mov	r9, r6
 8006692:	eb18 0308 	adds.w	r3, r8, r8
 8006696:	eb49 0409 	adc.w	r4, r9, r9
 800669a:	4698      	mov	r8, r3
 800669c:	46a1      	mov	r9, r4
 800669e:	eb18 0805 	adds.w	r8, r8, r5
 80066a2:	eb49 0906 	adc.w	r9, r9, r6
 80066a6:	f04f 0100 	mov.w	r1, #0
 80066aa:	f04f 0200 	mov.w	r2, #0
 80066ae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066b2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066b6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066ba:	4688      	mov	r8, r1
 80066bc:	4691      	mov	r9, r2
 80066be:	eb18 0005 	adds.w	r0, r8, r5
 80066c2:	eb49 0106 	adc.w	r1, r9, r6
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	461d      	mov	r5, r3
 80066cc:	f04f 0600 	mov.w	r6, #0
 80066d0:	196b      	adds	r3, r5, r5
 80066d2:	eb46 0406 	adc.w	r4, r6, r6
 80066d6:	461a      	mov	r2, r3
 80066d8:	4623      	mov	r3, r4
 80066da:	f7f9 fdf9 	bl	80002d0 <__aeabi_uldivmod>
 80066de:	4603      	mov	r3, r0
 80066e0:	460c      	mov	r4, r1
 80066e2:	461a      	mov	r2, r3
 80066e4:	4ba7      	ldr	r3, [pc, #668]	; (8006984 <UART_SetConfig+0x3a0>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	461d      	mov	r5, r3
 80066f4:	f04f 0600 	mov.w	r6, #0
 80066f8:	46a9      	mov	r9, r5
 80066fa:	46b2      	mov	sl, r6
 80066fc:	eb19 0309 	adds.w	r3, r9, r9
 8006700:	eb4a 040a 	adc.w	r4, sl, sl
 8006704:	4699      	mov	r9, r3
 8006706:	46a2      	mov	sl, r4
 8006708:	eb19 0905 	adds.w	r9, r9, r5
 800670c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006710:	f04f 0100 	mov.w	r1, #0
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800671c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006720:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006724:	4689      	mov	r9, r1
 8006726:	4692      	mov	sl, r2
 8006728:	eb19 0005 	adds.w	r0, r9, r5
 800672c:	eb4a 0106 	adc.w	r1, sl, r6
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	461d      	mov	r5, r3
 8006736:	f04f 0600 	mov.w	r6, #0
 800673a:	196b      	adds	r3, r5, r5
 800673c:	eb46 0406 	adc.w	r4, r6, r6
 8006740:	461a      	mov	r2, r3
 8006742:	4623      	mov	r3, r4
 8006744:	f7f9 fdc4 	bl	80002d0 <__aeabi_uldivmod>
 8006748:	4603      	mov	r3, r0
 800674a:	460c      	mov	r4, r1
 800674c:	461a      	mov	r2, r3
 800674e:	4b8d      	ldr	r3, [pc, #564]	; (8006984 <UART_SetConfig+0x3a0>)
 8006750:	fba3 1302 	umull	r1, r3, r3, r2
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	2164      	movs	r1, #100	; 0x64
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	3332      	adds	r3, #50	; 0x32
 8006762:	4a88      	ldr	r2, [pc, #544]	; (8006984 <UART_SetConfig+0x3a0>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006770:	4498      	add	r8, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	461d      	mov	r5, r3
 8006776:	f04f 0600 	mov.w	r6, #0
 800677a:	46a9      	mov	r9, r5
 800677c:	46b2      	mov	sl, r6
 800677e:	eb19 0309 	adds.w	r3, r9, r9
 8006782:	eb4a 040a 	adc.w	r4, sl, sl
 8006786:	4699      	mov	r9, r3
 8006788:	46a2      	mov	sl, r4
 800678a:	eb19 0905 	adds.w	r9, r9, r5
 800678e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a6:	4689      	mov	r9, r1
 80067a8:	4692      	mov	sl, r2
 80067aa:	eb19 0005 	adds.w	r0, r9, r5
 80067ae:	eb4a 0106 	adc.w	r1, sl, r6
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	461d      	mov	r5, r3
 80067b8:	f04f 0600 	mov.w	r6, #0
 80067bc:	196b      	adds	r3, r5, r5
 80067be:	eb46 0406 	adc.w	r4, r6, r6
 80067c2:	461a      	mov	r2, r3
 80067c4:	4623      	mov	r3, r4
 80067c6:	f7f9 fd83 	bl	80002d0 <__aeabi_uldivmod>
 80067ca:	4603      	mov	r3, r0
 80067cc:	460c      	mov	r4, r1
 80067ce:	461a      	mov	r2, r3
 80067d0:	4b6c      	ldr	r3, [pc, #432]	; (8006984 <UART_SetConfig+0x3a0>)
 80067d2:	fba3 1302 	umull	r1, r3, r3, r2
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	2164      	movs	r1, #100	; 0x64
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	3332      	adds	r3, #50	; 0x32
 80067e4:	4a67      	ldr	r2, [pc, #412]	; (8006984 <UART_SetConfig+0x3a0>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	f003 0207 	and.w	r2, r3, #7
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4442      	add	r2, r8
 80067f6:	609a      	str	r2, [r3, #8]
 80067f8:	e27d      	b.n	8006cf6 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80067fa:	f7fd ff1d 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 80067fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	461d      	mov	r5, r3
 8006804:	f04f 0600 	mov.w	r6, #0
 8006808:	46a8      	mov	r8, r5
 800680a:	46b1      	mov	r9, r6
 800680c:	eb18 0308 	adds.w	r3, r8, r8
 8006810:	eb49 0409 	adc.w	r4, r9, r9
 8006814:	4698      	mov	r8, r3
 8006816:	46a1      	mov	r9, r4
 8006818:	eb18 0805 	adds.w	r8, r8, r5
 800681c:	eb49 0906 	adc.w	r9, r9, r6
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800682c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006830:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006834:	4688      	mov	r8, r1
 8006836:	4691      	mov	r9, r2
 8006838:	eb18 0005 	adds.w	r0, r8, r5
 800683c:	eb49 0106 	adc.w	r1, r9, r6
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	461d      	mov	r5, r3
 8006846:	f04f 0600 	mov.w	r6, #0
 800684a:	196b      	adds	r3, r5, r5
 800684c:	eb46 0406 	adc.w	r4, r6, r6
 8006850:	461a      	mov	r2, r3
 8006852:	4623      	mov	r3, r4
 8006854:	f7f9 fd3c 	bl	80002d0 <__aeabi_uldivmod>
 8006858:	4603      	mov	r3, r0
 800685a:	460c      	mov	r4, r1
 800685c:	461a      	mov	r2, r3
 800685e:	4b49      	ldr	r3, [pc, #292]	; (8006984 <UART_SetConfig+0x3a0>)
 8006860:	fba3 2302 	umull	r2, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	461d      	mov	r5, r3
 800686e:	f04f 0600 	mov.w	r6, #0
 8006872:	46a9      	mov	r9, r5
 8006874:	46b2      	mov	sl, r6
 8006876:	eb19 0309 	adds.w	r3, r9, r9
 800687a:	eb4a 040a 	adc.w	r4, sl, sl
 800687e:	4699      	mov	r9, r3
 8006880:	46a2      	mov	sl, r4
 8006882:	eb19 0905 	adds.w	r9, r9, r5
 8006886:	eb4a 0a06 	adc.w	sl, sl, r6
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	f04f 0200 	mov.w	r2, #0
 8006892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006896:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800689a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800689e:	4689      	mov	r9, r1
 80068a0:	4692      	mov	sl, r2
 80068a2:	eb19 0005 	adds.w	r0, r9, r5
 80068a6:	eb4a 0106 	adc.w	r1, sl, r6
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	461d      	mov	r5, r3
 80068b0:	f04f 0600 	mov.w	r6, #0
 80068b4:	196b      	adds	r3, r5, r5
 80068b6:	eb46 0406 	adc.w	r4, r6, r6
 80068ba:	461a      	mov	r2, r3
 80068bc:	4623      	mov	r3, r4
 80068be:	f7f9 fd07 	bl	80002d0 <__aeabi_uldivmod>
 80068c2:	4603      	mov	r3, r0
 80068c4:	460c      	mov	r4, r1
 80068c6:	461a      	mov	r2, r3
 80068c8:	4b2e      	ldr	r3, [pc, #184]	; (8006984 <UART_SetConfig+0x3a0>)
 80068ca:	fba3 1302 	umull	r1, r3, r3, r2
 80068ce:	095b      	lsrs	r3, r3, #5
 80068d0:	2164      	movs	r1, #100	; 0x64
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	00db      	lsls	r3, r3, #3
 80068da:	3332      	adds	r3, #50	; 0x32
 80068dc:	4a29      	ldr	r2, [pc, #164]	; (8006984 <UART_SetConfig+0x3a0>)
 80068de:	fba2 2303 	umull	r2, r3, r2, r3
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ea:	4498      	add	r8, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	461d      	mov	r5, r3
 80068f0:	f04f 0600 	mov.w	r6, #0
 80068f4:	46a9      	mov	r9, r5
 80068f6:	46b2      	mov	sl, r6
 80068f8:	eb19 0309 	adds.w	r3, r9, r9
 80068fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006900:	4699      	mov	r9, r3
 8006902:	46a2      	mov	sl, r4
 8006904:	eb19 0905 	adds.w	r9, r9, r5
 8006908:	eb4a 0a06 	adc.w	sl, sl, r6
 800690c:	f04f 0100 	mov.w	r1, #0
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006918:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006920:	4689      	mov	r9, r1
 8006922:	4692      	mov	sl, r2
 8006924:	eb19 0005 	adds.w	r0, r9, r5
 8006928:	eb4a 0106 	adc.w	r1, sl, r6
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	461d      	mov	r5, r3
 8006932:	f04f 0600 	mov.w	r6, #0
 8006936:	196b      	adds	r3, r5, r5
 8006938:	eb46 0406 	adc.w	r4, r6, r6
 800693c:	461a      	mov	r2, r3
 800693e:	4623      	mov	r3, r4
 8006940:	f7f9 fcc6 	bl	80002d0 <__aeabi_uldivmod>
 8006944:	4603      	mov	r3, r0
 8006946:	460c      	mov	r4, r1
 8006948:	461a      	mov	r2, r3
 800694a:	4b0e      	ldr	r3, [pc, #56]	; (8006984 <UART_SetConfig+0x3a0>)
 800694c:	fba3 1302 	umull	r1, r3, r3, r2
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	2164      	movs	r1, #100	; 0x64
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	3332      	adds	r3, #50	; 0x32
 800695e:	4a09      	ldr	r2, [pc, #36]	; (8006984 <UART_SetConfig+0x3a0>)
 8006960:	fba2 2303 	umull	r2, r3, r2, r3
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	f003 0207 	and.w	r2, r3, #7
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4442      	add	r2, r8
 8006970:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006972:	e1c0      	b.n	8006cf6 <UART_SetConfig+0x712>
 8006974:	40011000 	.word	0x40011000
 8006978:	40011400 	.word	0x40011400
 800697c:	40011800 	.word	0x40011800
 8006980:	40011c00 	.word	0x40011c00
 8006984:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4adc      	ldr	r2, [pc, #880]	; (8006d00 <UART_SetConfig+0x71c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00f      	beq.n	80069b2 <UART_SetConfig+0x3ce>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4adb      	ldr	r2, [pc, #876]	; (8006d04 <UART_SetConfig+0x720>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00a      	beq.n	80069b2 <UART_SetConfig+0x3ce>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4ad9      	ldr	r2, [pc, #868]	; (8006d08 <UART_SetConfig+0x724>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d005      	beq.n	80069b2 <UART_SetConfig+0x3ce>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4ad8      	ldr	r2, [pc, #864]	; (8006d0c <UART_SetConfig+0x728>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	f040 80d1 	bne.w	8006b54 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069b2:	f7fd fe55 	bl	8004660 <HAL_RCC_GetPCLK2Freq>
 80069b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	469a      	mov	sl, r3
 80069bc:	f04f 0b00 	mov.w	fp, #0
 80069c0:	46d0      	mov	r8, sl
 80069c2:	46d9      	mov	r9, fp
 80069c4:	eb18 0308 	adds.w	r3, r8, r8
 80069c8:	eb49 0409 	adc.w	r4, r9, r9
 80069cc:	4698      	mov	r8, r3
 80069ce:	46a1      	mov	r9, r4
 80069d0:	eb18 080a 	adds.w	r8, r8, sl
 80069d4:	eb49 090b 	adc.w	r9, r9, fp
 80069d8:	f04f 0100 	mov.w	r1, #0
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069ec:	4688      	mov	r8, r1
 80069ee:	4691      	mov	r9, r2
 80069f0:	eb1a 0508 	adds.w	r5, sl, r8
 80069f4:	eb4b 0609 	adc.w	r6, fp, r9
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4619      	mov	r1, r3
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	f04f 0400 	mov.w	r4, #0
 8006a0a:	0094      	lsls	r4, r2, #2
 8006a0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a10:	008b      	lsls	r3, r1, #2
 8006a12:	461a      	mov	r2, r3
 8006a14:	4623      	mov	r3, r4
 8006a16:	4628      	mov	r0, r5
 8006a18:	4631      	mov	r1, r6
 8006a1a:	f7f9 fc59 	bl	80002d0 <__aeabi_uldivmod>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	460c      	mov	r4, r1
 8006a22:	461a      	mov	r2, r3
 8006a24:	4bba      	ldr	r3, [pc, #744]	; (8006d10 <UART_SetConfig+0x72c>)
 8006a26:	fba3 2302 	umull	r2, r3, r3, r2
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	469b      	mov	fp, r3
 8006a34:	f04f 0c00 	mov.w	ip, #0
 8006a38:	46d9      	mov	r9, fp
 8006a3a:	46e2      	mov	sl, ip
 8006a3c:	eb19 0309 	adds.w	r3, r9, r9
 8006a40:	eb4a 040a 	adc.w	r4, sl, sl
 8006a44:	4699      	mov	r9, r3
 8006a46:	46a2      	mov	sl, r4
 8006a48:	eb19 090b 	adds.w	r9, r9, fp
 8006a4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a64:	4689      	mov	r9, r1
 8006a66:	4692      	mov	sl, r2
 8006a68:	eb1b 0509 	adds.w	r5, fp, r9
 8006a6c:	eb4c 060a 	adc.w	r6, ip, sl
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	4619      	mov	r1, r3
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	f04f 0300 	mov.w	r3, #0
 8006a7e:	f04f 0400 	mov.w	r4, #0
 8006a82:	0094      	lsls	r4, r2, #2
 8006a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a88:	008b      	lsls	r3, r1, #2
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	4623      	mov	r3, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	4631      	mov	r1, r6
 8006a92:	f7f9 fc1d 	bl	80002d0 <__aeabi_uldivmod>
 8006a96:	4603      	mov	r3, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	4b9c      	ldr	r3, [pc, #624]	; (8006d10 <UART_SetConfig+0x72c>)
 8006a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa2:	095b      	lsrs	r3, r3, #5
 8006aa4:	2164      	movs	r1, #100	; 0x64
 8006aa6:	fb01 f303 	mul.w	r3, r1, r3
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	3332      	adds	r3, #50	; 0x32
 8006ab0:	4a97      	ldr	r2, [pc, #604]	; (8006d10 <UART_SetConfig+0x72c>)
 8006ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006abc:	4498      	add	r8, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	469b      	mov	fp, r3
 8006ac2:	f04f 0c00 	mov.w	ip, #0
 8006ac6:	46d9      	mov	r9, fp
 8006ac8:	46e2      	mov	sl, ip
 8006aca:	eb19 0309 	adds.w	r3, r9, r9
 8006ace:	eb4a 040a 	adc.w	r4, sl, sl
 8006ad2:	4699      	mov	r9, r3
 8006ad4:	46a2      	mov	sl, r4
 8006ad6:	eb19 090b 	adds.w	r9, r9, fp
 8006ada:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ade:	f04f 0100 	mov.w	r1, #0
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006af2:	4689      	mov	r9, r1
 8006af4:	4692      	mov	sl, r2
 8006af6:	eb1b 0509 	adds.w	r5, fp, r9
 8006afa:	eb4c 060a 	adc.w	r6, ip, sl
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	f04f 0400 	mov.w	r4, #0
 8006b10:	0094      	lsls	r4, r2, #2
 8006b12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b16:	008b      	lsls	r3, r1, #2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4623      	mov	r3, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	4631      	mov	r1, r6
 8006b20:	f7f9 fbd6 	bl	80002d0 <__aeabi_uldivmod>
 8006b24:	4603      	mov	r3, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4b79      	ldr	r3, [pc, #484]	; (8006d10 <UART_SetConfig+0x72c>)
 8006b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b30:	095b      	lsrs	r3, r3, #5
 8006b32:	2164      	movs	r1, #100	; 0x64
 8006b34:	fb01 f303 	mul.w	r3, r1, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	011b      	lsls	r3, r3, #4
 8006b3c:	3332      	adds	r3, #50	; 0x32
 8006b3e:	4a74      	ldr	r2, [pc, #464]	; (8006d10 <UART_SetConfig+0x72c>)
 8006b40:	fba2 2303 	umull	r2, r3, r2, r3
 8006b44:	095b      	lsrs	r3, r3, #5
 8006b46:	f003 020f 	and.w	r2, r3, #15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4442      	add	r2, r8
 8006b50:	609a      	str	r2, [r3, #8]
 8006b52:	e0d0      	b.n	8006cf6 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fd fd70 	bl	8004638 <HAL_RCC_GetPCLK1Freq>
 8006b58:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	469a      	mov	sl, r3
 8006b5e:	f04f 0b00 	mov.w	fp, #0
 8006b62:	46d0      	mov	r8, sl
 8006b64:	46d9      	mov	r9, fp
 8006b66:	eb18 0308 	adds.w	r3, r8, r8
 8006b6a:	eb49 0409 	adc.w	r4, r9, r9
 8006b6e:	4698      	mov	r8, r3
 8006b70:	46a1      	mov	r9, r4
 8006b72:	eb18 080a 	adds.w	r8, r8, sl
 8006b76:	eb49 090b 	adc.w	r9, r9, fp
 8006b7a:	f04f 0100 	mov.w	r1, #0
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b86:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b8a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b8e:	4688      	mov	r8, r1
 8006b90:	4691      	mov	r9, r2
 8006b92:	eb1a 0508 	adds.w	r5, sl, r8
 8006b96:	eb4b 0609 	adc.w	r6, fp, r9
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	f04f 0200 	mov.w	r2, #0
 8006ba4:	f04f 0300 	mov.w	r3, #0
 8006ba8:	f04f 0400 	mov.w	r4, #0
 8006bac:	0094      	lsls	r4, r2, #2
 8006bae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bb2:	008b      	lsls	r3, r1, #2
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	4628      	mov	r0, r5
 8006bba:	4631      	mov	r1, r6
 8006bbc:	f7f9 fb88 	bl	80002d0 <__aeabi_uldivmod>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	4b52      	ldr	r3, [pc, #328]	; (8006d10 <UART_SetConfig+0x72c>)
 8006bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	469b      	mov	fp, r3
 8006bd6:	f04f 0c00 	mov.w	ip, #0
 8006bda:	46d9      	mov	r9, fp
 8006bdc:	46e2      	mov	sl, ip
 8006bde:	eb19 0309 	adds.w	r3, r9, r9
 8006be2:	eb4a 040a 	adc.w	r4, sl, sl
 8006be6:	4699      	mov	r9, r3
 8006be8:	46a2      	mov	sl, r4
 8006bea:	eb19 090b 	adds.w	r9, r9, fp
 8006bee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bf2:	f04f 0100 	mov.w	r1, #0
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c06:	4689      	mov	r9, r1
 8006c08:	4692      	mov	sl, r2
 8006c0a:	eb1b 0509 	adds.w	r5, fp, r9
 8006c0e:	eb4c 060a 	adc.w	r6, ip, sl
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	4619      	mov	r1, r3
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	f04f 0300 	mov.w	r3, #0
 8006c20:	f04f 0400 	mov.w	r4, #0
 8006c24:	0094      	lsls	r4, r2, #2
 8006c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c2a:	008b      	lsls	r3, r1, #2
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4623      	mov	r3, r4
 8006c30:	4628      	mov	r0, r5
 8006c32:	4631      	mov	r1, r6
 8006c34:	f7f9 fb4c 	bl	80002d0 <__aeabi_uldivmod>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	460c      	mov	r4, r1
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b34      	ldr	r3, [pc, #208]	; (8006d10 <UART_SetConfig+0x72c>)
 8006c40:	fba3 1302 	umull	r1, r3, r3, r2
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	2164      	movs	r1, #100	; 0x64
 8006c48:	fb01 f303 	mul.w	r3, r1, r3
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	3332      	adds	r3, #50	; 0x32
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <UART_SetConfig+0x72c>)
 8006c54:	fba2 2303 	umull	r2, r3, r2, r3
 8006c58:	095b      	lsrs	r3, r3, #5
 8006c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c5e:	4498      	add	r8, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	469b      	mov	fp, r3
 8006c64:	f04f 0c00 	mov.w	ip, #0
 8006c68:	46d9      	mov	r9, fp
 8006c6a:	46e2      	mov	sl, ip
 8006c6c:	eb19 0309 	adds.w	r3, r9, r9
 8006c70:	eb4a 040a 	adc.w	r4, sl, sl
 8006c74:	4699      	mov	r9, r3
 8006c76:	46a2      	mov	sl, r4
 8006c78:	eb19 090b 	adds.w	r9, r9, fp
 8006c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c80:	f04f 0100 	mov.w	r1, #0
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c94:	4689      	mov	r9, r1
 8006c96:	4692      	mov	sl, r2
 8006c98:	eb1b 0509 	adds.w	r5, fp, r9
 8006c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	f04f 0400 	mov.w	r4, #0
 8006cb2:	0094      	lsls	r4, r2, #2
 8006cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cb8:	008b      	lsls	r3, r1, #2
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4623      	mov	r3, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	4631      	mov	r1, r6
 8006cc2:	f7f9 fb05 	bl	80002d0 <__aeabi_uldivmod>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	460c      	mov	r4, r1
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b10      	ldr	r3, [pc, #64]	; (8006d10 <UART_SetConfig+0x72c>)
 8006cce:	fba3 1302 	umull	r1, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	2164      	movs	r1, #100	; 0x64
 8006cd6:	fb01 f303 	mul.w	r3, r1, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	3332      	adds	r3, #50	; 0x32
 8006ce0:	4a0b      	ldr	r2, [pc, #44]	; (8006d10 <UART_SetConfig+0x72c>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4442      	add	r2, r8
 8006cf2:	609a      	str	r2, [r3, #8]
}
 8006cf4:	e7ff      	b.n	8006cf6 <UART_SetConfig+0x712>
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	40011000 	.word	0x40011000
 8006d04:	40011400 	.word	0x40011400
 8006d08:	40011800 	.word	0x40011800
 8006d0c:	40011c00 	.word	0x40011c00
 8006d10:	51eb851f 	.word	0x51eb851f

08006d14 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <FSMC_NORSRAM_Init+0xdc>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d3e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006d44:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006d4a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006d50:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8006d56:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006d5c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006d62:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006d68:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006d6e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8006d74:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8006d7a:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8006d80:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8006d86:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d103      	bne.n	8006d9e <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006db2:	d10a      	bne.n	8006dca <FSMC_NORSRAM_Init+0xb6>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d006      	beq.n	8006dca <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d006      	beq.n	8006de0 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	ffc00480 	.word	0xffc00480

08006df4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e16:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e22:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006e2a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006e32:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006e3c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	3b02      	subs	r3, #2
 8006e44:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006e46:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6979      	ldr	r1, [r7, #20]
 8006e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6c:	d10e      	bne.n	8006e8c <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e76:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	051b      	lsls	r3, r3, #20
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
	...

08006e9c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	d122      	bne.n	8006efc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006ed2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006eda:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006ee2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006ee8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6979      	ldr	r1, [r7, #20]
 8006ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006efa:	e005      	b.n	8006f08 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	cff00000 	.word	0xcff00000

08006f1c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006f1c:	b084      	sub	sp, #16
 8006f1e:	b480      	push	{r7}
 8006f20:	b085      	sub	sp, #20
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	f107 001c 	add.w	r0, r7, #28
 8006f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006f32:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006f34:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006f36:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006f3a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006f3e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006f42:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006f46:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	b004      	add	sp, #16
 8006f70:	4770      	bx	lr

08006f72 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2203      	movs	r2, #3
 8006fba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006fbc:	2002      	movs	r0, #2
 8006fbe:	f7fb fcb5 	bl	800292c <HAL_Delay>
  
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007006:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800700c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007012:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007022:	f023 030f 	bic.w	r3, r3, #15
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	b2db      	uxtb	r3, r3
}
 800704a:	4618      	mov	r0, r3
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3314      	adds	r3, #20
 8007064:	461a      	mov	r2, r3
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	4413      	add	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
}  
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007086:	2300      	movs	r3, #0
 8007088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80070a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80070a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80070ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0

}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80070e2:	2310      	movs	r3, #16
 80070e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070e6:	2340      	movs	r3, #64	; 0x40
 80070e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070f4:	f107 0308 	add.w	r3, r7, #8
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ff74 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007100:	f241 3288 	movw	r2, #5000	; 0x1388
 8007104:	2110      	movs	r1, #16
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9fe 	bl	8007508 <SDMMC_GetCmdResp1>
 800710c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007126:	2311      	movs	r3, #17
 8007128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff ff52 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	2111      	movs	r1, #17
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f9dc 	bl	8007508 <SDMMC_GetCmdResp1>
 8007150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007152:	69fb      	ldr	r3, [r7, #28]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800716a:	2312      	movs	r3, #18
 800716c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800717c:	f107 0308 	add.w	r3, r7, #8
 8007180:	4619      	mov	r1, r3
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff30 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007188:	f241 3288 	movw	r2, #5000	; 0x1388
 800718c:	2112      	movs	r1, #18
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f9ba 	bl	8007508 <SDMMC_GetCmdResp1>
 8007194:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007196:	69fb      	ldr	r3, [r7, #28]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80071ae:	2318      	movs	r3, #24
 80071b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071b2:	2340      	movs	r3, #64	; 0x40
 80071b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071b6:	2300      	movs	r3, #0
 80071b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071c0:	f107 0308 	add.w	r3, r7, #8
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff ff0e 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80071cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d0:	2118      	movs	r1, #24
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f998 	bl	8007508 <SDMMC_GetCmdResp1>
 80071d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071da:	69fb      	ldr	r3, [r7, #28]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80071f2:	2319      	movs	r3, #25
 80071f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071f6:	2340      	movs	r3, #64	; 0x40
 80071f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071fa:	2300      	movs	r3, #0
 80071fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	4619      	mov	r1, r3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff feec 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007210:	f241 3288 	movw	r2, #5000	; 0x1388
 8007214:	2119      	movs	r1, #25
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f976 	bl	8007508 <SDMMC_GetCmdResp1>
 800721c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800721e:	69fb      	ldr	r3, [r7, #28]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b088      	sub	sp, #32
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007230:	2300      	movs	r3, #0
 8007232:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007234:	230c      	movs	r3, #12
 8007236:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007244:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007246:	f107 0308 	add.w	r3, r7, #8
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fecb 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007252:	4a05      	ldr	r2, [pc, #20]	; (8007268 <SDMMC_CmdStopTransfer+0x40>)
 8007254:	210c      	movs	r1, #12
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f956 	bl	8007508 <SDMMC_GetCmdResp1>
 800725c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800725e:	69fb      	ldr	r3, [r7, #28]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	05f5e100 	.word	0x05f5e100

0800726c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08a      	sub	sp, #40	; 0x28
 8007270:	af00      	add	r7, sp, #0
 8007272:	60f8      	str	r0, [r7, #12]
 8007274:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800727c:	2307      	movs	r3, #7
 800727e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007280:	2340      	movs	r3, #64	; 0x40
 8007282:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800728c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800728e:	f107 0310 	add.w	r3, r7, #16
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fea7 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800729a:	f241 3288 	movw	r2, #5000	; 0x1388
 800729e:	2107      	movs	r1, #7
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f931 	bl	8007508 <SDMMC_GetCmdResp1>
 80072a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b088      	sub	sp, #32
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80072c2:	2300      	movs	r3, #0
 80072c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fe86 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8eb 	bl	80074b8 <SDMMC_GetCmdError>
 80072e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072e4:	69fb      	ldr	r3, [r7, #28]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3720      	adds	r7, #32
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b088      	sub	sp, #32
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80072f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80072fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80072fc:	2308      	movs	r3, #8
 80072fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007300:	2340      	movs	r3, #64	; 0x40
 8007302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007304:	2300      	movs	r3, #0
 8007306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800730c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7ff fe67 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fad4 	bl	80078c8 <SDMMC_GetCmdResp7>
 8007320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007322:	69fb      	ldr	r3, [r7, #28]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3720      	adds	r7, #32
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800733a:	2337      	movs	r3, #55	; 0x37
 800733c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007342:	2300      	movs	r3, #0
 8007344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800734c:	f107 0308 	add.w	r3, r7, #8
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fe48 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007358:	f241 3288 	movw	r2, #5000	; 0x1388
 800735c:	2137      	movs	r1, #55	; 0x37
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8d2 	bl	8007508 <SDMMC_GetCmdResp1>
 8007364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007366:	69fb      	ldr	r3, [r7, #28]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007386:	2329      	movs	r3, #41	; 0x29
 8007388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007398:	f107 0308 	add.w	r3, r7, #8
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff fe22 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f9e1 	bl	800776c <SDMMC_GetCmdResp3>
 80073aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ac:	69fb      	ldr	r3, [r7, #28]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3720      	adds	r7, #32
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b088      	sub	sp, #32
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80073c2:	2302      	movs	r3, #2
 80073c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80073c6:	23c0      	movs	r3, #192	; 0xc0
 80073c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073d4:	f107 0308 	add.w	r3, r7, #8
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fe04 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f97d 	bl	80076e0 <SDMMC_GetCmdResp2>
 80073e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073e8:	69fb      	ldr	r3, [r7, #28]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b088      	sub	sp, #32
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007400:	2309      	movs	r3, #9
 8007402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007404:	23c0      	movs	r3, #192	; 0xc0
 8007406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007408:	2300      	movs	r3, #0
 800740a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800740c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007410:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007412:	f107 0308 	add.w	r3, r7, #8
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff fde5 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f95e 	bl	80076e0 <SDMMC_GetCmdResp2>
 8007424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007426:	69fb      	ldr	r3, [r7, #28]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3720      	adds	r7, #32
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800743e:	2303      	movs	r3, #3
 8007440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007442:	2340      	movs	r3, #64	; 0x40
 8007444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800744a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800744e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007450:	f107 0308 	add.w	r3, r7, #8
 8007454:	4619      	mov	r1, r3
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f7ff fdc6 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	2103      	movs	r1, #3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f9bd 	bl	80077e0 <SDMMC_GetCmdResp6>
 8007466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007468:	69fb      	ldr	r3, [r7, #28]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b088      	sub	sp, #32
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007480:	230d      	movs	r3, #13
 8007482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007488:	2300      	movs	r3, #0
 800748a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800748c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007490:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007492:	f107 0308 	add.w	r3, r7, #8
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff fda5 	bl	8006fe8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800749e:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a2:	210d      	movs	r1, #13
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f82f 	bl	8007508 <SDMMC_GetCmdResp1>
 80074aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074ac:	69fb      	ldr	r3, [r7, #28]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80074b8:	b490      	push	{r4, r7}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <SDMMC_GetCmdError+0x48>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a0f      	ldr	r2, [pc, #60]	; (8007504 <SDMMC_GetCmdError+0x4c>)
 80074c6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ca:	0a5b      	lsrs	r3, r3, #9
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80074d4:	4623      	mov	r3, r4
 80074d6:	1e5c      	subs	r4, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e0:	e009      	b.n	80074f6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f2      	beq.n	80074d4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	22c5      	movs	r2, #197	; 0xc5
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc90      	pop	{r4, r7}
 80074fe:	4770      	bx	lr
 8007500:	20000000 	.word	0x20000000
 8007504:	10624dd3 	.word	0x10624dd3

08007508 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007508:	b590      	push	{r4, r7, lr}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	60f8      	str	r0, [r7, #12]
 8007510:	460b      	mov	r3, r1
 8007512:	607a      	str	r2, [r7, #4]
 8007514:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007516:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <SDMMC_GetCmdResp1+0x1cc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a6f      	ldr	r2, [pc, #444]	; (80076d8 <SDMMC_GetCmdResp1+0x1d0>)
 800751c:	fba2 2303 	umull	r2, r3, r2, r3
 8007520:	0a5b      	lsrs	r3, r3, #9
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007528:	4623      	mov	r3, r4
 800752a:	1e5c      	subs	r4, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007534:	e0c9      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800753a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <SDMMC_GetCmdResp1+0x20>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1eb      	bne.n	8007528 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2204      	movs	r2, #4
 8007560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007562:	2304      	movs	r3, #4
 8007564:	e0b1      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d004      	beq.n	800757c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2201      	movs	r2, #1
 8007576:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007578:	2301      	movs	r3, #1
 800757a:	e0a6      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	22c5      	movs	r2, #197	; 0xc5
 8007580:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fd5a 	bl	800703c <SDIO_GetCommandResponse>
 8007588:	4603      	mov	r3, r0
 800758a:	461a      	mov	r2, r3
 800758c:	7afb      	ldrb	r3, [r7, #11]
 800758e:	4293      	cmp	r3, r2
 8007590:	d001      	beq.n	8007596 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007592:	2301      	movs	r3, #1
 8007594:	e099      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007596:	2100      	movs	r1, #0
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f7ff fd5c 	bl	8007056 <SDIO_GetResponse>
 800759e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4b4e      	ldr	r3, [pc, #312]	; (80076dc <SDMMC_GetCmdResp1+0x1d4>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e08d      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da02      	bge.n	80075ba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80075b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075b8:	e087      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80075c4:	2340      	movs	r3, #64	; 0x40
 80075c6:	e080      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80075d2:	2380      	movs	r3, #128	; 0x80
 80075d4:	e079      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80075e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075e4:	e071      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80075f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075f4:	e069      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007604:	e061      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007614:	e059      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007624:	e051      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007634:	e049      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007644:	e041      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8007650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007654:	e039      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007664:	e031      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007674:	e029      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007680:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007684:	e021      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007694:	e019      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80076a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80076a4:	e011      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80076b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80076b4:	e009      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80076c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80076c4:	e001      	b.n	80076ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80076c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd90      	pop	{r4, r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000000 	.word	0x20000000
 80076d8:	10624dd3 	.word	0x10624dd3
 80076dc:	fdffe008 	.word	0xfdffe008

080076e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80076e0:	b490      	push	{r4, r7}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80076e8:	4b1e      	ldr	r3, [pc, #120]	; (8007764 <SDMMC_GetCmdResp2+0x84>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a1e      	ldr	r2, [pc, #120]	; (8007768 <SDMMC_GetCmdResp2+0x88>)
 80076ee:	fba2 2303 	umull	r2, r3, r2, r3
 80076f2:	0a5b      	lsrs	r3, r3, #9
 80076f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80076fc:	4623      	mov	r3, r4
 80076fe:	1e5c      	subs	r4, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007708:	e026      	b.n	8007758 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <SDMMC_GetCmdResp2+0x1c>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1eb      	bne.n	80076fc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2204      	movs	r2, #4
 8007734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007736:	2304      	movs	r3, #4
 8007738:	e00e      	b.n	8007758 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773e:	f003 0301 	and.w	r3, r3, #1
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800774c:	2301      	movs	r3, #1
 800774e:	e003      	b.n	8007758 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	22c5      	movs	r2, #197	; 0xc5
 8007754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bc90      	pop	{r4, r7}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	20000000 	.word	0x20000000
 8007768:	10624dd3 	.word	0x10624dd3

0800776c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800776c:	b490      	push	{r4, r7}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <SDMMC_GetCmdResp3+0x6c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <SDMMC_GetCmdResp3+0x70>)
 800777a:	fba2 2303 	umull	r2, r3, r2, r3
 800777e:	0a5b      	lsrs	r3, r3, #9
 8007780:	f241 3288 	movw	r2, #5000	; 0x1388
 8007784:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007788:	4623      	mov	r3, r4
 800778a:	1e5c      	subs	r4, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007790:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007794:	e01b      	b.n	80077ce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800779a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0f0      	beq.n	8007788 <SDMMC_GetCmdResp3+0x1c>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1eb      	bne.n	8007788 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2204      	movs	r2, #4
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077c2:	2304      	movs	r3, #4
 80077c4:	e003      	b.n	80077ce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	22c5      	movs	r2, #197	; 0xc5
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc90      	pop	{r4, r7}
 80077d6:	4770      	bx	lr
 80077d8:	20000000 	.word	0x20000000
 80077dc:	10624dd3 	.word	0x10624dd3

080077e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80077e0:	b590      	push	{r4, r7, lr}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	460b      	mov	r3, r1
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80077ee:	4b34      	ldr	r3, [pc, #208]	; (80078c0 <SDMMC_GetCmdResp6+0xe0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a34      	ldr	r2, [pc, #208]	; (80078c4 <SDMMC_GetCmdResp6+0xe4>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077fe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007802:	4623      	mov	r3, r4
 8007804:	1e5c      	subs	r4, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800780a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800780e:	e052      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <SDMMC_GetCmdResp6+0x22>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1eb      	bne.n	8007802 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	f003 0304 	and.w	r3, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2204      	movs	r2, #4
 800783a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800783c:	2304      	movs	r3, #4
 800783e:	e03a      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d004      	beq.n	8007856 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2201      	movs	r2, #1
 8007850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007852:	2301      	movs	r3, #1
 8007854:	e02f      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f7ff fbf0 	bl	800703c <SDIO_GetCommandResponse>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	4293      	cmp	r3, r2
 8007864:	d001      	beq.n	800786a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007866:	2301      	movs	r3, #1
 8007868:	e025      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22c5      	movs	r2, #197	; 0xc5
 800786e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007870:	2100      	movs	r1, #0
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff fbef 	bl	8007056 <SDIO_GetResponse>
 8007878:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d106      	bne.n	8007892 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	0c1b      	lsrs	r3, r3, #16
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800788e:	2300      	movs	r3, #0
 8007890:	e011      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800789c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078a0:	e009      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078b0:	e001      	b.n	80078b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000000 	.word	0x20000000
 80078c4:	10624dd3 	.word	0x10624dd3

080078c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80078c8:	b490      	push	{r4, r7}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078d0:	4b21      	ldr	r3, [pc, #132]	; (8007958 <SDMMC_GetCmdResp7+0x90>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a21      	ldr	r2, [pc, #132]	; (800795c <SDMMC_GetCmdResp7+0x94>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	0a5b      	lsrs	r3, r3, #9
 80078dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80078e4:	4623      	mov	r3, r4
 80078e6:	1e5c      	subs	r4, r3, #1
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078f0:	e02c      	b.n	800794c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0f0      	beq.n	80078e4 <SDMMC_GetCmdResp7+0x1c>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1eb      	bne.n	80078e4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d004      	beq.n	8007922 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2204      	movs	r2, #4
 800791c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800791e:	2304      	movs	r3, #4
 8007920:	e014      	b.n	800794c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d004      	beq.n	8007938 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007934:	2301      	movs	r3, #1
 8007936:	e009      	b.n	800794c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2240      	movs	r2, #64	; 0x40
 8007948:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800794a:	2300      	movs	r3, #0
  
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bc90      	pop	{r4, r7}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	20000000 	.word	0x20000000
 800795c:	10624dd3 	.word	0x10624dd3

08007960 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007964:	4904      	ldr	r1, [pc, #16]	; (8007978 <MX_FATFS_Init+0x18>)
 8007966:	4805      	ldr	r0, [pc, #20]	; (800797c <MX_FATFS_Init+0x1c>)
 8007968:	f000 f9d6 	bl	8007d18 <FATFS_LinkDriver>
 800796c:	4603      	mov	r3, r0
 800796e:	461a      	mov	r2, r3
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <MX_FATFS_Init+0x20>)
 8007972:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007974:	bf00      	nop
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20006530 	.word	0x20006530
 800797c:	0800939c 	.word	0x0800939c
 8007980:	2000652c 	.word	0x2000652c

08007984 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800798e:	f000 f86b 	bl	8007a68 <BSP_SD_IsDetected>
 8007992:	4603      	mov	r3, r0
 8007994:	2b01      	cmp	r3, #1
 8007996:	d001      	beq.n	800799c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e005      	b.n	80079a8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800799c:	4804      	ldr	r0, [pc, #16]	; (80079b0 <BSP_SD_Init+0x2c>)
 800799e:	f7fd fb41 	bl	8005024 <HAL_SD_Init>
 80079a2:	4603      	mov	r3, r0
 80079a4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80079a6:	79fb      	ldrb	r3, [r7, #7]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20004be0 	.word	0x20004be0

080079b4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b088      	sub	sp, #32
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68f9      	ldr	r1, [r7, #12]
 80079d0:	4806      	ldr	r0, [pc, #24]	; (80079ec <BSP_SD_ReadBlocks+0x38>)
 80079d2:	f7fd fbb7 	bl	8005144 <HAL_SD_ReadBlocks>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20004be0 	.word	0x20004be0

080079f0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	4806      	ldr	r0, [pc, #24]	; (8007a28 <BSP_SD_WriteBlocks+0x38>)
 8007a0e:	f7fd fd91 	bl	8005534 <HAL_SD_WriteBlocks>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20004be0 	.word	0x20004be0

08007a2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a30:	4805      	ldr	r0, [pc, #20]	; (8007a48 <BSP_SD_GetCardState+0x1c>)
 8007a32:	f7fe f8ef 	bl	8005c14 <HAL_SD_GetCardState>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b04      	cmp	r3, #4
 8007a3a:	bf14      	ite	ne
 8007a3c:	2301      	movne	r3, #1
 8007a3e:	2300      	moveq	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20004be0 	.word	0x20004be0

08007a4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b082      	sub	sp, #8
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4803      	ldr	r0, [pc, #12]	; (8007a64 <BSP_SD_GetCardInfo+0x18>)
 8007a58:	f7fe f8b0 	bl	8005bbc <HAL_SD_GetCardInfo>
}
 8007a5c:	bf00      	nop
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20004be0 	.word	0x20004be0

08007a68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007a72:	f000 f80b 	bl	8007a8c <BSP_PlatformIsDetected>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d101      	bne.n	8007a80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007a80:	79fb      	ldrb	r3, [r7, #7]
 8007a82:	b2db      	uxtb	r3, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007a92:	2301      	movs	r3, #1
 8007a94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a9a:	4806      	ldr	r0, [pc, #24]	; (8007ab4 <BSP_PlatformIsDetected+0x28>)
 8007a9c:	f7fc fb34 	bl	8004108 <HAL_GPIO_ReadPin>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40021400 	.word	0x40021400

08007ab8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <SD_CheckStatus+0x38>)
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007ac8:	f7ff ffb0 	bl	8007a2c <BSP_SD_GetCardState>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d107      	bne.n	8007ae2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ad2:	4b07      	ldr	r3, [pc, #28]	; (8007af0 <SD_CheckStatus+0x38>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	f023 0301 	bic.w	r3, r3, #1
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <SD_CheckStatus+0x38>)
 8007ae0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007ae2:	4b03      	ldr	r3, [pc, #12]	; (8007af0 <SD_CheckStatus+0x38>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b2db      	uxtb	r3, r3
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20000009 	.word	0x20000009

08007af4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <SD_initialize+0x38>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007b04:	f7ff ff3e 	bl	8007984 <BSP_SD_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d107      	bne.n	8007b1e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7ff ffd1 	bl	8007ab8 <SD_CheckStatus>
 8007b16:	4603      	mov	r3, r0
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4b04      	ldr	r3, [pc, #16]	; (8007b2c <SD_initialize+0x38>)
 8007b1c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007b1e:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <SD_initialize+0x38>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b2db      	uxtb	r3, r3
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000009 	.word	0x20000009

08007b30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff ffbb 	bl	8007ab8 <SD_CheckStatus>
 8007b42:	4603      	mov	r3, r0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	68b8      	ldr	r0, [r7, #8]
 8007b6a:	f7ff ff23 	bl	80079b4 <BSP_SD_ReadBlocks>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d107      	bne.n	8007b84 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8007b74:	bf00      	nop
 8007b76:	f7ff ff59 	bl	8007a2c <BSP_SD_GetCardState>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1fa      	bne.n	8007b76 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b086      	sub	sp, #24
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8007ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	f7ff ff20 	bl	80079f0 <BSP_SD_WriteBlocks>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d107      	bne.n	8007bc6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8007bb6:	bf00      	nop
 8007bb8:	f7ff ff38 	bl	8007a2c <BSP_SD_GetCardState>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1fa      	bne.n	8007bb8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08c      	sub	sp, #48	; 0x30
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	603a      	str	r2, [r7, #0]
 8007bda:	71fb      	strb	r3, [r7, #7]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007be6:	4b25      	ldr	r3, [pc, #148]	; (8007c7c <SD_ioctl+0xac>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <SD_ioctl+0x28>
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e03c      	b.n	8007c72 <SD_ioctl+0xa2>

  switch (cmd)
 8007bf8:	79bb      	ldrb	r3, [r7, #6]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	d834      	bhi.n	8007c68 <SD_ioctl+0x98>
 8007bfe:	a201      	add	r2, pc, #4	; (adr r2, 8007c04 <SD_ioctl+0x34>)
 8007c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c04:	08007c15 	.word	0x08007c15
 8007c08:	08007c1d 	.word	0x08007c1d
 8007c0c:	08007c35 	.word	0x08007c35
 8007c10:	08007c4f 	.word	0x08007c4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c1a:	e028      	b.n	8007c6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c1c:	f107 030c 	add.w	r3, r7, #12
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff ff13 	bl	8007a4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c32:	e01c      	b.n	8007c6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c34:	f107 030c 	add.w	r3, r7, #12
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff07 	bl	8007a4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c4c:	e00f      	b.n	8007c6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff fefa 	bl	8007a4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	0a5a      	lsrs	r2, r3, #9
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007c66:	e002      	b.n	8007c6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007c68:	2304      	movs	r3, #4
 8007c6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3730      	adds	r7, #48	; 0x30
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000009 	.word	0x20000009

08007c80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b087      	sub	sp, #28
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007c96:	4b1f      	ldr	r3, [pc, #124]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007c98:	7a5b      	ldrb	r3, [r3, #9]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d131      	bne.n	8007d04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ca0:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007ca2:	7a5b      	ldrb	r3, [r3, #9]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007caa:	2100      	movs	r1, #0
 8007cac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cb0:	7a5b      	ldrb	r3, [r3, #9]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cc0:	7a5b      	ldrb	r3, [r3, #9]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cc8:	4413      	add	r3, r2
 8007cca:	79fa      	ldrb	r2, [r7, #7]
 8007ccc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cd0:	7a5b      	ldrb	r3, [r3, #9]
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	1c5a      	adds	r2, r3, #1
 8007cd6:	b2d1      	uxtb	r1, r2
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <FATFS_LinkDriverEx+0x94>)
 8007cda:	7251      	strb	r1, [r2, #9]
 8007cdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cde:	7dbb      	ldrb	r3, [r7, #22]
 8007ce0:	3330      	adds	r3, #48	; 0x30
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	3301      	adds	r3, #1
 8007cec:	223a      	movs	r2, #58	; 0x3a
 8007cee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	3302      	adds	r3, #2
 8007cf4:	222f      	movs	r2, #47	; 0x2f
 8007cf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	3303      	adds	r3, #3
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20000fe8 	.word	0x20000fe8

08007d18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d22:	2200      	movs	r2, #0
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7ff ffaa 	bl	8007c80 <FATFS_LinkDriverEx>
 8007d2c:	4603      	mov	r3, r0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <__errno>:
 8007d38:	4b01      	ldr	r3, [pc, #4]	; (8007d40 <__errno+0x8>)
 8007d3a:	6818      	ldr	r0, [r3, #0]
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	2000000c 	.word	0x2000000c

08007d44 <__libc_init_array>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	4e0d      	ldr	r6, [pc, #52]	; (8007d7c <__libc_init_array+0x38>)
 8007d48:	4c0d      	ldr	r4, [pc, #52]	; (8007d80 <__libc_init_array+0x3c>)
 8007d4a:	1ba4      	subs	r4, r4, r6
 8007d4c:	10a4      	asrs	r4, r4, #2
 8007d4e:	2500      	movs	r5, #0
 8007d50:	42a5      	cmp	r5, r4
 8007d52:	d109      	bne.n	8007d68 <__libc_init_array+0x24>
 8007d54:	4e0b      	ldr	r6, [pc, #44]	; (8007d84 <__libc_init_array+0x40>)
 8007d56:	4c0c      	ldr	r4, [pc, #48]	; (8007d88 <__libc_init_array+0x44>)
 8007d58:	f001 f958 	bl	800900c <_init>
 8007d5c:	1ba4      	subs	r4, r4, r6
 8007d5e:	10a4      	asrs	r4, r4, #2
 8007d60:	2500      	movs	r5, #0
 8007d62:	42a5      	cmp	r5, r4
 8007d64:	d105      	bne.n	8007d72 <__libc_init_array+0x2e>
 8007d66:	bd70      	pop	{r4, r5, r6, pc}
 8007d68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d6c:	4798      	blx	r3
 8007d6e:	3501      	adds	r5, #1
 8007d70:	e7ee      	b.n	8007d50 <__libc_init_array+0xc>
 8007d72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d76:	4798      	blx	r3
 8007d78:	3501      	adds	r5, #1
 8007d7a:	e7f2      	b.n	8007d62 <__libc_init_array+0x1e>
 8007d7c:	08009450 	.word	0x08009450
 8007d80:	08009450 	.word	0x08009450
 8007d84:	08009450 	.word	0x08009450
 8007d88:	08009454 	.word	0x08009454

08007d8c <memcpy>:
 8007d8c:	b510      	push	{r4, lr}
 8007d8e:	1e43      	subs	r3, r0, #1
 8007d90:	440a      	add	r2, r1
 8007d92:	4291      	cmp	r1, r2
 8007d94:	d100      	bne.n	8007d98 <memcpy+0xc>
 8007d96:	bd10      	pop	{r4, pc}
 8007d98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007da0:	e7f7      	b.n	8007d92 <memcpy+0x6>

08007da2 <memset>:
 8007da2:	4402      	add	r2, r0
 8007da4:	4603      	mov	r3, r0
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d100      	bne.n	8007dac <memset+0xa>
 8007daa:	4770      	bx	lr
 8007dac:	f803 1b01 	strb.w	r1, [r3], #1
 8007db0:	e7f9      	b.n	8007da6 <memset+0x4>
	...

08007db4 <_free_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4605      	mov	r5, r0
 8007db8:	2900      	cmp	r1, #0
 8007dba:	d045      	beq.n	8007e48 <_free_r+0x94>
 8007dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dc0:	1f0c      	subs	r4, r1, #4
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	bfb8      	it	lt
 8007dc6:	18e4      	addlt	r4, r4, r3
 8007dc8:	f000 fc10 	bl	80085ec <__malloc_lock>
 8007dcc:	4a1f      	ldr	r2, [pc, #124]	; (8007e4c <_free_r+0x98>)
 8007dce:	6813      	ldr	r3, [r2, #0]
 8007dd0:	4610      	mov	r0, r2
 8007dd2:	b933      	cbnz	r3, 8007de2 <_free_r+0x2e>
 8007dd4:	6063      	str	r3, [r4, #4]
 8007dd6:	6014      	str	r4, [r2, #0]
 8007dd8:	4628      	mov	r0, r5
 8007dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dde:	f000 bc06 	b.w	80085ee <__malloc_unlock>
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	d90c      	bls.n	8007e00 <_free_r+0x4c>
 8007de6:	6821      	ldr	r1, [r4, #0]
 8007de8:	1862      	adds	r2, r4, r1
 8007dea:	4293      	cmp	r3, r2
 8007dec:	bf04      	itt	eq
 8007dee:	681a      	ldreq	r2, [r3, #0]
 8007df0:	685b      	ldreq	r3, [r3, #4]
 8007df2:	6063      	str	r3, [r4, #4]
 8007df4:	bf04      	itt	eq
 8007df6:	1852      	addeq	r2, r2, r1
 8007df8:	6022      	streq	r2, [r4, #0]
 8007dfa:	6004      	str	r4, [r0, #0]
 8007dfc:	e7ec      	b.n	8007dd8 <_free_r+0x24>
 8007dfe:	4613      	mov	r3, r2
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	b10a      	cbz	r2, 8007e08 <_free_r+0x54>
 8007e04:	42a2      	cmp	r2, r4
 8007e06:	d9fa      	bls.n	8007dfe <_free_r+0x4a>
 8007e08:	6819      	ldr	r1, [r3, #0]
 8007e0a:	1858      	adds	r0, r3, r1
 8007e0c:	42a0      	cmp	r0, r4
 8007e0e:	d10b      	bne.n	8007e28 <_free_r+0x74>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	4401      	add	r1, r0
 8007e14:	1858      	adds	r0, r3, r1
 8007e16:	4282      	cmp	r2, r0
 8007e18:	6019      	str	r1, [r3, #0]
 8007e1a:	d1dd      	bne.n	8007dd8 <_free_r+0x24>
 8007e1c:	6810      	ldr	r0, [r2, #0]
 8007e1e:	6852      	ldr	r2, [r2, #4]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	4401      	add	r1, r0
 8007e24:	6019      	str	r1, [r3, #0]
 8007e26:	e7d7      	b.n	8007dd8 <_free_r+0x24>
 8007e28:	d902      	bls.n	8007e30 <_free_r+0x7c>
 8007e2a:	230c      	movs	r3, #12
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	e7d3      	b.n	8007dd8 <_free_r+0x24>
 8007e30:	6820      	ldr	r0, [r4, #0]
 8007e32:	1821      	adds	r1, r4, r0
 8007e34:	428a      	cmp	r2, r1
 8007e36:	bf04      	itt	eq
 8007e38:	6811      	ldreq	r1, [r2, #0]
 8007e3a:	6852      	ldreq	r2, [r2, #4]
 8007e3c:	6062      	str	r2, [r4, #4]
 8007e3e:	bf04      	itt	eq
 8007e40:	1809      	addeq	r1, r1, r0
 8007e42:	6021      	streq	r1, [r4, #0]
 8007e44:	605c      	str	r4, [r3, #4]
 8007e46:	e7c7      	b.n	8007dd8 <_free_r+0x24>
 8007e48:	bd38      	pop	{r3, r4, r5, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20000ff4 	.word	0x20000ff4

08007e50 <_malloc_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	1ccd      	adds	r5, r1, #3
 8007e54:	f025 0503 	bic.w	r5, r5, #3
 8007e58:	3508      	adds	r5, #8
 8007e5a:	2d0c      	cmp	r5, #12
 8007e5c:	bf38      	it	cc
 8007e5e:	250c      	movcc	r5, #12
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	4606      	mov	r6, r0
 8007e64:	db01      	blt.n	8007e6a <_malloc_r+0x1a>
 8007e66:	42a9      	cmp	r1, r5
 8007e68:	d903      	bls.n	8007e72 <_malloc_r+0x22>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	bd70      	pop	{r4, r5, r6, pc}
 8007e72:	f000 fbbb 	bl	80085ec <__malloc_lock>
 8007e76:	4a21      	ldr	r2, [pc, #132]	; (8007efc <_malloc_r+0xac>)
 8007e78:	6814      	ldr	r4, [r2, #0]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	b991      	cbnz	r1, 8007ea4 <_malloc_r+0x54>
 8007e7e:	4c20      	ldr	r4, [pc, #128]	; (8007f00 <_malloc_r+0xb0>)
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	b91b      	cbnz	r3, 8007e8c <_malloc_r+0x3c>
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f8b9 	bl	8007ffc <_sbrk_r>
 8007e8a:	6020      	str	r0, [r4, #0]
 8007e8c:	4629      	mov	r1, r5
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f8b4 	bl	8007ffc <_sbrk_r>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d124      	bne.n	8007ee2 <_malloc_r+0x92>
 8007e98:	230c      	movs	r3, #12
 8007e9a:	6033      	str	r3, [r6, #0]
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f000 fba6 	bl	80085ee <__malloc_unlock>
 8007ea2:	e7e4      	b.n	8007e6e <_malloc_r+0x1e>
 8007ea4:	680b      	ldr	r3, [r1, #0]
 8007ea6:	1b5b      	subs	r3, r3, r5
 8007ea8:	d418      	bmi.n	8007edc <_malloc_r+0x8c>
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d90f      	bls.n	8007ece <_malloc_r+0x7e>
 8007eae:	600b      	str	r3, [r1, #0]
 8007eb0:	50cd      	str	r5, [r1, r3]
 8007eb2:	18cc      	adds	r4, r1, r3
 8007eb4:	4630      	mov	r0, r6
 8007eb6:	f000 fb9a 	bl	80085ee <__malloc_unlock>
 8007eba:	f104 000b 	add.w	r0, r4, #11
 8007ebe:	1d23      	adds	r3, r4, #4
 8007ec0:	f020 0007 	bic.w	r0, r0, #7
 8007ec4:	1ac3      	subs	r3, r0, r3
 8007ec6:	d0d3      	beq.n	8007e70 <_malloc_r+0x20>
 8007ec8:	425a      	negs	r2, r3
 8007eca:	50e2      	str	r2, [r4, r3]
 8007ecc:	e7d0      	b.n	8007e70 <_malloc_r+0x20>
 8007ece:	428c      	cmp	r4, r1
 8007ed0:	684b      	ldr	r3, [r1, #4]
 8007ed2:	bf16      	itet	ne
 8007ed4:	6063      	strne	r3, [r4, #4]
 8007ed6:	6013      	streq	r3, [r2, #0]
 8007ed8:	460c      	movne	r4, r1
 8007eda:	e7eb      	b.n	8007eb4 <_malloc_r+0x64>
 8007edc:	460c      	mov	r4, r1
 8007ede:	6849      	ldr	r1, [r1, #4]
 8007ee0:	e7cc      	b.n	8007e7c <_malloc_r+0x2c>
 8007ee2:	1cc4      	adds	r4, r0, #3
 8007ee4:	f024 0403 	bic.w	r4, r4, #3
 8007ee8:	42a0      	cmp	r0, r4
 8007eea:	d005      	beq.n	8007ef8 <_malloc_r+0xa8>
 8007eec:	1a21      	subs	r1, r4, r0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f000 f884 	bl	8007ffc <_sbrk_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d0cf      	beq.n	8007e98 <_malloc_r+0x48>
 8007ef8:	6025      	str	r5, [r4, #0]
 8007efa:	e7db      	b.n	8007eb4 <_malloc_r+0x64>
 8007efc:	20000ff4 	.word	0x20000ff4
 8007f00:	20000ff8 	.word	0x20000ff8

08007f04 <iprintf>:
 8007f04:	b40f      	push	{r0, r1, r2, r3}
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <iprintf+0x2c>)
 8007f08:	b513      	push	{r0, r1, r4, lr}
 8007f0a:	681c      	ldr	r4, [r3, #0]
 8007f0c:	b124      	cbz	r4, 8007f18 <iprintf+0x14>
 8007f0e:	69a3      	ldr	r3, [r4, #24]
 8007f10:	b913      	cbnz	r3, 8007f18 <iprintf+0x14>
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fa7c 	bl	8008410 <__sinit>
 8007f18:	ab05      	add	r3, sp, #20
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	68a1      	ldr	r1, [r4, #8]
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fce1 	bl	80088e8 <_vfiprintf_r>
 8007f26:	b002      	add	sp, #8
 8007f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f2c:	b004      	add	sp, #16
 8007f2e:	4770      	bx	lr
 8007f30:	2000000c 	.word	0x2000000c

08007f34 <_puts_r>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	460e      	mov	r6, r1
 8007f38:	4605      	mov	r5, r0
 8007f3a:	b118      	cbz	r0, 8007f44 <_puts_r+0x10>
 8007f3c:	6983      	ldr	r3, [r0, #24]
 8007f3e:	b90b      	cbnz	r3, 8007f44 <_puts_r+0x10>
 8007f40:	f000 fa66 	bl	8008410 <__sinit>
 8007f44:	69ab      	ldr	r3, [r5, #24]
 8007f46:	68ac      	ldr	r4, [r5, #8]
 8007f48:	b913      	cbnz	r3, 8007f50 <_puts_r+0x1c>
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f000 fa60 	bl	8008410 <__sinit>
 8007f50:	4b23      	ldr	r3, [pc, #140]	; (8007fe0 <_puts_r+0xac>)
 8007f52:	429c      	cmp	r4, r3
 8007f54:	d117      	bne.n	8007f86 <_puts_r+0x52>
 8007f56:	686c      	ldr	r4, [r5, #4]
 8007f58:	89a3      	ldrh	r3, [r4, #12]
 8007f5a:	071b      	lsls	r3, r3, #28
 8007f5c:	d51d      	bpl.n	8007f9a <_puts_r+0x66>
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	b1db      	cbz	r3, 8007f9a <_puts_r+0x66>
 8007f62:	3e01      	subs	r6, #1
 8007f64:	68a3      	ldr	r3, [r4, #8]
 8007f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	b9e9      	cbnz	r1, 8007fac <_puts_r+0x78>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	da2e      	bge.n	8007fd2 <_puts_r+0x9e>
 8007f74:	4622      	mov	r2, r4
 8007f76:	210a      	movs	r1, #10
 8007f78:	4628      	mov	r0, r5
 8007f7a:	f000 f899 	bl	80080b0 <__swbuf_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	d011      	beq.n	8007fa6 <_puts_r+0x72>
 8007f82:	200a      	movs	r0, #10
 8007f84:	e011      	b.n	8007faa <_puts_r+0x76>
 8007f86:	4b17      	ldr	r3, [pc, #92]	; (8007fe4 <_puts_r+0xb0>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	d101      	bne.n	8007f90 <_puts_r+0x5c>
 8007f8c:	68ac      	ldr	r4, [r5, #8]
 8007f8e:	e7e3      	b.n	8007f58 <_puts_r+0x24>
 8007f90:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <_puts_r+0xb4>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	bf08      	it	eq
 8007f96:	68ec      	ldreq	r4, [r5, #12]
 8007f98:	e7de      	b.n	8007f58 <_puts_r+0x24>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 f8d9 	bl	8008154 <__swsetup_r>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d0dd      	beq.n	8007f62 <_puts_r+0x2e>
 8007fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da04      	bge.n	8007fba <_puts_r+0x86>
 8007fb0:	69a2      	ldr	r2, [r4, #24]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	dc06      	bgt.n	8007fc4 <_puts_r+0x90>
 8007fb6:	290a      	cmp	r1, #10
 8007fb8:	d004      	beq.n	8007fc4 <_puts_r+0x90>
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	6022      	str	r2, [r4, #0]
 8007fc0:	7019      	strb	r1, [r3, #0]
 8007fc2:	e7cf      	b.n	8007f64 <_puts_r+0x30>
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	f000 f872 	bl	80080b0 <__swbuf_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d1c9      	bne.n	8007f64 <_puts_r+0x30>
 8007fd0:	e7e9      	b.n	8007fa6 <_puts_r+0x72>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	200a      	movs	r0, #10
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	7018      	strb	r0, [r3, #0]
 8007fdc:	e7e5      	b.n	8007faa <_puts_r+0x76>
 8007fde:	bf00      	nop
 8007fe0:	080093d4 	.word	0x080093d4
 8007fe4:	080093f4 	.word	0x080093f4
 8007fe8:	080093b4 	.word	0x080093b4

08007fec <puts>:
 8007fec:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <puts+0xc>)
 8007fee:	4601      	mov	r1, r0
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	f7ff bf9f 	b.w	8007f34 <_puts_r>
 8007ff6:	bf00      	nop
 8007ff8:	2000000c 	.word	0x2000000c

08007ffc <_sbrk_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4c06      	ldr	r4, [pc, #24]	; (8008018 <_sbrk_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4605      	mov	r5, r0
 8008004:	4608      	mov	r0, r1
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	f7fa fb44 	bl	8002694 <_sbrk>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_sbrk_r+0x1a>
 8008010:	6823      	ldr	r3, [r4, #0]
 8008012:	b103      	cbz	r3, 8008016 <_sbrk_r+0x1a>
 8008014:	602b      	str	r3, [r5, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	2000859c 	.word	0x2000859c

0800801c <siprintf>:
 800801c:	b40e      	push	{r1, r2, r3}
 800801e:	b500      	push	{lr}
 8008020:	b09c      	sub	sp, #112	; 0x70
 8008022:	ab1d      	add	r3, sp, #116	; 0x74
 8008024:	9002      	str	r0, [sp, #8]
 8008026:	9006      	str	r0, [sp, #24]
 8008028:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800802c:	4809      	ldr	r0, [pc, #36]	; (8008054 <siprintf+0x38>)
 800802e:	9107      	str	r1, [sp, #28]
 8008030:	9104      	str	r1, [sp, #16]
 8008032:	4909      	ldr	r1, [pc, #36]	; (8008058 <siprintf+0x3c>)
 8008034:	f853 2b04 	ldr.w	r2, [r3], #4
 8008038:	9105      	str	r1, [sp, #20]
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	9301      	str	r3, [sp, #4]
 800803e:	a902      	add	r1, sp, #8
 8008040:	f000 fb30 	bl	80086a4 <_svfiprintf_r>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	b01c      	add	sp, #112	; 0x70
 800804c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008050:	b003      	add	sp, #12
 8008052:	4770      	bx	lr
 8008054:	2000000c 	.word	0x2000000c
 8008058:	ffff0208 	.word	0xffff0208

0800805c <strcat>:
 800805c:	b510      	push	{r4, lr}
 800805e:	4603      	mov	r3, r0
 8008060:	781a      	ldrb	r2, [r3, #0]
 8008062:	1c5c      	adds	r4, r3, #1
 8008064:	b93a      	cbnz	r2, 8008076 <strcat+0x1a>
 8008066:	3b01      	subs	r3, #1
 8008068:	f811 2b01 	ldrb.w	r2, [r1], #1
 800806c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008070:	2a00      	cmp	r2, #0
 8008072:	d1f9      	bne.n	8008068 <strcat+0xc>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	4623      	mov	r3, r4
 8008078:	e7f2      	b.n	8008060 <strcat+0x4>

0800807a <strstr>:
 800807a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807c:	7803      	ldrb	r3, [r0, #0]
 800807e:	b17b      	cbz	r3, 80080a0 <strstr+0x26>
 8008080:	4604      	mov	r4, r0
 8008082:	7823      	ldrb	r3, [r4, #0]
 8008084:	4620      	mov	r0, r4
 8008086:	1c66      	adds	r6, r4, #1
 8008088:	b17b      	cbz	r3, 80080aa <strstr+0x30>
 800808a:	1e4a      	subs	r2, r1, #1
 800808c:	1e63      	subs	r3, r4, #1
 800808e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8008092:	b14d      	cbz	r5, 80080a8 <strstr+0x2e>
 8008094:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8008098:	42af      	cmp	r7, r5
 800809a:	4634      	mov	r4, r6
 800809c:	d0f7      	beq.n	800808e <strstr+0x14>
 800809e:	e7f0      	b.n	8008082 <strstr+0x8>
 80080a0:	780b      	ldrb	r3, [r1, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bf18      	it	ne
 80080a6:	2000      	movne	r0, #0
 80080a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080aa:	4618      	mov	r0, r3
 80080ac:	e7fc      	b.n	80080a8 <strstr+0x2e>
	...

080080b0 <__swbuf_r>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	460e      	mov	r6, r1
 80080b4:	4614      	mov	r4, r2
 80080b6:	4605      	mov	r5, r0
 80080b8:	b118      	cbz	r0, 80080c2 <__swbuf_r+0x12>
 80080ba:	6983      	ldr	r3, [r0, #24]
 80080bc:	b90b      	cbnz	r3, 80080c2 <__swbuf_r+0x12>
 80080be:	f000 f9a7 	bl	8008410 <__sinit>
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <__swbuf_r+0x98>)
 80080c4:	429c      	cmp	r4, r3
 80080c6:	d12a      	bne.n	800811e <__swbuf_r+0x6e>
 80080c8:	686c      	ldr	r4, [r5, #4]
 80080ca:	69a3      	ldr	r3, [r4, #24]
 80080cc:	60a3      	str	r3, [r4, #8]
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	071a      	lsls	r2, r3, #28
 80080d2:	d52e      	bpl.n	8008132 <__swbuf_r+0x82>
 80080d4:	6923      	ldr	r3, [r4, #16]
 80080d6:	b363      	cbz	r3, 8008132 <__swbuf_r+0x82>
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	6820      	ldr	r0, [r4, #0]
 80080dc:	1ac0      	subs	r0, r0, r3
 80080de:	6963      	ldr	r3, [r4, #20]
 80080e0:	b2f6      	uxtb	r6, r6
 80080e2:	4283      	cmp	r3, r0
 80080e4:	4637      	mov	r7, r6
 80080e6:	dc04      	bgt.n	80080f2 <__swbuf_r+0x42>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f926 	bl	800833c <_fflush_r>
 80080f0:	bb28      	cbnz	r0, 800813e <__swbuf_r+0x8e>
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	1c5a      	adds	r2, r3, #1
 80080fc:	6022      	str	r2, [r4, #0]
 80080fe:	701e      	strb	r6, [r3, #0]
 8008100:	6963      	ldr	r3, [r4, #20]
 8008102:	3001      	adds	r0, #1
 8008104:	4283      	cmp	r3, r0
 8008106:	d004      	beq.n	8008112 <__swbuf_r+0x62>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	07db      	lsls	r3, r3, #31
 800810c:	d519      	bpl.n	8008142 <__swbuf_r+0x92>
 800810e:	2e0a      	cmp	r6, #10
 8008110:	d117      	bne.n	8008142 <__swbuf_r+0x92>
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	f000 f911 	bl	800833c <_fflush_r>
 800811a:	b190      	cbz	r0, 8008142 <__swbuf_r+0x92>
 800811c:	e00f      	b.n	800813e <__swbuf_r+0x8e>
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <__swbuf_r+0x9c>)
 8008120:	429c      	cmp	r4, r3
 8008122:	d101      	bne.n	8008128 <__swbuf_r+0x78>
 8008124:	68ac      	ldr	r4, [r5, #8]
 8008126:	e7d0      	b.n	80080ca <__swbuf_r+0x1a>
 8008128:	4b09      	ldr	r3, [pc, #36]	; (8008150 <__swbuf_r+0xa0>)
 800812a:	429c      	cmp	r4, r3
 800812c:	bf08      	it	eq
 800812e:	68ec      	ldreq	r4, [r5, #12]
 8008130:	e7cb      	b.n	80080ca <__swbuf_r+0x1a>
 8008132:	4621      	mov	r1, r4
 8008134:	4628      	mov	r0, r5
 8008136:	f000 f80d 	bl	8008154 <__swsetup_r>
 800813a:	2800      	cmp	r0, #0
 800813c:	d0cc      	beq.n	80080d8 <__swbuf_r+0x28>
 800813e:	f04f 37ff 	mov.w	r7, #4294967295
 8008142:	4638      	mov	r0, r7
 8008144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008146:	bf00      	nop
 8008148:	080093d4 	.word	0x080093d4
 800814c:	080093f4 	.word	0x080093f4
 8008150:	080093b4 	.word	0x080093b4

08008154 <__swsetup_r>:
 8008154:	4b32      	ldr	r3, [pc, #200]	; (8008220 <__swsetup_r+0xcc>)
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	681d      	ldr	r5, [r3, #0]
 800815a:	4606      	mov	r6, r0
 800815c:	460c      	mov	r4, r1
 800815e:	b125      	cbz	r5, 800816a <__swsetup_r+0x16>
 8008160:	69ab      	ldr	r3, [r5, #24]
 8008162:	b913      	cbnz	r3, 800816a <__swsetup_r+0x16>
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f953 	bl	8008410 <__sinit>
 800816a:	4b2e      	ldr	r3, [pc, #184]	; (8008224 <__swsetup_r+0xd0>)
 800816c:	429c      	cmp	r4, r3
 800816e:	d10f      	bne.n	8008190 <__swsetup_r+0x3c>
 8008170:	686c      	ldr	r4, [r5, #4]
 8008172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008176:	b29a      	uxth	r2, r3
 8008178:	0715      	lsls	r5, r2, #28
 800817a:	d42c      	bmi.n	80081d6 <__swsetup_r+0x82>
 800817c:	06d0      	lsls	r0, r2, #27
 800817e:	d411      	bmi.n	80081a4 <__swsetup_r+0x50>
 8008180:	2209      	movs	r2, #9
 8008182:	6032      	str	r2, [r6, #0]
 8008184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	f04f 30ff 	mov.w	r0, #4294967295
 800818e:	e03e      	b.n	800820e <__swsetup_r+0xba>
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <__swsetup_r+0xd4>)
 8008192:	429c      	cmp	r4, r3
 8008194:	d101      	bne.n	800819a <__swsetup_r+0x46>
 8008196:	68ac      	ldr	r4, [r5, #8]
 8008198:	e7eb      	b.n	8008172 <__swsetup_r+0x1e>
 800819a:	4b24      	ldr	r3, [pc, #144]	; (800822c <__swsetup_r+0xd8>)
 800819c:	429c      	cmp	r4, r3
 800819e:	bf08      	it	eq
 80081a0:	68ec      	ldreq	r4, [r5, #12]
 80081a2:	e7e6      	b.n	8008172 <__swsetup_r+0x1e>
 80081a4:	0751      	lsls	r1, r2, #29
 80081a6:	d512      	bpl.n	80081ce <__swsetup_r+0x7a>
 80081a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081aa:	b141      	cbz	r1, 80081be <__swsetup_r+0x6a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__swsetup_r+0x66>
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff fdfd 	bl	8007db4 <_free_r>
 80081ba:	2300      	movs	r3, #0
 80081bc:	6363      	str	r3, [r4, #52]	; 0x34
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80081c4:	81a3      	strh	r3, [r4, #12]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f043 0308 	orr.w	r3, r3, #8
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	b94b      	cbnz	r3, 80081ee <__swsetup_r+0x9a>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081e4:	d003      	beq.n	80081ee <__swsetup_r+0x9a>
 80081e6:	4621      	mov	r1, r4
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f9bf 	bl	800856c <__smakebuf_r>
 80081ee:	89a2      	ldrh	r2, [r4, #12]
 80081f0:	f012 0301 	ands.w	r3, r2, #1
 80081f4:	d00c      	beq.n	8008210 <__swsetup_r+0xbc>
 80081f6:	2300      	movs	r3, #0
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	6963      	ldr	r3, [r4, #20]
 80081fc:	425b      	negs	r3, r3
 80081fe:	61a3      	str	r3, [r4, #24]
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	b953      	cbnz	r3, 800821a <__swsetup_r+0xc6>
 8008204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008208:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800820c:	d1ba      	bne.n	8008184 <__swsetup_r+0x30>
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	0792      	lsls	r2, r2, #30
 8008212:	bf58      	it	pl
 8008214:	6963      	ldrpl	r3, [r4, #20]
 8008216:	60a3      	str	r3, [r4, #8]
 8008218:	e7f2      	b.n	8008200 <__swsetup_r+0xac>
 800821a:	2000      	movs	r0, #0
 800821c:	e7f7      	b.n	800820e <__swsetup_r+0xba>
 800821e:	bf00      	nop
 8008220:	2000000c 	.word	0x2000000c
 8008224:	080093d4 	.word	0x080093d4
 8008228:	080093f4 	.word	0x080093f4
 800822c:	080093b4 	.word	0x080093b4

08008230 <__sflush_r>:
 8008230:	898a      	ldrh	r2, [r1, #12]
 8008232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008236:	4605      	mov	r5, r0
 8008238:	0710      	lsls	r0, r2, #28
 800823a:	460c      	mov	r4, r1
 800823c:	d458      	bmi.n	80082f0 <__sflush_r+0xc0>
 800823e:	684b      	ldr	r3, [r1, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc05      	bgt.n	8008250 <__sflush_r+0x20>
 8008244:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	dc02      	bgt.n	8008250 <__sflush_r+0x20>
 800824a:	2000      	movs	r0, #0
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008252:	2e00      	cmp	r6, #0
 8008254:	d0f9      	beq.n	800824a <__sflush_r+0x1a>
 8008256:	2300      	movs	r3, #0
 8008258:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800825c:	682f      	ldr	r7, [r5, #0]
 800825e:	6a21      	ldr	r1, [r4, #32]
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	d032      	beq.n	80082ca <__sflush_r+0x9a>
 8008264:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	075a      	lsls	r2, r3, #29
 800826a:	d505      	bpl.n	8008278 <__sflush_r+0x48>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	1ac0      	subs	r0, r0, r3
 8008270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008272:	b10b      	cbz	r3, 8008278 <__sflush_r+0x48>
 8008274:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008276:	1ac0      	subs	r0, r0, r3
 8008278:	2300      	movs	r3, #0
 800827a:	4602      	mov	r2, r0
 800827c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800827e:	6a21      	ldr	r1, [r4, #32]
 8008280:	4628      	mov	r0, r5
 8008282:	47b0      	blx	r6
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	d106      	bne.n	8008298 <__sflush_r+0x68>
 800828a:	6829      	ldr	r1, [r5, #0]
 800828c:	291d      	cmp	r1, #29
 800828e:	d848      	bhi.n	8008322 <__sflush_r+0xf2>
 8008290:	4a29      	ldr	r2, [pc, #164]	; (8008338 <__sflush_r+0x108>)
 8008292:	40ca      	lsrs	r2, r1
 8008294:	07d6      	lsls	r6, r2, #31
 8008296:	d544      	bpl.n	8008322 <__sflush_r+0xf2>
 8008298:	2200      	movs	r2, #0
 800829a:	6062      	str	r2, [r4, #4]
 800829c:	04d9      	lsls	r1, r3, #19
 800829e:	6922      	ldr	r2, [r4, #16]
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	d504      	bpl.n	80082ae <__sflush_r+0x7e>
 80082a4:	1c42      	adds	r2, r0, #1
 80082a6:	d101      	bne.n	80082ac <__sflush_r+0x7c>
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	b903      	cbnz	r3, 80082ae <__sflush_r+0x7e>
 80082ac:	6560      	str	r0, [r4, #84]	; 0x54
 80082ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082b0:	602f      	str	r7, [r5, #0]
 80082b2:	2900      	cmp	r1, #0
 80082b4:	d0c9      	beq.n	800824a <__sflush_r+0x1a>
 80082b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d002      	beq.n	80082c4 <__sflush_r+0x94>
 80082be:	4628      	mov	r0, r5
 80082c0:	f7ff fd78 	bl	8007db4 <_free_r>
 80082c4:	2000      	movs	r0, #0
 80082c6:	6360      	str	r0, [r4, #52]	; 0x34
 80082c8:	e7c0      	b.n	800824c <__sflush_r+0x1c>
 80082ca:	2301      	movs	r3, #1
 80082cc:	4628      	mov	r0, r5
 80082ce:	47b0      	blx	r6
 80082d0:	1c41      	adds	r1, r0, #1
 80082d2:	d1c8      	bne.n	8008266 <__sflush_r+0x36>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d0c5      	beq.n	8008266 <__sflush_r+0x36>
 80082da:	2b1d      	cmp	r3, #29
 80082dc:	d001      	beq.n	80082e2 <__sflush_r+0xb2>
 80082de:	2b16      	cmp	r3, #22
 80082e0:	d101      	bne.n	80082e6 <__sflush_r+0xb6>
 80082e2:	602f      	str	r7, [r5, #0]
 80082e4:	e7b1      	b.n	800824a <__sflush_r+0x1a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	e7ad      	b.n	800824c <__sflush_r+0x1c>
 80082f0:	690f      	ldr	r7, [r1, #16]
 80082f2:	2f00      	cmp	r7, #0
 80082f4:	d0a9      	beq.n	800824a <__sflush_r+0x1a>
 80082f6:	0793      	lsls	r3, r2, #30
 80082f8:	680e      	ldr	r6, [r1, #0]
 80082fa:	bf08      	it	eq
 80082fc:	694b      	ldreq	r3, [r1, #20]
 80082fe:	600f      	str	r7, [r1, #0]
 8008300:	bf18      	it	ne
 8008302:	2300      	movne	r3, #0
 8008304:	eba6 0807 	sub.w	r8, r6, r7
 8008308:	608b      	str	r3, [r1, #8]
 800830a:	f1b8 0f00 	cmp.w	r8, #0
 800830e:	dd9c      	ble.n	800824a <__sflush_r+0x1a>
 8008310:	4643      	mov	r3, r8
 8008312:	463a      	mov	r2, r7
 8008314:	6a21      	ldr	r1, [r4, #32]
 8008316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008318:	4628      	mov	r0, r5
 800831a:	47b0      	blx	r6
 800831c:	2800      	cmp	r0, #0
 800831e:	dc06      	bgt.n	800832e <__sflush_r+0xfe>
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e78e      	b.n	800824c <__sflush_r+0x1c>
 800832e:	4407      	add	r7, r0
 8008330:	eba8 0800 	sub.w	r8, r8, r0
 8008334:	e7e9      	b.n	800830a <__sflush_r+0xda>
 8008336:	bf00      	nop
 8008338:	20400001 	.word	0x20400001

0800833c <_fflush_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	690b      	ldr	r3, [r1, #16]
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b1db      	cbz	r3, 800837e <_fflush_r+0x42>
 8008346:	b118      	cbz	r0, 8008350 <_fflush_r+0x14>
 8008348:	6983      	ldr	r3, [r0, #24]
 800834a:	b90b      	cbnz	r3, 8008350 <_fflush_r+0x14>
 800834c:	f000 f860 	bl	8008410 <__sinit>
 8008350:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <_fflush_r+0x48>)
 8008352:	429c      	cmp	r4, r3
 8008354:	d109      	bne.n	800836a <_fflush_r+0x2e>
 8008356:	686c      	ldr	r4, [r5, #4]
 8008358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835c:	b17b      	cbz	r3, 800837e <_fflush_r+0x42>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008366:	f7ff bf63 	b.w	8008230 <__sflush_r>
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <_fflush_r+0x4c>)
 800836c:	429c      	cmp	r4, r3
 800836e:	d101      	bne.n	8008374 <_fflush_r+0x38>
 8008370:	68ac      	ldr	r4, [r5, #8]
 8008372:	e7f1      	b.n	8008358 <_fflush_r+0x1c>
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <_fflush_r+0x50>)
 8008376:	429c      	cmp	r4, r3
 8008378:	bf08      	it	eq
 800837a:	68ec      	ldreq	r4, [r5, #12]
 800837c:	e7ec      	b.n	8008358 <_fflush_r+0x1c>
 800837e:	2000      	movs	r0, #0
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	080093d4 	.word	0x080093d4
 8008388:	080093f4 	.word	0x080093f4
 800838c:	080093b4 	.word	0x080093b4

08008390 <std>:
 8008390:	2300      	movs	r3, #0
 8008392:	b510      	push	{r4, lr}
 8008394:	4604      	mov	r4, r0
 8008396:	e9c0 3300 	strd	r3, r3, [r0]
 800839a:	6083      	str	r3, [r0, #8]
 800839c:	8181      	strh	r1, [r0, #12]
 800839e:	6643      	str	r3, [r0, #100]	; 0x64
 80083a0:	81c2      	strh	r2, [r0, #14]
 80083a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a6:	6183      	str	r3, [r0, #24]
 80083a8:	4619      	mov	r1, r3
 80083aa:	2208      	movs	r2, #8
 80083ac:	305c      	adds	r0, #92	; 0x5c
 80083ae:	f7ff fcf8 	bl	8007da2 <memset>
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <std+0x38>)
 80083b4:	6263      	str	r3, [r4, #36]	; 0x24
 80083b6:	4b05      	ldr	r3, [pc, #20]	; (80083cc <std+0x3c>)
 80083b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x40>)
 80083bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x44>)
 80083c0:	6224      	str	r4, [r4, #32]
 80083c2:	6323      	str	r3, [r4, #48]	; 0x30
 80083c4:	bd10      	pop	{r4, pc}
 80083c6:	bf00      	nop
 80083c8:	08008e25 	.word	0x08008e25
 80083cc:	08008e47 	.word	0x08008e47
 80083d0:	08008e7f 	.word	0x08008e7f
 80083d4:	08008ea3 	.word	0x08008ea3

080083d8 <_cleanup_r>:
 80083d8:	4901      	ldr	r1, [pc, #4]	; (80083e0 <_cleanup_r+0x8>)
 80083da:	f000 b885 	b.w	80084e8 <_fwalk_reent>
 80083de:	bf00      	nop
 80083e0:	0800833d 	.word	0x0800833d

080083e4 <__sfmoreglue>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	1e4a      	subs	r2, r1, #1
 80083e8:	2568      	movs	r5, #104	; 0x68
 80083ea:	4355      	muls	r5, r2
 80083ec:	460e      	mov	r6, r1
 80083ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083f2:	f7ff fd2d 	bl	8007e50 <_malloc_r>
 80083f6:	4604      	mov	r4, r0
 80083f8:	b140      	cbz	r0, 800840c <__sfmoreglue+0x28>
 80083fa:	2100      	movs	r1, #0
 80083fc:	e9c0 1600 	strd	r1, r6, [r0]
 8008400:	300c      	adds	r0, #12
 8008402:	60a0      	str	r0, [r4, #8]
 8008404:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008408:	f7ff fccb 	bl	8007da2 <memset>
 800840c:	4620      	mov	r0, r4
 800840e:	bd70      	pop	{r4, r5, r6, pc}

08008410 <__sinit>:
 8008410:	6983      	ldr	r3, [r0, #24]
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	bb33      	cbnz	r3, 8008466 <__sinit+0x56>
 8008418:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800841c:	6503      	str	r3, [r0, #80]	; 0x50
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <__sinit+0x58>)
 8008420:	4a12      	ldr	r2, [pc, #72]	; (800846c <__sinit+0x5c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6282      	str	r2, [r0, #40]	; 0x28
 8008426:	4298      	cmp	r0, r3
 8008428:	bf04      	itt	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	6183      	streq	r3, [r0, #24]
 800842e:	f000 f81f 	bl	8008470 <__sfp>
 8008432:	6060      	str	r0, [r4, #4]
 8008434:	4620      	mov	r0, r4
 8008436:	f000 f81b 	bl	8008470 <__sfp>
 800843a:	60a0      	str	r0, [r4, #8]
 800843c:	4620      	mov	r0, r4
 800843e:	f000 f817 	bl	8008470 <__sfp>
 8008442:	2200      	movs	r2, #0
 8008444:	60e0      	str	r0, [r4, #12]
 8008446:	2104      	movs	r1, #4
 8008448:	6860      	ldr	r0, [r4, #4]
 800844a:	f7ff ffa1 	bl	8008390 <std>
 800844e:	2201      	movs	r2, #1
 8008450:	2109      	movs	r1, #9
 8008452:	68a0      	ldr	r0, [r4, #8]
 8008454:	f7ff ff9c 	bl	8008390 <std>
 8008458:	2202      	movs	r2, #2
 800845a:	2112      	movs	r1, #18
 800845c:	68e0      	ldr	r0, [r4, #12]
 800845e:	f7ff ff97 	bl	8008390 <std>
 8008462:	2301      	movs	r3, #1
 8008464:	61a3      	str	r3, [r4, #24]
 8008466:	bd10      	pop	{r4, pc}
 8008468:	080093b0 	.word	0x080093b0
 800846c:	080083d9 	.word	0x080083d9

08008470 <__sfp>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <__sfp+0x70>)
 8008474:	681e      	ldr	r6, [r3, #0]
 8008476:	69b3      	ldr	r3, [r6, #24]
 8008478:	4607      	mov	r7, r0
 800847a:	b913      	cbnz	r3, 8008482 <__sfp+0x12>
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff ffc7 	bl	8008410 <__sinit>
 8008482:	3648      	adds	r6, #72	; 0x48
 8008484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008488:	3b01      	subs	r3, #1
 800848a:	d503      	bpl.n	8008494 <__sfp+0x24>
 800848c:	6833      	ldr	r3, [r6, #0]
 800848e:	b133      	cbz	r3, 800849e <__sfp+0x2e>
 8008490:	6836      	ldr	r6, [r6, #0]
 8008492:	e7f7      	b.n	8008484 <__sfp+0x14>
 8008494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008498:	b16d      	cbz	r5, 80084b6 <__sfp+0x46>
 800849a:	3468      	adds	r4, #104	; 0x68
 800849c:	e7f4      	b.n	8008488 <__sfp+0x18>
 800849e:	2104      	movs	r1, #4
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff ff9f 	bl	80083e4 <__sfmoreglue>
 80084a6:	6030      	str	r0, [r6, #0]
 80084a8:	2800      	cmp	r0, #0
 80084aa:	d1f1      	bne.n	8008490 <__sfp+0x20>
 80084ac:	230c      	movs	r3, #12
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	4604      	mov	r4, r0
 80084b2:	4620      	mov	r0, r4
 80084b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <__sfp+0x74>)
 80084b8:	6665      	str	r5, [r4, #100]	; 0x64
 80084ba:	e9c4 5500 	strd	r5, r5, [r4]
 80084be:	60a5      	str	r5, [r4, #8]
 80084c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80084c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80084c8:	2208      	movs	r2, #8
 80084ca:	4629      	mov	r1, r5
 80084cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80084d0:	f7ff fc67 	bl	8007da2 <memset>
 80084d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80084d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80084dc:	e7e9      	b.n	80084b2 <__sfp+0x42>
 80084de:	bf00      	nop
 80084e0:	080093b0 	.word	0x080093b0
 80084e4:	ffff0001 	.word	0xffff0001

080084e8 <_fwalk_reent>:
 80084e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084ec:	4680      	mov	r8, r0
 80084ee:	4689      	mov	r9, r1
 80084f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084f4:	2600      	movs	r6, #0
 80084f6:	b914      	cbnz	r4, 80084fe <_fwalk_reent+0x16>
 80084f8:	4630      	mov	r0, r6
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008502:	3f01      	subs	r7, #1
 8008504:	d501      	bpl.n	800850a <_fwalk_reent+0x22>
 8008506:	6824      	ldr	r4, [r4, #0]
 8008508:	e7f5      	b.n	80084f6 <_fwalk_reent+0xe>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d907      	bls.n	8008520 <_fwalk_reent+0x38>
 8008510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008514:	3301      	adds	r3, #1
 8008516:	d003      	beq.n	8008520 <_fwalk_reent+0x38>
 8008518:	4629      	mov	r1, r5
 800851a:	4640      	mov	r0, r8
 800851c:	47c8      	blx	r9
 800851e:	4306      	orrs	r6, r0
 8008520:	3568      	adds	r5, #104	; 0x68
 8008522:	e7ee      	b.n	8008502 <_fwalk_reent+0x1a>

08008524 <__swhatbuf_r>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	460e      	mov	r6, r1
 8008528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800852c:	2900      	cmp	r1, #0
 800852e:	b096      	sub	sp, #88	; 0x58
 8008530:	4614      	mov	r4, r2
 8008532:	461d      	mov	r5, r3
 8008534:	da07      	bge.n	8008546 <__swhatbuf_r+0x22>
 8008536:	2300      	movs	r3, #0
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	89b3      	ldrh	r3, [r6, #12]
 800853c:	061a      	lsls	r2, r3, #24
 800853e:	d410      	bmi.n	8008562 <__swhatbuf_r+0x3e>
 8008540:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008544:	e00e      	b.n	8008564 <__swhatbuf_r+0x40>
 8008546:	466a      	mov	r2, sp
 8008548:	f000 fcd2 	bl	8008ef0 <_fstat_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	dbf2      	blt.n	8008536 <__swhatbuf_r+0x12>
 8008550:	9a01      	ldr	r2, [sp, #4]
 8008552:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008556:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800855a:	425a      	negs	r2, r3
 800855c:	415a      	adcs	r2, r3
 800855e:	602a      	str	r2, [r5, #0]
 8008560:	e7ee      	b.n	8008540 <__swhatbuf_r+0x1c>
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	2000      	movs	r0, #0
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	b016      	add	sp, #88	; 0x58
 800856a:	bd70      	pop	{r4, r5, r6, pc}

0800856c <__smakebuf_r>:
 800856c:	898b      	ldrh	r3, [r1, #12]
 800856e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008570:	079d      	lsls	r5, r3, #30
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	d507      	bpl.n	8008588 <__smakebuf_r+0x1c>
 8008578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	2301      	movs	r3, #1
 8008582:	6163      	str	r3, [r4, #20]
 8008584:	b002      	add	sp, #8
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	ab01      	add	r3, sp, #4
 800858a:	466a      	mov	r2, sp
 800858c:	f7ff ffca 	bl	8008524 <__swhatbuf_r>
 8008590:	9900      	ldr	r1, [sp, #0]
 8008592:	4605      	mov	r5, r0
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fc5b 	bl	8007e50 <_malloc_r>
 800859a:	b948      	cbnz	r0, 80085b0 <__smakebuf_r+0x44>
 800859c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a0:	059a      	lsls	r2, r3, #22
 80085a2:	d4ef      	bmi.n	8008584 <__smakebuf_r+0x18>
 80085a4:	f023 0303 	bic.w	r3, r3, #3
 80085a8:	f043 0302 	orr.w	r3, r3, #2
 80085ac:	81a3      	strh	r3, [r4, #12]
 80085ae:	e7e3      	b.n	8008578 <__smakebuf_r+0xc>
 80085b0:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <__smakebuf_r+0x7c>)
 80085b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	6020      	str	r0, [r4, #0]
 80085b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085bc:	81a3      	strh	r3, [r4, #12]
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	6163      	str	r3, [r4, #20]
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	6120      	str	r0, [r4, #16]
 80085c6:	b15b      	cbz	r3, 80085e0 <__smakebuf_r+0x74>
 80085c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 fca1 	bl	8008f14 <_isatty_r>
 80085d2:	b128      	cbz	r0, 80085e0 <__smakebuf_r+0x74>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f023 0303 	bic.w	r3, r3, #3
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	89a3      	ldrh	r3, [r4, #12]
 80085e2:	431d      	orrs	r5, r3
 80085e4:	81a5      	strh	r5, [r4, #12]
 80085e6:	e7cd      	b.n	8008584 <__smakebuf_r+0x18>
 80085e8:	080083d9 	.word	0x080083d9

080085ec <__malloc_lock>:
 80085ec:	4770      	bx	lr

080085ee <__malloc_unlock>:
 80085ee:	4770      	bx	lr

080085f0 <__ssputs_r>:
 80085f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085f4:	688e      	ldr	r6, [r1, #8]
 80085f6:	429e      	cmp	r6, r3
 80085f8:	4682      	mov	sl, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4690      	mov	r8, r2
 80085fe:	4699      	mov	r9, r3
 8008600:	d837      	bhi.n	8008672 <__ssputs_r+0x82>
 8008602:	898a      	ldrh	r2, [r1, #12]
 8008604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008608:	d031      	beq.n	800866e <__ssputs_r+0x7e>
 800860a:	6825      	ldr	r5, [r4, #0]
 800860c:	6909      	ldr	r1, [r1, #16]
 800860e:	1a6f      	subs	r7, r5, r1
 8008610:	6965      	ldr	r5, [r4, #20]
 8008612:	2302      	movs	r3, #2
 8008614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008618:	fb95 f5f3 	sdiv	r5, r5, r3
 800861c:	f109 0301 	add.w	r3, r9, #1
 8008620:	443b      	add	r3, r7
 8008622:	429d      	cmp	r5, r3
 8008624:	bf38      	it	cc
 8008626:	461d      	movcc	r5, r3
 8008628:	0553      	lsls	r3, r2, #21
 800862a:	d530      	bpl.n	800868e <__ssputs_r+0x9e>
 800862c:	4629      	mov	r1, r5
 800862e:	f7ff fc0f 	bl	8007e50 <_malloc_r>
 8008632:	4606      	mov	r6, r0
 8008634:	b950      	cbnz	r0, 800864c <__ssputs_r+0x5c>
 8008636:	230c      	movs	r3, #12
 8008638:	f8ca 3000 	str.w	r3, [sl]
 800863c:	89a3      	ldrh	r3, [r4, #12]
 800863e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008642:	81a3      	strh	r3, [r4, #12]
 8008644:	f04f 30ff 	mov.w	r0, #4294967295
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	463a      	mov	r2, r7
 800864e:	6921      	ldr	r1, [r4, #16]
 8008650:	f7ff fb9c 	bl	8007d8c <memcpy>
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800865a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	6126      	str	r6, [r4, #16]
 8008662:	6165      	str	r5, [r4, #20]
 8008664:	443e      	add	r6, r7
 8008666:	1bed      	subs	r5, r5, r7
 8008668:	6026      	str	r6, [r4, #0]
 800866a:	60a5      	str	r5, [r4, #8]
 800866c:	464e      	mov	r6, r9
 800866e:	454e      	cmp	r6, r9
 8008670:	d900      	bls.n	8008674 <__ssputs_r+0x84>
 8008672:	464e      	mov	r6, r9
 8008674:	4632      	mov	r2, r6
 8008676:	4641      	mov	r1, r8
 8008678:	6820      	ldr	r0, [r4, #0]
 800867a:	f000 fc6d 	bl	8008f58 <memmove>
 800867e:	68a3      	ldr	r3, [r4, #8]
 8008680:	1b9b      	subs	r3, r3, r6
 8008682:	60a3      	str	r3, [r4, #8]
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	441e      	add	r6, r3
 8008688:	6026      	str	r6, [r4, #0]
 800868a:	2000      	movs	r0, #0
 800868c:	e7dc      	b.n	8008648 <__ssputs_r+0x58>
 800868e:	462a      	mov	r2, r5
 8008690:	f000 fc7b 	bl	8008f8a <_realloc_r>
 8008694:	4606      	mov	r6, r0
 8008696:	2800      	cmp	r0, #0
 8008698:	d1e2      	bne.n	8008660 <__ssputs_r+0x70>
 800869a:	6921      	ldr	r1, [r4, #16]
 800869c:	4650      	mov	r0, sl
 800869e:	f7ff fb89 	bl	8007db4 <_free_r>
 80086a2:	e7c8      	b.n	8008636 <__ssputs_r+0x46>

080086a4 <_svfiprintf_r>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	461d      	mov	r5, r3
 80086aa:	898b      	ldrh	r3, [r1, #12]
 80086ac:	061f      	lsls	r7, r3, #24
 80086ae:	b09d      	sub	sp, #116	; 0x74
 80086b0:	4680      	mov	r8, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	4616      	mov	r6, r2
 80086b6:	d50f      	bpl.n	80086d8 <_svfiprintf_r+0x34>
 80086b8:	690b      	ldr	r3, [r1, #16]
 80086ba:	b96b      	cbnz	r3, 80086d8 <_svfiprintf_r+0x34>
 80086bc:	2140      	movs	r1, #64	; 0x40
 80086be:	f7ff fbc7 	bl	8007e50 <_malloc_r>
 80086c2:	6020      	str	r0, [r4, #0]
 80086c4:	6120      	str	r0, [r4, #16]
 80086c6:	b928      	cbnz	r0, 80086d4 <_svfiprintf_r+0x30>
 80086c8:	230c      	movs	r3, #12
 80086ca:	f8c8 3000 	str.w	r3, [r8]
 80086ce:	f04f 30ff 	mov.w	r0, #4294967295
 80086d2:	e0c8      	b.n	8008866 <_svfiprintf_r+0x1c2>
 80086d4:	2340      	movs	r3, #64	; 0x40
 80086d6:	6163      	str	r3, [r4, #20]
 80086d8:	2300      	movs	r3, #0
 80086da:	9309      	str	r3, [sp, #36]	; 0x24
 80086dc:	2320      	movs	r3, #32
 80086de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e2:	2330      	movs	r3, #48	; 0x30
 80086e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086e8:	9503      	str	r5, [sp, #12]
 80086ea:	f04f 0b01 	mov.w	fp, #1
 80086ee:	4637      	mov	r7, r6
 80086f0:	463d      	mov	r5, r7
 80086f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086f6:	b10b      	cbz	r3, 80086fc <_svfiprintf_r+0x58>
 80086f8:	2b25      	cmp	r3, #37	; 0x25
 80086fa:	d13e      	bne.n	800877a <_svfiprintf_r+0xd6>
 80086fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8008700:	d00b      	beq.n	800871a <_svfiprintf_r+0x76>
 8008702:	4653      	mov	r3, sl
 8008704:	4632      	mov	r2, r6
 8008706:	4621      	mov	r1, r4
 8008708:	4640      	mov	r0, r8
 800870a:	f7ff ff71 	bl	80085f0 <__ssputs_r>
 800870e:	3001      	adds	r0, #1
 8008710:	f000 80a4 	beq.w	800885c <_svfiprintf_r+0x1b8>
 8008714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008716:	4453      	add	r3, sl
 8008718:	9309      	str	r3, [sp, #36]	; 0x24
 800871a:	783b      	ldrb	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 809d 	beq.w	800885c <_svfiprintf_r+0x1b8>
 8008722:	2300      	movs	r3, #0
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800872c:	9304      	str	r3, [sp, #16]
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008734:	931a      	str	r3, [sp, #104]	; 0x68
 8008736:	462f      	mov	r7, r5
 8008738:	2205      	movs	r2, #5
 800873a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800873e:	4850      	ldr	r0, [pc, #320]	; (8008880 <_svfiprintf_r+0x1dc>)
 8008740:	f7f7 fd76 	bl	8000230 <memchr>
 8008744:	9b04      	ldr	r3, [sp, #16]
 8008746:	b9d0      	cbnz	r0, 800877e <_svfiprintf_r+0xda>
 8008748:	06d9      	lsls	r1, r3, #27
 800874a:	bf44      	itt	mi
 800874c:	2220      	movmi	r2, #32
 800874e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008752:	071a      	lsls	r2, r3, #28
 8008754:	bf44      	itt	mi
 8008756:	222b      	movmi	r2, #43	; 0x2b
 8008758:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800875c:	782a      	ldrb	r2, [r5, #0]
 800875e:	2a2a      	cmp	r2, #42	; 0x2a
 8008760:	d015      	beq.n	800878e <_svfiprintf_r+0xea>
 8008762:	9a07      	ldr	r2, [sp, #28]
 8008764:	462f      	mov	r7, r5
 8008766:	2000      	movs	r0, #0
 8008768:	250a      	movs	r5, #10
 800876a:	4639      	mov	r1, r7
 800876c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008770:	3b30      	subs	r3, #48	; 0x30
 8008772:	2b09      	cmp	r3, #9
 8008774:	d94d      	bls.n	8008812 <_svfiprintf_r+0x16e>
 8008776:	b1b8      	cbz	r0, 80087a8 <_svfiprintf_r+0x104>
 8008778:	e00f      	b.n	800879a <_svfiprintf_r+0xf6>
 800877a:	462f      	mov	r7, r5
 800877c:	e7b8      	b.n	80086f0 <_svfiprintf_r+0x4c>
 800877e:	4a40      	ldr	r2, [pc, #256]	; (8008880 <_svfiprintf_r+0x1dc>)
 8008780:	1a80      	subs	r0, r0, r2
 8008782:	fa0b f000 	lsl.w	r0, fp, r0
 8008786:	4318      	orrs	r0, r3
 8008788:	9004      	str	r0, [sp, #16]
 800878a:	463d      	mov	r5, r7
 800878c:	e7d3      	b.n	8008736 <_svfiprintf_r+0x92>
 800878e:	9a03      	ldr	r2, [sp, #12]
 8008790:	1d11      	adds	r1, r2, #4
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	9103      	str	r1, [sp, #12]
 8008796:	2a00      	cmp	r2, #0
 8008798:	db01      	blt.n	800879e <_svfiprintf_r+0xfa>
 800879a:	9207      	str	r2, [sp, #28]
 800879c:	e004      	b.n	80087a8 <_svfiprintf_r+0x104>
 800879e:	4252      	negs	r2, r2
 80087a0:	f043 0302 	orr.w	r3, r3, #2
 80087a4:	9207      	str	r2, [sp, #28]
 80087a6:	9304      	str	r3, [sp, #16]
 80087a8:	783b      	ldrb	r3, [r7, #0]
 80087aa:	2b2e      	cmp	r3, #46	; 0x2e
 80087ac:	d10c      	bne.n	80087c8 <_svfiprintf_r+0x124>
 80087ae:	787b      	ldrb	r3, [r7, #1]
 80087b0:	2b2a      	cmp	r3, #42	; 0x2a
 80087b2:	d133      	bne.n	800881c <_svfiprintf_r+0x178>
 80087b4:	9b03      	ldr	r3, [sp, #12]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	9203      	str	r2, [sp, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bfb8      	it	lt
 80087c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087c4:	3702      	adds	r7, #2
 80087c6:	9305      	str	r3, [sp, #20]
 80087c8:	4d2e      	ldr	r5, [pc, #184]	; (8008884 <_svfiprintf_r+0x1e0>)
 80087ca:	7839      	ldrb	r1, [r7, #0]
 80087cc:	2203      	movs	r2, #3
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7f7 fd2e 	bl	8000230 <memchr>
 80087d4:	b138      	cbz	r0, 80087e6 <_svfiprintf_r+0x142>
 80087d6:	2340      	movs	r3, #64	; 0x40
 80087d8:	1b40      	subs	r0, r0, r5
 80087da:	fa03 f000 	lsl.w	r0, r3, r0
 80087de:	9b04      	ldr	r3, [sp, #16]
 80087e0:	4303      	orrs	r3, r0
 80087e2:	3701      	adds	r7, #1
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	7839      	ldrb	r1, [r7, #0]
 80087e8:	4827      	ldr	r0, [pc, #156]	; (8008888 <_svfiprintf_r+0x1e4>)
 80087ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087ee:	2206      	movs	r2, #6
 80087f0:	1c7e      	adds	r6, r7, #1
 80087f2:	f7f7 fd1d 	bl	8000230 <memchr>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d038      	beq.n	800886c <_svfiprintf_r+0x1c8>
 80087fa:	4b24      	ldr	r3, [pc, #144]	; (800888c <_svfiprintf_r+0x1e8>)
 80087fc:	bb13      	cbnz	r3, 8008844 <_svfiprintf_r+0x1a0>
 80087fe:	9b03      	ldr	r3, [sp, #12]
 8008800:	3307      	adds	r3, #7
 8008802:	f023 0307 	bic.w	r3, r3, #7
 8008806:	3308      	adds	r3, #8
 8008808:	9303      	str	r3, [sp, #12]
 800880a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800880c:	444b      	add	r3, r9
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	e76d      	b.n	80086ee <_svfiprintf_r+0x4a>
 8008812:	fb05 3202 	mla	r2, r5, r2, r3
 8008816:	2001      	movs	r0, #1
 8008818:	460f      	mov	r7, r1
 800881a:	e7a6      	b.n	800876a <_svfiprintf_r+0xc6>
 800881c:	2300      	movs	r3, #0
 800881e:	3701      	adds	r7, #1
 8008820:	9305      	str	r3, [sp, #20]
 8008822:	4619      	mov	r1, r3
 8008824:	250a      	movs	r5, #10
 8008826:	4638      	mov	r0, r7
 8008828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800882c:	3a30      	subs	r2, #48	; 0x30
 800882e:	2a09      	cmp	r2, #9
 8008830:	d903      	bls.n	800883a <_svfiprintf_r+0x196>
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0c8      	beq.n	80087c8 <_svfiprintf_r+0x124>
 8008836:	9105      	str	r1, [sp, #20]
 8008838:	e7c6      	b.n	80087c8 <_svfiprintf_r+0x124>
 800883a:	fb05 2101 	mla	r1, r5, r1, r2
 800883e:	2301      	movs	r3, #1
 8008840:	4607      	mov	r7, r0
 8008842:	e7f0      	b.n	8008826 <_svfiprintf_r+0x182>
 8008844:	ab03      	add	r3, sp, #12
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	4622      	mov	r2, r4
 800884a:	4b11      	ldr	r3, [pc, #68]	; (8008890 <_svfiprintf_r+0x1ec>)
 800884c:	a904      	add	r1, sp, #16
 800884e:	4640      	mov	r0, r8
 8008850:	f3af 8000 	nop.w
 8008854:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008858:	4681      	mov	r9, r0
 800885a:	d1d6      	bne.n	800880a <_svfiprintf_r+0x166>
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	065b      	lsls	r3, r3, #25
 8008860:	f53f af35 	bmi.w	80086ce <_svfiprintf_r+0x2a>
 8008864:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008866:	b01d      	add	sp, #116	; 0x74
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	ab03      	add	r3, sp, #12
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	4622      	mov	r2, r4
 8008872:	4b07      	ldr	r3, [pc, #28]	; (8008890 <_svfiprintf_r+0x1ec>)
 8008874:	a904      	add	r1, sp, #16
 8008876:	4640      	mov	r0, r8
 8008878:	f000 f9c2 	bl	8008c00 <_printf_i>
 800887c:	e7ea      	b.n	8008854 <_svfiprintf_r+0x1b0>
 800887e:	bf00      	nop
 8008880:	08009414 	.word	0x08009414
 8008884:	0800941a 	.word	0x0800941a
 8008888:	0800941e 	.word	0x0800941e
 800888c:	00000000 	.word	0x00000000
 8008890:	080085f1 	.word	0x080085f1

08008894 <__sfputc_r>:
 8008894:	6893      	ldr	r3, [r2, #8]
 8008896:	3b01      	subs	r3, #1
 8008898:	2b00      	cmp	r3, #0
 800889a:	b410      	push	{r4}
 800889c:	6093      	str	r3, [r2, #8]
 800889e:	da08      	bge.n	80088b2 <__sfputc_r+0x1e>
 80088a0:	6994      	ldr	r4, [r2, #24]
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	db01      	blt.n	80088aa <__sfputc_r+0x16>
 80088a6:	290a      	cmp	r1, #10
 80088a8:	d103      	bne.n	80088b2 <__sfputc_r+0x1e>
 80088aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ae:	f7ff bbff 	b.w	80080b0 <__swbuf_r>
 80088b2:	6813      	ldr	r3, [r2, #0]
 80088b4:	1c58      	adds	r0, r3, #1
 80088b6:	6010      	str	r0, [r2, #0]
 80088b8:	7019      	strb	r1, [r3, #0]
 80088ba:	4608      	mov	r0, r1
 80088bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <__sfputs_r>:
 80088c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c4:	4606      	mov	r6, r0
 80088c6:	460f      	mov	r7, r1
 80088c8:	4614      	mov	r4, r2
 80088ca:	18d5      	adds	r5, r2, r3
 80088cc:	42ac      	cmp	r4, r5
 80088ce:	d101      	bne.n	80088d4 <__sfputs_r+0x12>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e007      	b.n	80088e4 <__sfputs_r+0x22>
 80088d4:	463a      	mov	r2, r7
 80088d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088da:	4630      	mov	r0, r6
 80088dc:	f7ff ffda 	bl	8008894 <__sfputc_r>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d1f3      	bne.n	80088cc <__sfputs_r+0xa>
 80088e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088e8 <_vfiprintf_r>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	460c      	mov	r4, r1
 80088ee:	b09d      	sub	sp, #116	; 0x74
 80088f0:	4617      	mov	r7, r2
 80088f2:	461d      	mov	r5, r3
 80088f4:	4606      	mov	r6, r0
 80088f6:	b118      	cbz	r0, 8008900 <_vfiprintf_r+0x18>
 80088f8:	6983      	ldr	r3, [r0, #24]
 80088fa:	b90b      	cbnz	r3, 8008900 <_vfiprintf_r+0x18>
 80088fc:	f7ff fd88 	bl	8008410 <__sinit>
 8008900:	4b7c      	ldr	r3, [pc, #496]	; (8008af4 <_vfiprintf_r+0x20c>)
 8008902:	429c      	cmp	r4, r3
 8008904:	d158      	bne.n	80089b8 <_vfiprintf_r+0xd0>
 8008906:	6874      	ldr	r4, [r6, #4]
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	0718      	lsls	r0, r3, #28
 800890c:	d55e      	bpl.n	80089cc <_vfiprintf_r+0xe4>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d05b      	beq.n	80089cc <_vfiprintf_r+0xe4>
 8008914:	2300      	movs	r3, #0
 8008916:	9309      	str	r3, [sp, #36]	; 0x24
 8008918:	2320      	movs	r3, #32
 800891a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800891e:	2330      	movs	r3, #48	; 0x30
 8008920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008924:	9503      	str	r5, [sp, #12]
 8008926:	f04f 0b01 	mov.w	fp, #1
 800892a:	46b8      	mov	r8, r7
 800892c:	4645      	mov	r5, r8
 800892e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008932:	b10b      	cbz	r3, 8008938 <_vfiprintf_r+0x50>
 8008934:	2b25      	cmp	r3, #37	; 0x25
 8008936:	d154      	bne.n	80089e2 <_vfiprintf_r+0xfa>
 8008938:	ebb8 0a07 	subs.w	sl, r8, r7
 800893c:	d00b      	beq.n	8008956 <_vfiprintf_r+0x6e>
 800893e:	4653      	mov	r3, sl
 8008940:	463a      	mov	r2, r7
 8008942:	4621      	mov	r1, r4
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff ffbc 	bl	80088c2 <__sfputs_r>
 800894a:	3001      	adds	r0, #1
 800894c:	f000 80c2 	beq.w	8008ad4 <_vfiprintf_r+0x1ec>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	4453      	add	r3, sl
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	f898 3000 	ldrb.w	r3, [r8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80ba 	beq.w	8008ad4 <_vfiprintf_r+0x1ec>
 8008960:	2300      	movs	r3, #0
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	9307      	str	r3, [sp, #28]
 800896e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008972:	931a      	str	r3, [sp, #104]	; 0x68
 8008974:	46a8      	mov	r8, r5
 8008976:	2205      	movs	r2, #5
 8008978:	f818 1b01 	ldrb.w	r1, [r8], #1
 800897c:	485e      	ldr	r0, [pc, #376]	; (8008af8 <_vfiprintf_r+0x210>)
 800897e:	f7f7 fc57 	bl	8000230 <memchr>
 8008982:	9b04      	ldr	r3, [sp, #16]
 8008984:	bb78      	cbnz	r0, 80089e6 <_vfiprintf_r+0xfe>
 8008986:	06d9      	lsls	r1, r3, #27
 8008988:	bf44      	itt	mi
 800898a:	2220      	movmi	r2, #32
 800898c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008990:	071a      	lsls	r2, r3, #28
 8008992:	bf44      	itt	mi
 8008994:	222b      	movmi	r2, #43	; 0x2b
 8008996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800899a:	782a      	ldrb	r2, [r5, #0]
 800899c:	2a2a      	cmp	r2, #42	; 0x2a
 800899e:	d02a      	beq.n	80089f6 <_vfiprintf_r+0x10e>
 80089a0:	9a07      	ldr	r2, [sp, #28]
 80089a2:	46a8      	mov	r8, r5
 80089a4:	2000      	movs	r0, #0
 80089a6:	250a      	movs	r5, #10
 80089a8:	4641      	mov	r1, r8
 80089aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ae:	3b30      	subs	r3, #48	; 0x30
 80089b0:	2b09      	cmp	r3, #9
 80089b2:	d969      	bls.n	8008a88 <_vfiprintf_r+0x1a0>
 80089b4:	b360      	cbz	r0, 8008a10 <_vfiprintf_r+0x128>
 80089b6:	e024      	b.n	8008a02 <_vfiprintf_r+0x11a>
 80089b8:	4b50      	ldr	r3, [pc, #320]	; (8008afc <_vfiprintf_r+0x214>)
 80089ba:	429c      	cmp	r4, r3
 80089bc:	d101      	bne.n	80089c2 <_vfiprintf_r+0xda>
 80089be:	68b4      	ldr	r4, [r6, #8]
 80089c0:	e7a2      	b.n	8008908 <_vfiprintf_r+0x20>
 80089c2:	4b4f      	ldr	r3, [pc, #316]	; (8008b00 <_vfiprintf_r+0x218>)
 80089c4:	429c      	cmp	r4, r3
 80089c6:	bf08      	it	eq
 80089c8:	68f4      	ldreq	r4, [r6, #12]
 80089ca:	e79d      	b.n	8008908 <_vfiprintf_r+0x20>
 80089cc:	4621      	mov	r1, r4
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff fbc0 	bl	8008154 <__swsetup_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	d09d      	beq.n	8008914 <_vfiprintf_r+0x2c>
 80089d8:	f04f 30ff 	mov.w	r0, #4294967295
 80089dc:	b01d      	add	sp, #116	; 0x74
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	46a8      	mov	r8, r5
 80089e4:	e7a2      	b.n	800892c <_vfiprintf_r+0x44>
 80089e6:	4a44      	ldr	r2, [pc, #272]	; (8008af8 <_vfiprintf_r+0x210>)
 80089e8:	1a80      	subs	r0, r0, r2
 80089ea:	fa0b f000 	lsl.w	r0, fp, r0
 80089ee:	4318      	orrs	r0, r3
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	4645      	mov	r5, r8
 80089f4:	e7be      	b.n	8008974 <_vfiprintf_r+0x8c>
 80089f6:	9a03      	ldr	r2, [sp, #12]
 80089f8:	1d11      	adds	r1, r2, #4
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	9103      	str	r1, [sp, #12]
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	db01      	blt.n	8008a06 <_vfiprintf_r+0x11e>
 8008a02:	9207      	str	r2, [sp, #28]
 8008a04:	e004      	b.n	8008a10 <_vfiprintf_r+0x128>
 8008a06:	4252      	negs	r2, r2
 8008a08:	f043 0302 	orr.w	r3, r3, #2
 8008a0c:	9207      	str	r2, [sp, #28]
 8008a0e:	9304      	str	r3, [sp, #16]
 8008a10:	f898 3000 	ldrb.w	r3, [r8]
 8008a14:	2b2e      	cmp	r3, #46	; 0x2e
 8008a16:	d10e      	bne.n	8008a36 <_vfiprintf_r+0x14e>
 8008a18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a1e:	d138      	bne.n	8008a92 <_vfiprintf_r+0x1aa>
 8008a20:	9b03      	ldr	r3, [sp, #12]
 8008a22:	1d1a      	adds	r2, r3, #4
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	9203      	str	r2, [sp, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	bfb8      	it	lt
 8008a2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a30:	f108 0802 	add.w	r8, r8, #2
 8008a34:	9305      	str	r3, [sp, #20]
 8008a36:	4d33      	ldr	r5, [pc, #204]	; (8008b04 <_vfiprintf_r+0x21c>)
 8008a38:	f898 1000 	ldrb.w	r1, [r8]
 8008a3c:	2203      	movs	r2, #3
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f7f7 fbf6 	bl	8000230 <memchr>
 8008a44:	b140      	cbz	r0, 8008a58 <_vfiprintf_r+0x170>
 8008a46:	2340      	movs	r3, #64	; 0x40
 8008a48:	1b40      	subs	r0, r0, r5
 8008a4a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a4e:	9b04      	ldr	r3, [sp, #16]
 8008a50:	4303      	orrs	r3, r0
 8008a52:	f108 0801 	add.w	r8, r8, #1
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	f898 1000 	ldrb.w	r1, [r8]
 8008a5c:	482a      	ldr	r0, [pc, #168]	; (8008b08 <_vfiprintf_r+0x220>)
 8008a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a62:	2206      	movs	r2, #6
 8008a64:	f108 0701 	add.w	r7, r8, #1
 8008a68:	f7f7 fbe2 	bl	8000230 <memchr>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d037      	beq.n	8008ae0 <_vfiprintf_r+0x1f8>
 8008a70:	4b26      	ldr	r3, [pc, #152]	; (8008b0c <_vfiprintf_r+0x224>)
 8008a72:	bb1b      	cbnz	r3, 8008abc <_vfiprintf_r+0x1d4>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	3307      	adds	r3, #7
 8008a78:	f023 0307 	bic.w	r3, r3, #7
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	9303      	str	r3, [sp, #12]
 8008a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a82:	444b      	add	r3, r9
 8008a84:	9309      	str	r3, [sp, #36]	; 0x24
 8008a86:	e750      	b.n	800892a <_vfiprintf_r+0x42>
 8008a88:	fb05 3202 	mla	r2, r5, r2, r3
 8008a8c:	2001      	movs	r0, #1
 8008a8e:	4688      	mov	r8, r1
 8008a90:	e78a      	b.n	80089a8 <_vfiprintf_r+0xc0>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f108 0801 	add.w	r8, r8, #1
 8008a98:	9305      	str	r3, [sp, #20]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	250a      	movs	r5, #10
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa4:	3a30      	subs	r2, #48	; 0x30
 8008aa6:	2a09      	cmp	r2, #9
 8008aa8:	d903      	bls.n	8008ab2 <_vfiprintf_r+0x1ca>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d0c3      	beq.n	8008a36 <_vfiprintf_r+0x14e>
 8008aae:	9105      	str	r1, [sp, #20]
 8008ab0:	e7c1      	b.n	8008a36 <_vfiprintf_r+0x14e>
 8008ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4680      	mov	r8, r0
 8008aba:	e7f0      	b.n	8008a9e <_vfiprintf_r+0x1b6>
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <_vfiprintf_r+0x228>)
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f3af 8000 	nop.w
 8008acc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ad0:	4681      	mov	r9, r0
 8008ad2:	d1d5      	bne.n	8008a80 <_vfiprintf_r+0x198>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	065b      	lsls	r3, r3, #25
 8008ad8:	f53f af7e 	bmi.w	80089d8 <_vfiprintf_r+0xf0>
 8008adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ade:	e77d      	b.n	80089dc <_vfiprintf_r+0xf4>
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4b0a      	ldr	r3, [pc, #40]	; (8008b10 <_vfiprintf_r+0x228>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 f888 	bl	8008c00 <_printf_i>
 8008af0:	e7ec      	b.n	8008acc <_vfiprintf_r+0x1e4>
 8008af2:	bf00      	nop
 8008af4:	080093d4 	.word	0x080093d4
 8008af8:	08009414 	.word	0x08009414
 8008afc:	080093f4 	.word	0x080093f4
 8008b00:	080093b4 	.word	0x080093b4
 8008b04:	0800941a 	.word	0x0800941a
 8008b08:	0800941e 	.word	0x0800941e
 8008b0c:	00000000 	.word	0x00000000
 8008b10:	080088c3 	.word	0x080088c3

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4691      	mov	r9, r2
 8008b1a:	461f      	mov	r7, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	f8c9 3000 	str.w	r3, [r9]
 8008b2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	b112      	cbz	r2, 8008b3e <_printf_common+0x2a>
 8008b38:	3301      	adds	r3, #1
 8008b3a:	f8c9 3000 	str.w	r3, [r9]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b48:	3302      	addmi	r3, #2
 8008b4a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d107      	bne.n	8008b66 <_printf_common+0x52>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	f8d9 2000 	ldr.w	r2, [r9]
 8008b60:	1a9b      	subs	r3, r3, r2
 8008b62:	42ab      	cmp	r3, r5
 8008b64:	dc28      	bgt.n	8008bb8 <_printf_common+0xa4>
 8008b66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	3300      	adds	r3, #0
 8008b6e:	bf18      	it	ne
 8008b70:	2301      	movne	r3, #1
 8008b72:	0692      	lsls	r2, r2, #26
 8008b74:	d42d      	bmi.n	8008bd2 <_printf_common+0xbe>
 8008b76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b7a:	4639      	mov	r1, r7
 8008b7c:	4630      	mov	r0, r6
 8008b7e:	47c0      	blx	r8
 8008b80:	3001      	adds	r0, #1
 8008b82:	d020      	beq.n	8008bc6 <_printf_common+0xb2>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	68e5      	ldr	r5, [r4, #12]
 8008b88:	f8d9 2000 	ldr.w	r2, [r9]
 8008b8c:	f003 0306 	and.w	r3, r3, #6
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	bf08      	it	eq
 8008b94:	1aad      	subeq	r5, r5, r2
 8008b96:	68a3      	ldr	r3, [r4, #8]
 8008b98:	6922      	ldr	r2, [r4, #16]
 8008b9a:	bf0c      	ite	eq
 8008b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ba0:	2500      	movne	r5, #0
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	bfc4      	itt	gt
 8008ba6:	1a9b      	subgt	r3, r3, r2
 8008ba8:	18ed      	addgt	r5, r5, r3
 8008baa:	f04f 0900 	mov.w	r9, #0
 8008bae:	341a      	adds	r4, #26
 8008bb0:	454d      	cmp	r5, r9
 8008bb2:	d11a      	bne.n	8008bea <_printf_common+0xd6>
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	e008      	b.n	8008bca <_printf_common+0xb6>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4652      	mov	r2, sl
 8008bbc:	4639      	mov	r1, r7
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	47c0      	blx	r8
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d103      	bne.n	8008bce <_printf_common+0xba>
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bce:	3501      	adds	r5, #1
 8008bd0:	e7c3      	b.n	8008b5a <_printf_common+0x46>
 8008bd2:	18e1      	adds	r1, r4, r3
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	2030      	movs	r0, #48	; 0x30
 8008bd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bdc:	4422      	add	r2, r4
 8008bde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008be6:	3302      	adds	r3, #2
 8008be8:	e7c5      	b.n	8008b76 <_printf_common+0x62>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4622      	mov	r2, r4
 8008bee:	4639      	mov	r1, r7
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	47c0      	blx	r8
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d0e6      	beq.n	8008bc6 <_printf_common+0xb2>
 8008bf8:	f109 0901 	add.w	r9, r9, #1
 8008bfc:	e7d8      	b.n	8008bb0 <_printf_common+0x9c>
	...

08008c00 <_printf_i>:
 8008c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c08:	460c      	mov	r4, r1
 8008c0a:	7e09      	ldrb	r1, [r1, #24]
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	296e      	cmp	r1, #110	; 0x6e
 8008c10:	4617      	mov	r7, r2
 8008c12:	4606      	mov	r6, r0
 8008c14:	4698      	mov	r8, r3
 8008c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c18:	f000 80b3 	beq.w	8008d82 <_printf_i+0x182>
 8008c1c:	d822      	bhi.n	8008c64 <_printf_i+0x64>
 8008c1e:	2963      	cmp	r1, #99	; 0x63
 8008c20:	d036      	beq.n	8008c90 <_printf_i+0x90>
 8008c22:	d80a      	bhi.n	8008c3a <_printf_i+0x3a>
 8008c24:	2900      	cmp	r1, #0
 8008c26:	f000 80b9 	beq.w	8008d9c <_printf_i+0x19c>
 8008c2a:	2958      	cmp	r1, #88	; 0x58
 8008c2c:	f000 8083 	beq.w	8008d36 <_printf_i+0x136>
 8008c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c38:	e032      	b.n	8008ca0 <_printf_i+0xa0>
 8008c3a:	2964      	cmp	r1, #100	; 0x64
 8008c3c:	d001      	beq.n	8008c42 <_printf_i+0x42>
 8008c3e:	2969      	cmp	r1, #105	; 0x69
 8008c40:	d1f6      	bne.n	8008c30 <_printf_i+0x30>
 8008c42:	6820      	ldr	r0, [r4, #0]
 8008c44:	6813      	ldr	r3, [r2, #0]
 8008c46:	0605      	lsls	r5, r0, #24
 8008c48:	f103 0104 	add.w	r1, r3, #4
 8008c4c:	d52a      	bpl.n	8008ca4 <_printf_i+0xa4>
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6011      	str	r1, [r2, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	da03      	bge.n	8008c5e <_printf_i+0x5e>
 8008c56:	222d      	movs	r2, #45	; 0x2d
 8008c58:	425b      	negs	r3, r3
 8008c5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c5e:	486f      	ldr	r0, [pc, #444]	; (8008e1c <_printf_i+0x21c>)
 8008c60:	220a      	movs	r2, #10
 8008c62:	e039      	b.n	8008cd8 <_printf_i+0xd8>
 8008c64:	2973      	cmp	r1, #115	; 0x73
 8008c66:	f000 809d 	beq.w	8008da4 <_printf_i+0x1a4>
 8008c6a:	d808      	bhi.n	8008c7e <_printf_i+0x7e>
 8008c6c:	296f      	cmp	r1, #111	; 0x6f
 8008c6e:	d020      	beq.n	8008cb2 <_printf_i+0xb2>
 8008c70:	2970      	cmp	r1, #112	; 0x70
 8008c72:	d1dd      	bne.n	8008c30 <_printf_i+0x30>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	f043 0320 	orr.w	r3, r3, #32
 8008c7a:	6023      	str	r3, [r4, #0]
 8008c7c:	e003      	b.n	8008c86 <_printf_i+0x86>
 8008c7e:	2975      	cmp	r1, #117	; 0x75
 8008c80:	d017      	beq.n	8008cb2 <_printf_i+0xb2>
 8008c82:	2978      	cmp	r1, #120	; 0x78
 8008c84:	d1d4      	bne.n	8008c30 <_printf_i+0x30>
 8008c86:	2378      	movs	r3, #120	; 0x78
 8008c88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c8c:	4864      	ldr	r0, [pc, #400]	; (8008e20 <_printf_i+0x220>)
 8008c8e:	e055      	b.n	8008d3c <_printf_i+0x13c>
 8008c90:	6813      	ldr	r3, [r2, #0]
 8008c92:	1d19      	adds	r1, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6011      	str	r1, [r2, #0]
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e08c      	b.n	8008dbe <_printf_i+0x1be>
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6011      	str	r1, [r2, #0]
 8008ca8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cac:	bf18      	it	ne
 8008cae:	b21b      	sxthne	r3, r3
 8008cb0:	e7cf      	b.n	8008c52 <_printf_i+0x52>
 8008cb2:	6813      	ldr	r3, [r2, #0]
 8008cb4:	6825      	ldr	r5, [r4, #0]
 8008cb6:	1d18      	adds	r0, r3, #4
 8008cb8:	6010      	str	r0, [r2, #0]
 8008cba:	0628      	lsls	r0, r5, #24
 8008cbc:	d501      	bpl.n	8008cc2 <_printf_i+0xc2>
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	e002      	b.n	8008cc8 <_printf_i+0xc8>
 8008cc2:	0668      	lsls	r0, r5, #25
 8008cc4:	d5fb      	bpl.n	8008cbe <_printf_i+0xbe>
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	4854      	ldr	r0, [pc, #336]	; (8008e1c <_printf_i+0x21c>)
 8008cca:	296f      	cmp	r1, #111	; 0x6f
 8008ccc:	bf14      	ite	ne
 8008cce:	220a      	movne	r2, #10
 8008cd0:	2208      	moveq	r2, #8
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd8:	6865      	ldr	r5, [r4, #4]
 8008cda:	60a5      	str	r5, [r4, #8]
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	f2c0 8095 	blt.w	8008e0c <_printf_i+0x20c>
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	f021 0104 	bic.w	r1, r1, #4
 8008ce8:	6021      	str	r1, [r4, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d13d      	bne.n	8008d6a <_printf_i+0x16a>
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	f040 808e 	bne.w	8008e10 <_printf_i+0x210>
 8008cf4:	4665      	mov	r5, ip
 8008cf6:	2a08      	cmp	r2, #8
 8008cf8:	d10b      	bne.n	8008d12 <_printf_i+0x112>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	07db      	lsls	r3, r3, #31
 8008cfe:	d508      	bpl.n	8008d12 <_printf_i+0x112>
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	bfde      	ittt	le
 8008d08:	2330      	movle	r3, #48	; 0x30
 8008d0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d12:	ebac 0305 	sub.w	r3, ip, r5
 8008d16:	6123      	str	r3, [r4, #16]
 8008d18:	f8cd 8000 	str.w	r8, [sp]
 8008d1c:	463b      	mov	r3, r7
 8008d1e:	aa03      	add	r2, sp, #12
 8008d20:	4621      	mov	r1, r4
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff fef6 	bl	8008b14 <_printf_common>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d14d      	bne.n	8008dc8 <_printf_i+0x1c8>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	b005      	add	sp, #20
 8008d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d36:	4839      	ldr	r0, [pc, #228]	; (8008e1c <_printf_i+0x21c>)
 8008d38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d3c:	6813      	ldr	r3, [r2, #0]
 8008d3e:	6821      	ldr	r1, [r4, #0]
 8008d40:	1d1d      	adds	r5, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	6015      	str	r5, [r2, #0]
 8008d46:	060a      	lsls	r2, r1, #24
 8008d48:	d50b      	bpl.n	8008d62 <_printf_i+0x162>
 8008d4a:	07ca      	lsls	r2, r1, #31
 8008d4c:	bf44      	itt	mi
 8008d4e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d52:	6021      	strmi	r1, [r4, #0]
 8008d54:	b91b      	cbnz	r3, 8008d5e <_printf_i+0x15e>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	f022 0220 	bic.w	r2, r2, #32
 8008d5c:	6022      	str	r2, [r4, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	e7b7      	b.n	8008cd2 <_printf_i+0xd2>
 8008d62:	064d      	lsls	r5, r1, #25
 8008d64:	bf48      	it	mi
 8008d66:	b29b      	uxthmi	r3, r3
 8008d68:	e7ef      	b.n	8008d4a <_printf_i+0x14a>
 8008d6a:	4665      	mov	r5, ip
 8008d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d70:	fb02 3311 	mls	r3, r2, r1, r3
 8008d74:	5cc3      	ldrb	r3, [r0, r3]
 8008d76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	2900      	cmp	r1, #0
 8008d7e:	d1f5      	bne.n	8008d6c <_printf_i+0x16c>
 8008d80:	e7b9      	b.n	8008cf6 <_printf_i+0xf6>
 8008d82:	6813      	ldr	r3, [r2, #0]
 8008d84:	6825      	ldr	r5, [r4, #0]
 8008d86:	6961      	ldr	r1, [r4, #20]
 8008d88:	1d18      	adds	r0, r3, #4
 8008d8a:	6010      	str	r0, [r2, #0]
 8008d8c:	0628      	lsls	r0, r5, #24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	d501      	bpl.n	8008d96 <_printf_i+0x196>
 8008d92:	6019      	str	r1, [r3, #0]
 8008d94:	e002      	b.n	8008d9c <_printf_i+0x19c>
 8008d96:	066a      	lsls	r2, r5, #25
 8008d98:	d5fb      	bpl.n	8008d92 <_printf_i+0x192>
 8008d9a:	8019      	strh	r1, [r3, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	4665      	mov	r5, ip
 8008da2:	e7b9      	b.n	8008d18 <_printf_i+0x118>
 8008da4:	6813      	ldr	r3, [r2, #0]
 8008da6:	1d19      	adds	r1, r3, #4
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	681d      	ldr	r5, [r3, #0]
 8008dac:	6862      	ldr	r2, [r4, #4]
 8008dae:	2100      	movs	r1, #0
 8008db0:	4628      	mov	r0, r5
 8008db2:	f7f7 fa3d 	bl	8000230 <memchr>
 8008db6:	b108      	cbz	r0, 8008dbc <_printf_i+0x1bc>
 8008db8:	1b40      	subs	r0, r0, r5
 8008dba:	6060      	str	r0, [r4, #4]
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	6123      	str	r3, [r4, #16]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dc6:	e7a7      	b.n	8008d18 <_printf_i+0x118>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	462a      	mov	r2, r5
 8008dcc:	4639      	mov	r1, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	47c0      	blx	r8
 8008dd2:	3001      	adds	r0, #1
 8008dd4:	d0aa      	beq.n	8008d2c <_printf_i+0x12c>
 8008dd6:	6823      	ldr	r3, [r4, #0]
 8008dd8:	079b      	lsls	r3, r3, #30
 8008dda:	d413      	bmi.n	8008e04 <_printf_i+0x204>
 8008ddc:	68e0      	ldr	r0, [r4, #12]
 8008dde:	9b03      	ldr	r3, [sp, #12]
 8008de0:	4298      	cmp	r0, r3
 8008de2:	bfb8      	it	lt
 8008de4:	4618      	movlt	r0, r3
 8008de6:	e7a3      	b.n	8008d30 <_printf_i+0x130>
 8008de8:	2301      	movs	r3, #1
 8008dea:	464a      	mov	r2, r9
 8008dec:	4639      	mov	r1, r7
 8008dee:	4630      	mov	r0, r6
 8008df0:	47c0      	blx	r8
 8008df2:	3001      	adds	r0, #1
 8008df4:	d09a      	beq.n	8008d2c <_printf_i+0x12c>
 8008df6:	3501      	adds	r5, #1
 8008df8:	68e3      	ldr	r3, [r4, #12]
 8008dfa:	9a03      	ldr	r2, [sp, #12]
 8008dfc:	1a9b      	subs	r3, r3, r2
 8008dfe:	42ab      	cmp	r3, r5
 8008e00:	dcf2      	bgt.n	8008de8 <_printf_i+0x1e8>
 8008e02:	e7eb      	b.n	8008ddc <_printf_i+0x1dc>
 8008e04:	2500      	movs	r5, #0
 8008e06:	f104 0919 	add.w	r9, r4, #25
 8008e0a:	e7f5      	b.n	8008df8 <_printf_i+0x1f8>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1ac      	bne.n	8008d6a <_printf_i+0x16a>
 8008e10:	7803      	ldrb	r3, [r0, #0]
 8008e12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e1a:	e76c      	b.n	8008cf6 <_printf_i+0xf6>
 8008e1c:	08009425 	.word	0x08009425
 8008e20:	08009436 	.word	0x08009436

08008e24 <__sread>:
 8008e24:	b510      	push	{r4, lr}
 8008e26:	460c      	mov	r4, r1
 8008e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e2c:	f000 f8d4 	bl	8008fd8 <_read_r>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	bfab      	itete	ge
 8008e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e36:	89a3      	ldrhlt	r3, [r4, #12]
 8008e38:	181b      	addge	r3, r3, r0
 8008e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e3e:	bfac      	ite	ge
 8008e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e42:	81a3      	strhlt	r3, [r4, #12]
 8008e44:	bd10      	pop	{r4, pc}

08008e46 <__swrite>:
 8008e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	898b      	ldrh	r3, [r1, #12]
 8008e4e:	05db      	lsls	r3, r3, #23
 8008e50:	4605      	mov	r5, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4616      	mov	r6, r2
 8008e56:	d505      	bpl.n	8008e64 <__swrite+0x1e>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e60:	f000 f868 	bl	8008f34 <_lseek_r>
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e6e:	81a3      	strh	r3, [r4, #12]
 8008e70:	4632      	mov	r2, r6
 8008e72:	463b      	mov	r3, r7
 8008e74:	4628      	mov	r0, r5
 8008e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e7a:	f000 b817 	b.w	8008eac <_write_r>

08008e7e <__sseek>:
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	460c      	mov	r4, r1
 8008e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e86:	f000 f855 	bl	8008f34 <_lseek_r>
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	bf15      	itete	ne
 8008e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e9a:	81a3      	strheq	r3, [r4, #12]
 8008e9c:	bf18      	it	ne
 8008e9e:	81a3      	strhne	r3, [r4, #12]
 8008ea0:	bd10      	pop	{r4, pc}

08008ea2 <__sclose>:
 8008ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea6:	f000 b813 	b.w	8008ed0 <_close_r>
	...

08008eac <_write_r>:
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4c07      	ldr	r4, [pc, #28]	; (8008ecc <_write_r+0x20>)
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	4608      	mov	r0, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	6022      	str	r2, [r4, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	f7f9 fb9a 	bl	80025f4 <_write>
 8008ec0:	1c43      	adds	r3, r0, #1
 8008ec2:	d102      	bne.n	8008eca <_write_r+0x1e>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	b103      	cbz	r3, 8008eca <_write_r+0x1e>
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	bd38      	pop	{r3, r4, r5, pc}
 8008ecc:	2000859c 	.word	0x2000859c

08008ed0 <_close_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4c06      	ldr	r4, [pc, #24]	; (8008eec <_close_r+0x1c>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	f7f9 fba6 	bl	800262c <_close>
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	d102      	bne.n	8008eea <_close_r+0x1a>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	b103      	cbz	r3, 8008eea <_close_r+0x1a>
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	bd38      	pop	{r3, r4, r5, pc}
 8008eec:	2000859c 	.word	0x2000859c

08008ef0 <_fstat_r>:
 8008ef0:	b538      	push	{r3, r4, r5, lr}
 8008ef2:	4c07      	ldr	r4, [pc, #28]	; (8008f10 <_fstat_r+0x20>)
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	4608      	mov	r0, r1
 8008efa:	4611      	mov	r1, r2
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	f7f9 fba1 	bl	8002644 <_fstat>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	d102      	bne.n	8008f0c <_fstat_r+0x1c>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	b103      	cbz	r3, 8008f0c <_fstat_r+0x1c>
 8008f0a:	602b      	str	r3, [r5, #0]
 8008f0c:	bd38      	pop	{r3, r4, r5, pc}
 8008f0e:	bf00      	nop
 8008f10:	2000859c 	.word	0x2000859c

08008f14 <_isatty_r>:
 8008f14:	b538      	push	{r3, r4, r5, lr}
 8008f16:	4c06      	ldr	r4, [pc, #24]	; (8008f30 <_isatty_r+0x1c>)
 8008f18:	2300      	movs	r3, #0
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	4608      	mov	r0, r1
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	f7f9 fba0 	bl	8002664 <_isatty>
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d102      	bne.n	8008f2e <_isatty_r+0x1a>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	b103      	cbz	r3, 8008f2e <_isatty_r+0x1a>
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	bd38      	pop	{r3, r4, r5, pc}
 8008f30:	2000859c 	.word	0x2000859c

08008f34 <_lseek_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	4c07      	ldr	r4, [pc, #28]	; (8008f54 <_lseek_r+0x20>)
 8008f38:	4605      	mov	r5, r0
 8008f3a:	4608      	mov	r0, r1
 8008f3c:	4611      	mov	r1, r2
 8008f3e:	2200      	movs	r2, #0
 8008f40:	6022      	str	r2, [r4, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f7f9 fb99 	bl	800267a <_lseek>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d102      	bne.n	8008f52 <_lseek_r+0x1e>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	b103      	cbz	r3, 8008f52 <_lseek_r+0x1e>
 8008f50:	602b      	str	r3, [r5, #0]
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	2000859c 	.word	0x2000859c

08008f58 <memmove>:
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	eb01 0302 	add.w	r3, r1, r2
 8008f60:	d807      	bhi.n	8008f72 <memmove+0x1a>
 8008f62:	1e42      	subs	r2, r0, #1
 8008f64:	4299      	cmp	r1, r3
 8008f66:	d00a      	beq.n	8008f7e <memmove+0x26>
 8008f68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f70:	e7f8      	b.n	8008f64 <memmove+0xc>
 8008f72:	4283      	cmp	r3, r0
 8008f74:	d9f5      	bls.n	8008f62 <memmove+0xa>
 8008f76:	1881      	adds	r1, r0, r2
 8008f78:	1ad2      	subs	r2, r2, r3
 8008f7a:	42d3      	cmn	r3, r2
 8008f7c:	d100      	bne.n	8008f80 <memmove+0x28>
 8008f7e:	bd10      	pop	{r4, pc}
 8008f80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f88:	e7f7      	b.n	8008f7a <memmove+0x22>

08008f8a <_realloc_r>:
 8008f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	4614      	mov	r4, r2
 8008f90:	460e      	mov	r6, r1
 8008f92:	b921      	cbnz	r1, 8008f9e <_realloc_r+0x14>
 8008f94:	4611      	mov	r1, r2
 8008f96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f9a:	f7fe bf59 	b.w	8007e50 <_malloc_r>
 8008f9e:	b922      	cbnz	r2, 8008faa <_realloc_r+0x20>
 8008fa0:	f7fe ff08 	bl	8007db4 <_free_r>
 8008fa4:	4625      	mov	r5, r4
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008faa:	f000 f827 	bl	8008ffc <_malloc_usable_size_r>
 8008fae:	42a0      	cmp	r0, r4
 8008fb0:	d20f      	bcs.n	8008fd2 <_realloc_r+0x48>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7fe ff4b 	bl	8007e50 <_malloc_r>
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	d0f2      	beq.n	8008fa6 <_realloc_r+0x1c>
 8008fc0:	4631      	mov	r1, r6
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	f7fe fee2 	bl	8007d8c <memcpy>
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7fe fef2 	bl	8007db4 <_free_r>
 8008fd0:	e7e9      	b.n	8008fa6 <_realloc_r+0x1c>
 8008fd2:	4635      	mov	r5, r6
 8008fd4:	e7e7      	b.n	8008fa6 <_realloc_r+0x1c>
	...

08008fd8 <_read_r>:
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4c07      	ldr	r4, [pc, #28]	; (8008ff8 <_read_r+0x20>)
 8008fdc:	4605      	mov	r5, r0
 8008fde:	4608      	mov	r0, r1
 8008fe0:	4611      	mov	r1, r2
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6022      	str	r2, [r4, #0]
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	f7f9 fae7 	bl	80025ba <_read>
 8008fec:	1c43      	adds	r3, r0, #1
 8008fee:	d102      	bne.n	8008ff6 <_read_r+0x1e>
 8008ff0:	6823      	ldr	r3, [r4, #0]
 8008ff2:	b103      	cbz	r3, 8008ff6 <_read_r+0x1e>
 8008ff4:	602b      	str	r3, [r5, #0]
 8008ff6:	bd38      	pop	{r3, r4, r5, pc}
 8008ff8:	2000859c 	.word	0x2000859c

08008ffc <_malloc_usable_size_r>:
 8008ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009000:	1f18      	subs	r0, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	bfbc      	itt	lt
 8009006:	580b      	ldrlt	r3, [r1, r0]
 8009008:	18c0      	addlt	r0, r0, r3
 800900a:	4770      	bx	lr

0800900c <_init>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr

08009018 <_fini>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr
